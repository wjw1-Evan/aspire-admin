---
globs: **/Platform.Admin/**/*.ts,**/Platform.Admin/**/*.tsx,**/config/**/*.ts
description: Ant Design Pro Âíå UmiJS ÂºÄÂèëËßÑËåÉ
---

# Ant Design Pro + UmiJS ÂºÄÂèëËßÑËåÉ

## üéØ ÊäÄÊúØÊ†àÊ¶ÇËßà

### Ê†∏ÂøÉÊäÄÊúØ
- **Ant Design Pro** - ‰ºÅ‰∏öÁ∫ß‰∏≠ÂêéÂè∞ UI Ëß£ÂÜ≥ÊñπÊ°à
- **UmiJS 4** - ‰ºÅ‰∏öÁ∫ßÂâçÁ´ØÂ∫îÁî®Ê°ÜÊû∂
- **React 19** - Áî®Êà∑ÁïåÈù¢Â∫ì
- **TypeScript** - Á±ªÂûãÂÆâÂÖ®ÁöÑ JavaScript
- **Biome** - ‰ª£Á†ÅÊ†ºÂºèÂåñÂíå Lint Â∑•ÂÖ∑

## üèóÔ∏è È°πÁõÆÁªìÊûÑ

### Ê†áÂáÜÁõÆÂΩïÁªìÊûÑ

```text
Platform.Admin/
‚îú‚îÄ‚îÄ config/                   # UmiJS ÈÖçÁΩÆ
‚îÇ   ‚îú‚îÄ‚îÄ config.ts            # ‰∏ªÈÖçÁΩÆÊñá‰ª∂
‚îÇ   ‚îú‚îÄ‚îÄ defaultSettings.ts   # ÈªòËÆ§ËÆæÁΩÆ
‚îÇ   ‚îú‚îÄ‚îÄ proxy.ts            # ÂºÄÂèë‰ª£ÁêÜÈÖçÁΩÆ
‚îÇ   ‚îî‚îÄ‚îÄ routes.ts           # Ë∑ØÁî±ÈÖçÁΩÆ
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/         # ÂÖ®Â±ÄÁªÑ‰ª∂
‚îÇ   ‚îú‚îÄ‚îÄ pages/             # È°µÈù¢ÁªÑ‰ª∂
‚îÇ   ‚îú‚îÄ‚îÄ services/          # API ÊúçÂä°
‚îÇ   ‚îú‚îÄ‚îÄ utils/             # Â∑•ÂÖ∑ÂáΩÊï∞
‚îÇ   ‚îú‚îÄ‚îÄ app.tsx            # Â∫îÁî®ÂÖ•Âè£ÈÖçÁΩÆ
‚îÇ   ‚îî‚îÄ‚îÄ request-error-config.ts  # ËØ∑Ê±ÇÈîôËØØÈÖçÁΩÆ
‚îú‚îÄ‚îÄ biome.json             # Biome ÈÖçÁΩÆ
‚îî‚îÄ‚îÄ package.json           # ‰æùËµñÈÖçÁΩÆ
```

## üé® Â∫îÁî®ÈÖçÁΩÆ

### app.tsx ËøêË°åÊó∂ÈÖçÁΩÆ

```typescript
// ‚úÖ Êé®ËçêÔºöapp.tsx Ê†áÂáÜÁªìÊûÑ
import type { RequestConfig, RunTimeLayoutConfig } from '@umijs/max';
import { history } from '@umijs/max';
import { tokenUtils } from '@/utils/token';
import defaultSettings from '../config/defaultSettings';
import { errorConfig } from './request-error-config';

// Ëé∑ÂèñÂàùÂßãÁä∂ÊÄÅ
export async function getInitialState() {
  const fetchUserInfo = async () => {
    // Ê£ÄÊü• token
    if (!tokenUtils.hasToken()) {
      return undefined;
    }
    
    try {
      const msg = await queryCurrentUser({
        skipErrorHandler: true,
      });
      return msg.data;
    } catch (error) {
      tokenUtils.clearAllTokens();
      history.push('/user/login');
      return undefined;
    }
  };
  
  // ÈùûÁôªÂΩïÈ°µÈù¢ÊâßË°åÂàùÂßãÂåñ
  const { location } = history;
  if (!['/user/login', '/user/register'].includes(location.pathname)) {
    const currentUser = await fetchUserInfo();
    return {
      fetchUserInfo,
      currentUser,
      settings: defaultSettings,
    };
  }
  
  return {
    fetchUserInfo,
    settings: defaultSettings,
  };
}

// ProLayout ÈÖçÁΩÆ
export const layout: RunTimeLayoutConfig = ({ initialState, setInitialState }) => {
  return {
    actionsRender: () => [<Question key="doc" />, <SelectLang key="SelectLang" />],
    avatarProps: {
      src: initialState?.currentUser?.avatar,
      title: <AvatarName />,
      render: (_, avatarChildren) => {
        return <AvatarDropdown menu>{avatarChildren}</AvatarDropdown>;
      },
    },
    footerRender: () => <Footer />,
    onPageChange: () => {
      const { location } = history;
      // Êú™ÁôªÂΩïÈáçÂÆöÂêë
      if (!initialState?.currentUser && location.pathname !== '/user/login') {
        history.push('/user/login');
      }
    },
    // Âä®ÊÄÅËèúÂçïÊ∏≤Êüì
    menuDataRender: (menuData) => {
      if (initialState?.currentUser?.menus) {
        return convertMenuTreeToProLayout(initialState.currentUser.menus);
      }
      return menuData;
    },
    ...initialState?.settings,
  };
};
```

## üåê ÁΩëÁªúËØ∑Ê±ÇÈÖçÁΩÆ

### ËØ∑Ê±ÇÊã¶Êà™Âô®

```typescript
// ‚úÖ Êé®ËçêÔºöËØ∑Ê±ÇÈÖçÁΩÆ
export const request: RequestConfig = {
  baseURL: process.env.NODE_ENV === 'development' ? '' : 'https://api.example.com',
  
  // ËØ∑Ê±ÇÊã¶Êà™Âô® - Ê∑ªÂä†ËÆ§ËØÅÂ§¥
  requestInterceptors: [
    (config: any) => {
      const token = tokenUtils.getToken();
      if (token) {
        config.headers = {
          ...config.headers,
          Authorization: `Bearer ${token}`,
        };
      }
      return config;
    },
  ],

  // ÂìçÂ∫îÊã¶Êà™Âô® - Â§ÑÁêÜ token ËøáÊúü
  responseInterceptors: [
    (response) => response,
    async (error: any) => {
      if (error.response?.status === 401) {
        // Ê£ÄÊü•ÊòØÂê¶ÊòØÂà∑Êñ∞tokenËØ∑Ê±ÇÔºåÈÅøÂÖçÈÄíÂΩí
        const isRefreshTokenRequest = error.config?.url?.includes('/refresh-token');
        const isRetryRequest = error.config?._retry;
        
        if (isRefreshTokenRequest || isRetryRequest) {
          tokenUtils.clearAllTokens();
          history.push('/user/login');
          return Promise.reject(error);
        }
        
        // Â∞ùËØïÂà∑Êñ∞token
        const refreshToken = tokenUtils.getRefreshToken();
        if (refreshToken) {
          try {
            const { refreshToken: refreshTokenAPI } = await import('@/services/ant-design-pro/api');
            const refreshResponse = await refreshTokenAPI({ refreshToken });

            if (refreshResponse.success && refreshResponse.data) {
              const refreshResult = refreshResponse.data;
              if (refreshResult.status === 'ok' && refreshResult.token) {
                // ‰øùÂ≠òÊñ∞tokenÂπ∂ÈáçËØïËØ∑Ê±Ç
                const expiresAt = refreshResult.expiresAt 
                  ? new Date(refreshResult.expiresAt).getTime() 
                  : undefined;
                tokenUtils.setTokens(
                  refreshResult.token, 
                  refreshResult.refreshToken, 
                  expiresAt
                );

                // ÈáçËØïÂéüÂßãËØ∑Ê±Ç
                const originalRequest = error.config;
                originalRequest._retry = true;
                originalRequest.headers.Authorization = `Bearer ${refreshResult.token}`;
                return requestClient(originalRequest);
              }
            }
          } catch (refreshError) {
            console.error('Token refresh failed:', refreshError);
          }
        }
        
        // Âà∑Êñ∞Â§±Ë¥•ÔºåË∑≥ËΩ¨ÁôªÂΩï
        tokenUtils.clearAllTokens();
        history.push('/user/login');
      }
      
      return Promise.reject(error);
    },
  ],
  
  ...errorConfig,
};
```

### ÈîôËØØÂ§ÑÁêÜÈÖçÁΩÆ

```typescript
// ‚úÖ Êé®ËçêÔºöÁªü‰∏ÄÈîôËØØÂ§ÑÁêÜ
import { message, notification } from 'antd';

export enum ErrorShowType {
  SILENT = 0,
  WARN_MESSAGE = 1,
  ERROR_MESSAGE = 2,
  NOTIFICATION = 3,
  REDIRECT = 9,
}

export const errorConfig: RequestConfig = {
  errorConfig: {
    // ÈîôËØØÊäõÂá∫
    errorThrower: (res) => {
      const { success, data, errorCode, errorMessage, showType } = res;
      if (!success) {
        const error: any = new Error(errorMessage);
        error.name = 'BizError';
        error.info = { errorCode, errorMessage, showType, data };
        throw error;
      }
    },
    
    // ÈîôËØØÊé•Êî∂ÂèäÂ§ÑÁêÜ
    errorHandler: (error: any, opts: any) => {
      if (opts?.skipErrorHandler) throw error;
      
      if (error.name === 'BizError') {
        const errorInfo = error.info;
        if (errorInfo) {
          const { errorMessage, errorCode } = errorInfo;
          switch (errorInfo.showType) {
            case ErrorShowType.SILENT:
              break;
            case ErrorShowType.WARN_MESSAGE:
              message.warning(errorMessage);
              break;
            case ErrorShowType.ERROR_MESSAGE:
              message.error(errorMessage);
              break;
            case ErrorShowType.NOTIFICATION:
              notification.open({
                description: errorMessage,
                message: errorCode,
              });
              break;
            default:
              message.error(errorMessage);
          }
        }
      } else if (error.response) {
        message.error(`Response status: ${error.response.status}`);
      } else if (error.request) {
        message.error('None response! Please retry.');
      } else {
        message.error('Request error, please retry.');
      }
    },
  },
};
```

## üìÅ ÊúçÂä°Â±ÇËÆæËÆ°

### API ÊúçÂä°Â∞ÅË£Ö

```typescript
// ‚úÖ Êé®ËçêÔºöservices/ant-design-pro/api.ts
import { request } from '@umijs/max';
import type { ApiResponse } from '@/types/unified-api';

/** Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ GET /api/currentUser */
export async function currentUser(options?: { [key: string]: any }) {
  return request<ApiResponse<API.CurrentUser>>('/api/currentUser', {
    method: 'GET',
    ...(options || {}),
  });
}

/** ÁôªÂΩïÊé•Âè£ POST /api/login/account */
export async function login(
  body: API.LoginParams, 
  options?: { [key: string]: any }
) {
  return request<ApiResponse<API.LoginData>>('/api/login/account', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Âà∑Êñ∞tokenÊé•Âè£ POST /api/refresh-token */
export async function refreshToken(
  body: API.RefreshTokenRequest, 
  options?: { [key: string]: any }
) {
  return request<API.ApiResponse<API.RefreshTokenResult>>('/api/refresh-token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** ÈÄÄÂá∫ÁôªÂΩï POST /api/login/outLogin */
export async function outLogin(options?: { [key: string]: any }) {
  return request<Record<string, any>>('/api/login/outLogin', {
    method: 'POST',
    ...(options || {}),
  });
}
```

### Token Â∑•ÂÖ∑Â∞ÅË£Ö

```typescript
// ‚úÖ Êé®ËçêÔºöutils/token.ts
const TOKEN_KEY = 'auth_token';
const REFRESH_TOKEN_KEY = 'auth_refresh_token';
const TOKEN_EXPIRES_KEY = 'auth_token_expires';

export const tokenUtils = {
  getToken(): string | null {
    return localStorage.getItem(TOKEN_KEY);
  },

  setToken(token: string): void {
    localStorage.setItem(TOKEN_KEY, token);
  },

  removeToken(): void {
    localStorage.removeItem(TOKEN_KEY);
  },

  hasToken(): boolean {
    return !!this.getToken();
  },

  getRefreshToken(): string | null {
    return localStorage.getItem(REFRESH_TOKEN_KEY);
  },

  setRefreshToken(refreshToken: string): void {
    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
  },

  removeRefreshToken(): void {
    localStorage.removeItem(REFRESH_TOKEN_KEY);
  },

  getTokenExpiresAt(): number | null {
    const expires = localStorage.getItem(TOKEN_EXPIRES_KEY);
    return expires ? parseInt(expires, 10) : null;
  },

  setTokenExpiresAt(expiresAt: number): void {
    localStorage.setItem(TOKEN_EXPIRES_KEY, expiresAt.toString());
  },

  removeTokenExpiresAt(): void {
    localStorage.removeItem(TOKEN_EXPIRES_KEY);
  },

  setTokens(token: string, refreshToken: string, expiresAt?: number): void {
    this.setToken(token);
    this.setRefreshToken(refreshToken);
    if (expiresAt) {
      this.setTokenExpiresAt(expiresAt);
    }
  },

  clearAllTokens(): void {
    this.removeToken();
    this.removeRefreshToken();
    this.removeTokenExpiresAt();
  },

  isTokenExpired(): boolean {
    const expiresAt = this.getTokenExpiresAt();
    if (!expiresAt) return false;
    return Date.now() >= expiresAt;
  },
};
```

## üìä È°µÈù¢ÂºÄÂèë

### ProTable ‰ΩøÁî®

```typescript
// ‚úÖ Êé®ËçêÔºö‰ΩøÁî® ProTable
import { ProTable } from '@ant-design/pro-components';
import type { ProColumns } from '@ant-design/pro-components';

const UserManagement: React.FC = () => {
  const actionRef = useRef<ActionType>();
  
  const columns: ProColumns<API.AppUser>[] = [
    {
      title: 'Áî®Êà∑Âêç',
      dataIndex: 'username',
      copyable: true,
      ellipsis: true,
    },
    {
      title: 'ÈÇÆÁÆ±',
      dataIndex: 'email',
      copyable: true,
    },
    {
      title: 'ËßíËâ≤',
      dataIndex: 'access',
      valueEnum: {
        admin: { text: 'ÁÆ°ÁêÜÂëò', status: 'Success' },
        user: { text: 'Áî®Êà∑', status: 'Default' },
      },
    },
    {
      title: 'Êìç‰Ωú',
      valueType: 'option',
      render: (_, record) => [
        <a key="edit" onClick={() => handleEdit(record)}>ÁºñËæë</a>,
        <a key="delete" onClick={() => handleDelete(record)}>Âà†Èô§</a>,
      ],
    },
  ];

  return (
    <ProTable<API.AppUser>
      headerTitle="Áî®Êà∑ÂàóË°®"
      actionRef={actionRef}
      rowKey="id"
      search={{
        labelWidth: 120,
      }}
      toolBarRender={() => [
        <Button key="primary" type="primary" onClick={() => handleAdd()}>
          Êñ∞Âª∫
        </Button>,
      ]}
      request={async (params, sort, filter) => {
        const msg = await getUsers({ ...params, ...sort, ...filter });
        return {
          data: msg.data,
          success: msg.success,
          total: msg.total,
        };
      }}
      columns={columns}
    />
  );
};
```

### ProForm ‰ΩøÁî®

```typescript
// ‚úÖ Êé®ËçêÔºö‰ΩøÁî® ProForm
import { ModalForm, ProFormText, ProFormSelect } from '@ant-design/pro-components';

const UserForm: React.FC<UserFormProps> = ({ visible, onCancel, onSubmit, initialValues }) => {
  return (
    <ModalForm
      title={initialValues ? 'ÁºñËæëÁî®Êà∑' : 'Êñ∞Âª∫Áî®Êà∑'}
      open={visible}
      onFinish={async (values) => {
        await onSubmit(values);
        return true;
      }}
      onOpenChange={(open) => {
        if (!open) onCancel();
      }}
      initialValues={initialValues}
    >
      <ProFormText
        name="username"
        label="Áî®Êà∑Âêç"
        placeholder="ËØ∑ËæìÂÖ•Áî®Êà∑Âêç"
        rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç' }]}
      />
      
      <ProFormText
        name="email"
        label="ÈÇÆÁÆ±"
        placeholder="ËØ∑ËæìÂÖ•ÈÇÆÁÆ±"
        rules={[
          { required: true, message: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±' },
          { type: 'email', message: 'ÈÇÆÁÆ±Ê†ºÂºè‰∏çÊ≠£Á°Æ' },
        ]}
      />
      
      <ProFormSelect
        name="access"
        label="ËßíËâ≤"
        valueEnum={{
          admin: 'ÁÆ°ÁêÜÂëò',
          user: 'Áî®Êà∑',
          guest: 'ËÆøÂÆ¢',
        }}
        rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ËßíËâ≤' }]}
      />
    </ModalForm>
  );
};
```

## üéØ Ë∑ØÁî±ÈÖçÁΩÆ

### routes.ts ÈÖçÁΩÆ

```typescript
// ‚úÖ Êé®ËçêÔºöconfig/routes.ts
export default [
  {
    path: '/user',
    layout: false,
    routes: [
      { path: '/user/login', component: './user/login' },
      { path: '/user/register', component: './user/register' },
    ],
  },
  {
    path: '/welcome',
    name: 'Ê¨¢Ëøé',
    icon: 'smile',
    component: './Welcome',
  },
  {
    path: '/admin',
    name: 'Á≥ªÁªüÁÆ°ÁêÜ',
    icon: 'crown',
    access: 'canAdmin',
    routes: [
      {
        path: '/admin/user-management',
        name: 'Áî®Êà∑ÁÆ°ÁêÜ',
        component: './user-management',
      },
      {
        path: '/admin/role-management',
        name: 'ËßíËâ≤ÁÆ°ÁêÜ',
        component: './role-management',
      },
    ],
  },
  { path: '/', redirect: '/welcome' },
  { path: '*', layout: false, component: './404' },
];
```

### Âä®ÊÄÅËèúÂçï

```typescript
// ‚úÖ Êé®ËçêÔºöÂä®ÊÄÅËèúÂçïÊ∏≤Êüì
function convertMenuTreeToProLayout(menus: API.MenuTreeNode[]): any[] {
  return menus
    .filter(menu => !menu.hideInMenu)
    .map(menu => {
      const menuItem: any = {
        name: menu.name,
        path: menu.path,
        icon: getIconComponent(menu.icon),
      };

      if (menu.isExternal) {
        menuItem.target = menu.openInNewTab ? '_blank' : '_self';
      }

      if (menu.children && menu.children.length > 0) {
        menuItem.routes = convertMenuTreeToProLayout(menu.children);
      }

      return menuItem;
    });
}
```

## üö´ ÈÅøÂÖçÁöÑÂÅöÊ≥ï

- ‰∏çË¶ÅÁõ¥Êé•‰øÆÊîπ ProComponents ÁöÑÂÜÖÈÉ®Áä∂ÊÄÅ
- ‰∏çË¶ÅÂøΩÁï• TypeScript Á±ªÂûãÊ£ÄÊü•
- ‰∏çË¶ÅÂú®ÁªÑ‰ª∂‰∏≠Áõ¥Êé•‰ΩøÁî® localStorageÔºå‰ΩøÁî® tokenUtils
- ‰∏çË¶ÅÂøòËÆ∞Â§ÑÁêÜÂºÇÊ≠•ËØ∑Ê±ÇÁöÑÈîôËØØ
- ‰∏çË¶ÅÁ°¨ÁºñÁ†Å API Âú∞ÂùÄÔºå‰ΩøÁî®‰ª£ÁêÜÈÖçÁΩÆ

## üîß ÊúÄ‰Ω≥ÂÆûË∑µ

1. **‰ΩøÁî® ProComponents** - ÂÖÖÂàÜÂà©Áî® Ant Design Pro ÁªÑ‰ª∂
2. **Áªü‰∏ÄÁä∂ÊÄÅÁÆ°ÁêÜ** - ‰ΩøÁî® initialState ÁÆ°ÁêÜÂÖ®Â±ÄÁä∂ÊÄÅ
3. **ËØ∑Ê±ÇÊã¶Êà™Âô®** - Áªü‰∏ÄÂ§ÑÁêÜËÆ§ËØÅÂíåÈîôËØØ
4. **Á±ªÂûãÂÆö‰πâ** - ‰ΩøÁî® TypeScript Á±ªÂûãÂÆö‰πâ
5. **‰ª£Á†ÅËßÑËåÉ** - ÈÅµÂæ™ Biome ÈÖçÁΩÆ
6. **ÊùÉÈôêÊéßÂà∂** - ‰ΩøÁî® access ÊéßÂà∂È°µÈù¢ËÆøÈóÆ
7. **Âä®ÊÄÅËèúÂçï** - ÊîØÊåÅÂêéÁ´ØÂä®ÊÄÅËèúÂçïÈÖçÁΩÆ
8. **Token Âà∑Êñ∞** - ÂÆûÁé∞Ëá™Âä® token Âà∑Êñ∞Êú∫Âà∂

## üìö Áõ∏ÂÖ≥ËµÑÊ∫ê

- [Ant Design Pro ÊñáÊ°£](https://pro.ant.design)
- [UmiJS ÊñáÊ°£](https://umijs.org)
- [ProComponents ÊñáÊ°£](https://procomponents.ant.design)

