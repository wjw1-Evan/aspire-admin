---
globs: Platform.ApiService/Controllers/*.cs
description: API控制器开发规范
---
# API控制器开发规范

## 🎯 核心原则

**所有控制器必须继承 `BaseApiController`，使用统一的响应格式和异常处理**

## ✅ 控制器实现规范

### 基础控制器结构

```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class UserController : BaseApiController
{
    private readonly IUserService _userService;
    private readonly ILogger<UserController> _logger;

    public UserController(IUserService userService, ILogger<UserController> logger)
    {
        _userService = userService;
        _logger = logger;
    }

    /// <summary>
    /// 获取所有用户
    /// </summary>
    /// <returns>用户列表</returns>
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var users = await _userService.GetAllUsersAsync();
        return Success(users);
    }

    /// <summary>
    /// 根据ID获取用户
    /// </summary>
    /// <param name="id">用户ID</param>
    /// <returns>用户信息</returns>
    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(string id)
    {
        var user = await _userService.GetUserByIdAsync(id);
        if (user == null)
            throw new KeyNotFoundException($"用户 {id} 不存在");
        
        return Success(user);
    }

    /// <summary>
    /// 创建用户
    /// </summary>
    /// <param name="request">创建用户请求</param>
    /// <returns>创建的用户信息</returns>
    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateUserRequest request)
    {
        if (string.IsNullOrEmpty(request.Username))
            throw new ArgumentException("用户名不能为空");
        
        var userId = GetRequiredUserId();
        var user = await _userService.CreateUserAsync(request, userId);
        
        return Success(user, "创建成功");
    }

    /// <summary>
    /// 更新用户
    /// </summary>
    /// <param name="id">用户ID</param>
    /// <param name="request">更新用户请求</param>
    /// <returns>更新结果</returns>
    [HttpPut("{id}")]
    public async Task<IActionResult> Update(string id, [FromBody] UpdateUserRequest request)
    {
        request.Id = id; // 确保ID一致
        
        var success = await _userService.UpdateUserAsync(request);
        if (!success)
            throw new KeyNotFoundException($"用户 {id} 不存在");
        
        return Success("更新成功");
    }

    /// <summary>
    /// 删除用户
    /// </summary>
    /// <param name="id">用户ID</param>
    /// <returns>删除结果</returns>
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(string id)
    {
        var success = await _userService.DeleteUserAsync(id);
        if (!success)
            throw new KeyNotFoundException($"用户 {id} 不存在");
        
        return Success("删除成功");
    }
}
```

### 分页查询控制器

```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class UserController : BaseApiController
{
    private readonly IUserService _userService;

    /// <summary>
    /// 分页获取用户列表
    /// </summary>
    /// <param name="request">查询请求</param>
    /// <returns>分页用户列表</returns>
    [HttpPost("list")]
    public async Task<IActionResult> GetList([FromBody] UserListRequest request)
    {
        var (users, total) = await _userService.GetUsersPagedAsync(request);
        
        return Success(new
        {
            Items = users,
            Total = total,
            Page = request.Page,
            PageSize = request.PageSize
        });
    }

    /// <summary>
    /// 搜索用户
    /// </summary>
    /// <param name="keyword">搜索关键词</param>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页大小</param>
    /// <returns>搜索结果</returns>
    [HttpGet("search")]
    public async Task<IActionResult> Search(
        [FromQuery] string keyword,
        [FromQuery] int page = 1,
        [FromQuery] int pageSize = 10)
    {
        var (users, total) = await _userService.SearchUsersAsync(keyword, page, pageSize);
        
        return Success(new
        {
            Items = users,
            Total = total,
            Page = page,
            PageSize = pageSize
        });
    }
}
```

### 批量操作控制器

```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class UserController : BaseApiController
{
    private readonly IUserService _userService;

    /// <summary>
    /// 批量创建用户
    /// </summary>
    /// <param name="request">批量创建请求</param>
    /// <returns>创建结果</returns>
    [HttpPost("batch")]
    public async Task<IActionResult> CreateBatch([FromBody] CreateUserBatchRequest request)
    {
        if (request.Users == null || !request.Users.Any())
            throw new ArgumentException("用户列表不能为空");
        
        var userId = GetRequiredUserId();
        var users = await _userService.CreateUsersBatchAsync(request.Users, userId);
        
        return Success(users, $"成功创建 {users.Count} 个用户");
    }

    /// <summary>
    /// 批量删除用户
    /// </summary>
    /// <param name="request">批量删除请求</param>
    /// <returns>删除结果</returns>
    [HttpDelete("batch")]
    public async Task<IActionResult> DeleteBatch([FromBody] DeleteUserBatchRequest request)
    {
        if (request.UserIds == null || !request.UserIds.Any())
            throw new ArgumentException("用户ID列表不能为空");
        
        var count = await _userService.DeleteUsersBatchAsync(request.UserIds);
        
        return Success($"成功删除 {count} 个用户");
    }

    /// <summary>
    /// 批量更新用户状态
    /// </summary>
    /// <param name="request">批量更新请求</param>
    /// <returns>更新结果</returns>
    [HttpPut("batch/status")]
    public async Task<IActionResult> UpdateStatusBatch([FromBody] UpdateUserStatusBatchRequest request)
    {
        if (request.UserIds == null || !request.UserIds.Any())
            throw new ArgumentException("用户ID列表不能为空");
        
        var count = await _userService.UpdateUsersStatusBatchAsync(request.UserIds, request.IsActive);
        
        return Success($"成功更新 {count} 个用户状态");
    }
}
```

## 🔧 BaseApiController 功能

### 用户信息获取

```csharp
// 获取当前用户信息（可为空）
var userId = CurrentUserId;
var username = CurrentUsername;
var userRole = CurrentUserRole;
var companyId = CurrentCompanyId;

// 获取必需的用户信息（为空则抛异常）
var userId = GetRequiredUserId();
var companyId = GetRequiredCompanyId();
```

### 统一响应方法

```csharp
// 成功响应
return Success(data);                    // 返回数据
return Success(data, "操作成功");        // 返回数据和消息
return Success("操作成功");              // 只返回消息
return SuccessResponse(data);           // ApiResponse 格式

// 错误响应（建议直接抛异常）
throw new ArgumentException("参数错误");
throw new KeyNotFoundException("资源不存在");
throw new UnauthorizedAccessException("未授权");
throw new InvalidOperationException("操作失败");
```

### 权限检查

```csharp
// 检查是否为管理员
if (!IsAdmin)
    throw new UnauthorizedAccessException("需要管理员权限");

// 检查是否已认证
if (!IsAuthenticated)
    throw new UnauthorizedAccessException("请先登录");
```

## 🎯 请求/响应模型

### 请求模型

```csharp
public class UserListRequest
{
    public int Page { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    public string? Keyword { get; set; }
    public string? Role { get; set; }
    public bool? IsActive { get; set; }
    public DateTime? CreatedFrom { get; set; }
    public DateTime? CreatedTo { get; set; }
}

public class CreateUserBatchRequest
{
    public List<CreateUserRequest> Users { get; set; } = new();
}

public class DeleteUserBatchRequest
{
    public List<string> UserIds { get; set; } = new();
}
```

### 响应模型

```csharp
public class UserListResponse
{
    public List<UserResponse> Items { get; set; } = new();
    public long Total { get; set; }
    public int Page { get; set; }
    public int PageSize { get; set; }
}

public class BatchOperationResponse
{
    public int SuccessCount { get; set; }
    public int FailureCount { get; set; }
    public List<string> Errors { get; set; } = new();
}
```

## 🚫 禁止的做法

### 不要直接继承 ControllerBase

```csharp
// ❌ 禁止
[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase  // ❌ 禁止直接继承 ControllerBase
{
    // ...
}
```

### 不要手动构建响应格式

```csharp
// ❌ 不要这样做
return Ok(new { success = true, data = result });
return BadRequest(new { success = false, error = "错误信息" });

// ✅ 应该这样做
return Success(result);
throw new ArgumentException("错误信息");
```

### 不要手动提取用户信息

```csharp
// ❌ 不要这样做
var userId = User.FindFirst("userId")?.Value;
if (string.IsNullOrEmpty(userId))
    return Unauthorized(new { success = false, error = "未找到用户信息" });

// ✅ 应该这样做
var userId = GetRequiredUserId();
```

### 不要使用 try-catch

```csharp
// ❌ 不要这样做
try
{
    var result = await _service.DoSomething();
    return Ok(new { success = true, data = result });
}
catch (Exception ex)
{
    return StatusCode(500, new { success = false, error = ex.Message });
}

// ✅ 应该这样做（GlobalExceptionMiddleware 会自动处理）
var result = await _service.DoSomething();
return Success(result);
```

## 📋 控制器开发检查清单

创建或修改控制器时检查：

- [ ] 继承 BaseApiController
- [ ] 添加适当的 HTTP 方法特性
- [ ] 添加 XML 文档注释
- [ ] 使用统一的响应格式
- [ ] 添加参数验证
- [ ] 使用 GetRequiredUserId() 获取用户信息
- [ ] 添加适当的授权特性
- [ ] 遵循 RESTful 设计原则
- [ ] 添加单元测试
- [ ] 更新 API 文档

## 📚 相关文档

- [BaseApiController 实现](mdc:Platform.ApiService/Controllers/BaseApiController.cs)
- [全局异常处理中间件](mdc:Platform.ApiService/Middleware/GlobalExceptionMiddleware.cs)
- [服务层开发规范](mdc:.cursor/rules/service-layer.mdc)
