---
description: Backend服务层开发规范 - 使用 BaseService 和 BaseRepository
globs: Platform.ApiService/Services/*.cs
---

# Backend 服务层开发规范

## 🎯 核心原则

所有服务类必须继承 `BaseService` 并使用 `BaseRepository<T>` 进行数据访问。

## ✅ 正确的服务实现

```csharp
public class MyService : BaseService, IMyService
{
    private readonly BaseRepository<MyEntity> _repository;
    
    // 如需直接访问集合进行复杂查询
    private IMongoCollection<MyEntity> _entities => _repository.Collection;
    
    public MyService(
        IMongoDatabase database,
        IHttpContextAccessor httpContextAccessor,
        ILogger<MyService> logger)
        : base(database, httpContextAccessor, logger)
    {
        _repository = new BaseRepository<MyEntity>(database, "my_entities", httpContextAccessor);
    }
    
    // 使用仓储方法而不是手动实现
    public async Task<MyEntity?> GetByIdAsync(string id)
    {
        return await _repository.GetByIdAsync(id);
    }
    
    public async Task<MyEntity> CreateAsync(CreateRequest request)
    {
        var entity = new MyEntity
        {
            Name = request.Name
            // ✅ CreatedAt, UpdatedAt, IsDeleted 会自动设置
        };
        
        return await _repository.CreateAsync(entity);
    }
    
    public async Task<bool> DeleteAsync(string id, string? reason = null)
    {
        return await _repository.SoftDeleteAsync(id, reason);
    }
}
```

## ❌ 禁止的做法

```csharp
// ❌ 不要直接实现 IService 而不继承 BaseService
public class MyService : IMyService
{
    private readonly IMongoCollection<MyEntity> _entities;
    
    // ❌ 不要重复实现 GetCurrentUserId
    private string? GetCurrentUserId()
    {
        return _httpContextAccessor.HttpContext?.User?.FindFirst("userId")?.Value;
    }
}

// ❌ 不要手动设置时间戳
var entity = new MyEntity
{
    Name = "Test",
    CreatedAt = DateTime.UtcNow,  // ❌ BaseRepository 会自动设置
    UpdatedAt = DateTime.UtcNow,  // ❌ BaseRepository 会自动设置
    IsDeleted = false             // ❌ BaseRepository 会自动设置
};

// ❌ 不要手动构建简单的 CRUD 查询
var filter = Builders<MyEntity>.Filter.And(
    Builders<MyEntity>.Filter.Eq(e => e.Id, id),
    Builders<MyEntity>.Filter.Eq(e => e.IsDeleted, false)
);
var entity = await _entities.Find(filter).FirstOrDefaultAsync();

// ✅ 应该使用
var entity = await _repository.GetByIdAsync(id);
```

## 🔧 BaseService 提供的功能

```csharp
// 获取当前用户信息
var userId = GetCurrentUserId();
var username = GetCurrentUsername();

// 获取 MongoDB 集合
var collection = GetCollection<MyEntity>("my_entities");

// 日志记录（继承的 Logger 属性）
LogError(ex, "发生错误: {Message}", ex.Message);
LogInformation("操作成功: {UserId}", userId);
LogWarning("警告: {Message}", message);
```

## 🔧 BaseRepository 提供的方法

```csharp
// 基础查询（自动排除已删除）
await _repository.GetByIdAsync(id);
await _repository.GetAllAsync();
await _repository.GetAllAsync(sort);

// 创建（自动设置 CreatedAt, UpdatedAt, IsDeleted）
await _repository.CreateAsync(entity);

// 更新（自动更新 UpdatedAt）
await _repository.UpdateAsync(id, update);

// 软删除（自动设置软删除字段）
await _repository.SoftDeleteAsync(id, reason);

// 检查存在
await _repository.ExistsAsync(id);
await _repository.ExistsAsync(filter);

// 查找
await _repository.FindOneAsync(filter);
await _repository.FindAsync(filter);

// 统计
await _repository.CountAsync(filter);

// 分页
await _repository.GetPagedAsync(filter, page, pageSize, sort);

// 批量操作
await _repository.UpdateManyAsync(filter, update);
await _repository.SoftDeleteManyAsync(filter, reason);
```

## 📋 实体要求

实体必须实现三个接口：

```csharp
public class MyEntity : IEntity, ISoftDeletable, ITimestamped
{
    public string? Id { get; set; }
    
    // ISoftDeletable
    public bool IsDeleted { get; set; }
    public DateTime? DeletedAt { get; set; }
    public string? DeletedBy { get; set; }
    public string? DeletedReason { get; set; }
    
    // ITimestamped
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    
    // 业务属性...
}
```

## 📚 参考实现

查看以下文件作为标准示例：
- [UserService.cs](mdc:Platform.ApiService/Services/UserService.cs)
- [RoleService.cs](mdc:Platform.ApiService/Services/RoleService.cs)
- [MenuService.cs](mdc:Platform.ApiService/Services/MenuService.cs)
- [NoticeService.cs](mdc:Platform.ApiService/Services/NoticeService.cs)
- [BaseService.cs](mdc:Platform.ApiService/Services/BaseService.cs)
- [BaseRepository.cs](mdc:Platform.ApiService/Services/BaseRepository.cs)
- [基础组件使用指南](mdc:docs/optimization/BASE-COMPONENTS-GUIDE.md)
