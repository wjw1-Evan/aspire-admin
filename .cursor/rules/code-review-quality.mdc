---
description: 代码审查和质量保证规范
---

# 代码审查和质量保证规范

## 🎯 核心原则

**通过系统性的代码审查确保代码质量、安全性和可维护性**

## 📋 代码审查清单

### 1. 架构和设计审查

#### ✅ 架构一致性
- [ ] 遵循项目既定的架构模式
- [ ] 使用统一的数据访问层（IDatabaseOperationFactory）
- [ ] 控制器继承 BaseApiController
- [ ] 服务层正确实现接口
- [ ] 依赖注入配置正确

#### ✅ 设计模式
- [ ] 使用适当的设计模式
- [ ] 避免过度设计
- [ ] 保持代码简洁
- [ ] 遵循 SOLID 原则

### 2. 代码质量审查

#### ✅ 代码规范
- [ ] 遵循 C# 编码规范
- [ ] 遵循 TypeScript/React 编码规范
- [ ] 使用一致的命名约定
- [ ] 适当的注释和文档
- [ ] 代码格式化和缩进正确

#### ✅ 代码复杂度
- [ ] 方法长度适中（< 50 行）
- [ ] 类职责单一
- [ ] 避免深层嵌套（< 4 层）
- [ ] 圈复杂度合理（< 10）

### 3. 安全性审查

#### ✅ 输入验证
- [ ] 所有用户输入都经过验证
- [ ] 使用数据注解或 FluentValidation
- [ ] 防止 SQL 注入和 XSS 攻击
- [ ] 文件上传安全检查

#### ✅ 权限控制
- [ ] 适当的身份验证
- [ ] 基于角色的访问控制
- [ ] 敏感操作权限检查
- [ ] 多租户数据隔离

#### ✅ 数据保护
- [ ] 敏感数据加密
- [ ] 密码安全存储
- [ ] 日志不包含敏感信息
- [ ] 数据传输安全

### 4. 性能审查

#### ✅ 数据库操作
- [ ] 使用适当的索引
- [ ] 避免 N+1 查询问题
- [ ] 分页查询实现
- [ ] 查询性能优化

#### ✅ 前端性能
- [ ] 组件渲染优化
- [ ] 图片和资源优化
- [ ] 懒加载实现
- [ ] 缓存策略

#### ✅ 异步操作
- [ ] 正确使用 async/await
- [ ] 避免阻塞操作
- [ ] 超时处理
- [ ] 并发控制

### 5. 错误处理审查

#### ✅ 异常处理
- [ ] 使用标准异常类型
- [ ] 异常消息用户友好
- [ ] 日志记录完整
- [ ] 错误恢复机制

#### ✅ 边界条件
- [ ] 空值检查
- [ ] 边界值处理
- [ ] 资源清理
- [ ] 内存泄漏防护

### 6. 测试审查

#### ✅ 单元测试
- [ ] 测试覆盖率 > 80%
- [ ] 测试用例完整
- [ ] 测试数据隔离
- [ ] 测试命名清晰

#### ✅ 集成测试
- [ ] API 接口测试
- [ ] 数据库集成测试
- [ ] 第三方服务测试
- [ ] 端到端测试

## 🔍 审查流程

### 1. 提交前自检

```bash
# ✅ 运行代码检查
dotnet build
npm run lint
npm run test

# ✅ 检查代码格式
dotnet format
npm run format

# ✅ 运行安全扫描
dotnet list package --vulnerable
npm audit
```

### 2. 同行审查

#### 审查者职责
- [ ] 仔细阅读代码变更
- [ ] 检查业务逻辑正确性
- [ ] 验证安全性和性能
- [ ] 提供建设性反馈
- [ ] 确保代码质量

#### 审查重点
- [ ] 新功能实现
- [ ] Bug 修复
- [ ] 重构代码
- [ ] 性能优化
- [ ] 安全更新

### 3. 审查反馈

#### ✅ 反馈格式
```markdown
## 审查反馈

### 🎯 总体评价
- 代码质量：优秀/良好/需要改进
- 安全性：通过/需要修复
- 性能：满足要求/需要优化

### 🔧 具体建议
1. **高优先级问题**
   - 问题描述
   - 建议解决方案
   - 相关代码位置

2. **中优先级问题**
   - 问题描述
   - 建议解决方案

3. **低优先级问题**
   - 代码风格建议
   - 性能优化建议

### ✅ 优点
- 代码实现清晰
- 错误处理完善
- 测试覆盖充分
```

## 🚫 常见问题

### 1. 架构问题

```csharp
// ❌ 问题：直接使用 IMongoCollection
private readonly IMongoCollection<User> _users;

// ✅ 解决：使用 IDatabaseOperationFactory
private readonly IDatabaseOperationFactory<User> _userFactory;
```

### 2. 安全问题

```csharp
// ❌ 问题：SQL 注入风险
var query = $"SELECT * FROM Users WHERE Name = '{userName}'";

// ✅ 解决：使用参数化查询
var filter = _userFactory.CreateFilterBuilder()
    .Equal(u => u.Name, userName)
    .Build();
```

### 3. 性能问题

```csharp
// ❌ 问题：N+1 查询
foreach (var user in users)
{
    var roles = await _roleFactory.FindAsync(roleFilter); // 每次循环都查询
}

// ✅ 解决：批量查询
var userIds = users.Select(u => u.Id).ToList();
var roles = await _roleFactory.FindAsync(roleFilter);
```

### 4. 错误处理问题

```csharp
// ❌ 问题：忽略异常
try
{
    await _service.DoSomething();
}
catch (Exception ex)
{
    // 忽略异常
}

// ✅ 解决：正确处理异常
try
{
    await _service.DoSomething();
}
catch (Exception ex)
{
    _logger.LogError(ex, "操作失败");
    throw new InvalidOperationException("操作失败", ex);
}
```

## 📊 质量指标

### 1. 代码质量指标

- **测试覆盖率**: > 80%
- **代码重复率**: < 5%
- **圈复杂度**: < 10
- **技术债务**: 低
- **代码审查通过率**: > 95%

### 2. 性能指标

- **API 响应时间**: < 200ms
- **数据库查询时间**: < 100ms
- **前端页面加载时间**: < 3s
- **内存使用**: 稳定
- **CPU 使用率**: < 70%

### 3. 安全指标

- **漏洞数量**: 0
- **安全扫描通过率**: 100%
- **权限检查覆盖率**: 100%
- **输入验证覆盖率**: 100%

## 🔧 工具和自动化

### 1. 代码质量工具

```json
// .editorconfig
root = true

[*.cs]
indent_style = space
indent_size = 4
end_of_line = crlf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.{ts,tsx,js,jsx}]
indent_style = space
indent_size = 2
end_of_line = lf
```

### 2. 自动化检查

```yaml
# .github/workflows/code-quality.yml
name: Code Quality

on: [push, pull_request]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Build
        run: dotnet build
      
      - name: Test
        run: dotnet test
      
      - name: Code Coverage
        run: dotnet test --collect:"XPlat Code Coverage"
```

### 3. 安全扫描

```bash
# ✅ 依赖漏洞扫描
dotnet list package --vulnerable
npm audit

# ✅ 代码安全扫描
dotnet security-scan
npm audit fix
```

## 📚 相关文档

- [C# 后端开发规范](mdc:.cursor/rules/csharp-backend.mdc)
- [前端开发规范](mdc:.cursor/rules/frontend-development.mdc)
- [后端数据访问层规范](mdc:.cursor/rules/backend-data-access.mdc)
- [API控制器开发规范](mdc:.cursor/rules/api-controllers.mdc)

## 🎯 记住

1. **质量第一** - 代码质量是项目成功的基础
2. **安全至上** - 安全性不能妥协
3. **持续改进** - 通过审查不断改进代码质量
4. **团队协作** - 审查是团队学习和成长的机会
5. **自动化优先** - 使用工具提高审查效率
6. **文档完善** - 保持文档与代码同步

通过系统性的代码审查，确保项目的高质量、高安全性和高可维护性！