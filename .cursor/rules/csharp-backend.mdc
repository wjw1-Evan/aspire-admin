---
globs: *.cs
description: C# 后端开发规范和最佳实践
---

# C# 后端开发规范

## 🎯 项目结构

### 服务架构
- **Platform.ApiService** - 主要的 API 服务
- **Platform.ServiceDefaults** - 共享服务配置
- **Platform.AppHost** - 应用编排和配置

### 目录结构
```
Platform.ApiService/
├── Controllers/          # API 控制器
├── Models/              # 数据模型
├── Services/            # 业务逻辑服务
├── Scripts/             # 数据库脚本
└── Program.cs           # 应用程序入口
```

## 🏗️ 代码规范

### 命名约定
- **类**: 使用 PascalCase (如 `UserService`)
- **方法**: 使用 PascalCase (如 `GetUserById`)
- **属性**: 使用 PascalCase (如 `UserName`)
- **字段**: 使用 camelCase 或 _camelCase (如 `_userRepository`)
- **常量**: 使用 UPPER_SNAKE_CASE (如 `MAX_RETRY_COUNT`)

### 控制器设计

**⚠️ 重要：所有控制器必须继承 `BaseApiController`**

```csharp
// ✅ 推荐：继承 BaseApiController
[ApiController]
[Route("api/[controller]")]
public class UsersController : BaseApiController  // ✅ 必须继承 BaseApiController
{
    private readonly IUserService _userService;
    
    public UsersController(IUserService userService)
    {
        _userService = userService;
    }
    
    [HttpGet]
    public async Task<IActionResult> GetUsers()
    {
        var users = await _userService.GetAllUsersAsync();
        return Success(users);  // ✅ 使用基类方法
    }
    
    [HttpGet("{id}")]
    public async Task<IActionResult> GetUser(string id)
    {
        var user = await _userService.GetUserByIdAsync(id);
        if (user == null)
            throw new KeyNotFoundException($"用户 {id} 不存在");  // ✅ 抛出异常
        
        return Success(user);
    }
    
    [HttpPost]
    public async Task<IActionResult> CreateUser([FromBody] CreateUserRequest request)
    {
        if (string.IsNullOrEmpty(request.Name))
            throw new ArgumentException("用户名不能为空");  // ✅ 参数验证
        
        var userId = GetRequiredUserId();  // ✅ 使用基类方法获取用户ID
        var user = await _userService.CreateUserAsync(request, userId);
        
        return Success(user, "创建成功");
    }
}

// ❌ 禁止：直接继承 ControllerBase
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase  // ❌ 禁止
{
    // ...
}
```

### 服务层设计
```csharp
// ✅ 推荐：服务接口和实现
public interface IUserService
{
    Task<IEnumerable<User>> GetAllUsersAsync();
    Task<User?> GetUserByIdAsync(string id);
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(string id, UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
}

public class UserService : IUserService
{
    private readonly IUserRepository _userRepository;
    private readonly ILogger<UserService> _logger;
    
    public UserService(IUserRepository userRepository, ILogger<UserService> logger)
    {
        _userRepository = userRepository;
        _logger = logger;
    }
    
    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        try
        {
            return await _userRepository.GetAllAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving users");
            throw;
        }
    }
}
```

## 🗄️ 数据访问

### MongoDB 集成
```csharp
// ✅ 推荐：MongoDB 数据模型
public class User
{
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set; } = string.Empty;
    
    [BsonElement("username")]
    public string Username { get; set; } = string.Empty;
    
    [BsonElement("email")]
    public string Email { get; set; } = string.Empty;
    
    [BsonElement("role")]
    public string Role { get; set; } = "user";
    
    [BsonElement("createdAt")]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}
```

### 仓储模式
```csharp
// ✅ 推荐：仓储接口和实现
public interface IUserRepository
{
    Task<IEnumerable<User>> GetAllAsync();
    Task<User?> GetByIdAsync(string id);
    Task<User> CreateAsync(User user);
    Task<bool> UpdateAsync(string id, User user);
    Task<bool> DeleteAsync(string id);
}

public class UserRepository : IUserRepository
{
    private readonly IMongoCollection<User> _users;
    
    public UserRepository(IMongoDatabase database)
    {
        _users = database.GetCollection<User>("users");
    }
    
    public async Task<IEnumerable<User>> GetAllAsync()
    {
        return await _users.Find(_ => true).ToListAsync();
    }
}
```

## 🔐 认证和授权

### JWT 服务实现

```csharp
// ✅ 推荐：JWT 服务接口和实现
public interface IJwtService
{
    string GenerateToken(AppUser user);
    string GenerateRefreshToken(AppUser user);
    ClaimsPrincipal? ValidateToken(string token);
    ClaimsPrincipal? ValidateRefreshToken(string refreshToken);
    string? GetUserIdFromToken(string token);
    string? GetUserIdFromRefreshToken(string refreshToken);
}

public class JwtService : IJwtService
{
    private readonly string _secretKey;
    private readonly string _issuer;
    private readonly string _audience;
    private readonly int _expirationMinutes;
    private readonly int _refreshTokenExpirationDays;

    public JwtService(IConfiguration configuration)
    {
        _secretKey = configuration["Jwt:SecretKey"] 
            ?? throw new ArgumentNullException("Jwt:SecretKey");
        _issuer = configuration["Jwt:Issuer"] ?? "Platform.ApiService";
        _audience = configuration["Jwt:Audience"] ?? "Platform.Web";
        _expirationMinutes = int.Parse(configuration["Jwt:ExpirationMinutes"] ?? "60");
        _refreshTokenExpirationDays = int.Parse(configuration["Jwt:RefreshTokenExpirationDays"] ?? "7");
    }

    public string GenerateToken(AppUser user)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);

        var claims = new List<Claim>
        {
            new(ClaimTypes.NameIdentifier, user.Id ?? string.Empty),
            new(ClaimTypes.Name, user.Username),
            new(ClaimTypes.Email, user.Email ?? string.Empty),
            new(ClaimTypes.Role, user.Role),
            new("userId", user.Id ?? string.Empty),
            new("username", user.Username),
            new("role", user.Role)
        };

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(claims),
            Expires = DateTime.UtcNow.AddMinutes(_expirationMinutes),
            Issuer = _issuer,
            Audience = _audience,
            SigningCredentials = new SigningCredentials(
                new SymmetricSecurityKey(key), 
                SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }

    public string GenerateRefreshToken(AppUser user)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);

        var claims = new List<Claim>
        {
            new("type", "refresh"),
            new("userId", user.Id ?? string.Empty),
            new("username", user.Username),
            new("role", user.Role),
            new("iat", DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString(), 
                ClaimValueTypes.Integer64)
        };

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(claims),
            Expires = DateTime.UtcNow.AddDays(_refreshTokenExpirationDays),
            Issuer = _issuer,
            Audience = _audience,
            SigningCredentials = new SigningCredentials(
                new SymmetricSecurityKey(key), 
                SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }

    public ClaimsPrincipal? ValidateToken(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);

            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _issuer,
                ValidateAudience = true,
                ValidAudience = _audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };

            var principal = tokenHandler.ValidateToken(token, validationParameters, out _);
            return principal;
        }
        catch
        {
            return null;
        }
    }

    public ClaimsPrincipal? ValidateRefreshToken(string refreshToken)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_secretKey);

            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = _issuer,
                ValidateAudience = true,
                ValidAudience = _audience,
                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero
            };

            var principal = tokenHandler.ValidateToken(refreshToken, validationParameters, out _);
            
            // 验证是否为刷新token
            var tokenType = principal.FindFirst("type")?.Value;
            if (tokenType != "refresh")
            {
                return null;
            }

            return principal;
        }
        catch
        {
            return null;
        }
    }

    public string? GetUserIdFromToken(string token)
    {
        var principal = ValidateToken(token);
        return principal?.FindFirst("userId")?.Value;
    }

    public string? GetUserIdFromRefreshToken(string refreshToken)
    {
        var principal = ValidateRefreshToken(refreshToken);
        return principal?.FindFirst("userId")?.Value;
    }
}
```

### 认证控制器

```csharp
// ✅ 推荐：认证控制器实现
[ApiController]
[Route("api")]
public class AuthController : ControllerBase
{
    private readonly AuthService _authService;

    public AuthController(AuthService authService)
    {
        _authService = authService;
    }

    /// <summary>
    /// 获取当前用户信息
    /// </summary>
    [HttpGet("currentUser")]
    [Authorize]
    public async Task<IActionResult> GetCurrentUser()
    {
        try
        {
            // 检查用户是否已认证
            if (!User.Identity?.IsAuthenticated ?? true)
            {
                return Ok(ApiResponse<CurrentUser>.UnauthorizedResult("用户未认证"));
            }

            var user = await _authService.GetCurrentUserAsync();
            if (user == null || !user.IsLogin)
            {
                return Ok(ApiResponse<CurrentUser>.UnauthorizedResult("请先登录！"));
            }
            
            return Ok(ApiResponse<CurrentUser>.SuccessResult(user));
        }
        catch (Exception ex)
        {
            return Ok(ApiResponse<CurrentUser>.ServerErrorResult(
                $"获取用户信息失败: {ex.Message}"));
        }
    }

    /// <summary>
    /// 用户登录
    /// </summary>
    [HttpPost("login/account")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var result = await _authService.LoginAsync(request);
        return Ok(result);
    }

    /// <summary>
    /// 刷新访问token
    /// </summary>
    [HttpPost("refresh-token")]
    public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)
    {
        var result = await _authService.RefreshTokenAsync(request);
        return Ok(result);
    }

    /// <summary>
    /// 用户登出
    /// </summary>
    [HttpPost("login/outLogin")]
    [Authorize]
    public async Task<IActionResult> Logout()
    {
        await _authService.LogoutAsync();
        return Ok(ApiResponse.SuccessResult("登出成功"));
    }

    /// <summary>
    /// 用户注册
    /// </summary>
    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] RegisterRequest request)
    {
        var result = await _authService.RegisterAsync(request);
        return Ok(result);
    }

    /// <summary>
    /// 修改密码
    /// </summary>
    [HttpPost("change-password")]
    [Authorize]
    public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordRequest request)
    {
        var result = await _authService.ChangePasswordAsync(request);
        return Ok(result);
    }
}
```

### JWT 配置

```csharp
// ✅ 推荐：Program.cs 中的 JWT 配置
var jwtSecretKey = builder.Configuration["Jwt:SecretKey"] 
    ?? throw new InvalidOperationException("JWT Secret Key not configured");
var jwtIssuer = builder.Configuration["Jwt:Issuer"] ?? "Platform.ApiService";
var jwtAudience = builder.Configuration["Jwt:Audience"] ?? "Platform.Web";

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.ASCII.GetBytes(jwtSecretKey)),
            ValidateIssuer = true,
            ValidIssuer = jwtIssuer,
            ValidateAudience = true,
            ValidAudience = jwtAudience,
            ValidateLifetime = true,
            ClockSkew = TimeSpan.Zero,
            RequireExpirationTime = true,
            RequireSignedTokens = true
        };
    });

builder.Services.AddAuthorization();
```

## 📊 统一响应模型

### API 响应封装

```csharp
// ✅ 推荐：统一响应模型
public class ApiResponse
{
    public bool Success { get; set; }
    public string? ErrorMessage { get; set; }
    public string? ErrorCode { get; set; }
    public int? ShowType { get; set; }

    public static ApiResponse SuccessResult(string message = "操作成功")
    {
        return new ApiResponse
        {
            Success = true,
            ErrorMessage = message,
            ShowType = 1
        };
    }

    public static ApiResponse ErrorResult(string message, string? errorCode = null)
    {
        return new ApiResponse
        {
            Success = false,
            ErrorMessage = message,
            ErrorCode = errorCode,
            ShowType = 2
        };
    }
}

public class ApiResponse<T> : ApiResponse
{
    public T? Data { get; set; }

    public static ApiResponse<T> SuccessResult(T data, string message = "操作成功")
    {
        return new ApiResponse<T>
        {
            Success = true,
            Data = data,
            ErrorMessage = message,
            ShowType = 1
        };
    }

    public static ApiResponse<T> UnauthorizedResult(string message = "未授权")
    {
        return new ApiResponse<T>
        {
            Success = false,
            ErrorMessage = message,
            ErrorCode = "UNAUTHORIZED",
            ShowType = 2
        };
    }

    public static ApiResponse<T> ServerErrorResult(string message = "服务器错误")
    {
        return new ApiResponse<T>
        {
            Success = false,
            ErrorMessage = message,
            ErrorCode = "SERVER_ERROR",
            ShowType = 2
        };
    }
}
```

## 🗄️ MongoDB 高级用法

### 复杂查询

```csharp
// ✅ 推荐：MongoDB 查询示例
public class UserService
{
    private readonly IMongoCollection<AppUser> _users;

    public UserService(IMongoDatabase database)
    {
        _users = database.GetCollection<AppUser>("users");
    }

    // 分页查询
    public async Task<(List<AppUser> users, long total)> GetUsersPaginatedAsync(
        int page, 
        int pageSize, 
        string? keyword = null)
    {
        var filterBuilder = Builders<AppUser>.Filter;
        var filter = filterBuilder.Empty;

        // 关键词搜索
        if (!string.IsNullOrEmpty(keyword))
        {
            var keywordFilter = filterBuilder.Or(
                filterBuilder.Regex(u => u.Username, new BsonRegularExpression(keyword, "i")),
                filterBuilder.Regex(u => u.Email, new BsonRegularExpression(keyword, "i"))
            );
            filter &= keywordFilter;
        }

        // 只查询活跃用户
        filter &= filterBuilder.Eq(u => u.IsActive, true);

        var total = await _users.CountDocumentsAsync(filter);
        var users = await _users.Find(filter)
            .Sort(Builders<AppUser>.Sort.Descending(u => u.CreatedAt))
            .Skip((page - 1) * pageSize)
            .Limit(pageSize)
            .ToListAsync();

        return (users, total);
    }

    // 批量更新
    public async Task<long> BulkUpdateUsersAsync(List<string> userIds, UpdateDefinition<AppUser> update)
    {
        var filter = Builders<AppUser>.Filter.In(u => u.Id, userIds);
        var result = await _users.UpdateManyAsync(filter, update);
        return result.ModifiedCount;
    }

    // 聚合查询
    public async Task<Dictionary<string, int>> GetUserStatsByRoleAsync()
    {
        var pipeline = new[]
        {
            new BsonDocument("$group", new BsonDocument
            {
                { "_id", "$access" },
                { "count", new BsonDocument("$sum", 1) }
            })
        };

        var results = await _users.Aggregate<BsonDocument>(pipeline).ToListAsync();
        return results.ToDictionary(
            r => r["_id"].AsString,
            r => r["count"].AsInt32
        );
    }
}
```

### 索引管理

```csharp
// ✅ 推荐：创建索引
public static async Task CreateIndexesAsync(IMongoDatabase database)
{
    var users = database.GetCollection<AppUser>("users");

    // 创建唯一索引
    var usernameIndex = Builders<AppUser>.IndexKeys.Ascending(u => u.Username);
    await users.Indexes.CreateOneAsync(new CreateIndexModel<AppUser>(
        usernameIndex,
        new CreateIndexOptions { Unique = true }
    ));

    // 创建复合索引
    var emailAccessIndex = Builders<AppUser>.IndexKeys
        .Ascending(u => u.Email)
        .Ascending(u => u.Access);
    await users.Indexes.CreateOneAsync(new CreateIndexModel<AppUser>(emailAccessIndex));

    // 创建文本索引（用于全文搜索）
    var textIndex = Builders<AppUser>.IndexKeys.Text(u => u.Username).Text(u => u.Email);
    await users.Indexes.CreateOneAsync(new CreateIndexModel<AppUser>(textIndex));
}
```

## 🎯 BaseApiController 统一标准

### 核心规范
**所有控制器必须继承 `BaseApiController`，禁止直接继承 `ControllerBase`**

### BaseApiController 提供的能力

#### 用户信息属性
```csharp
protected string? CurrentUserId          // 当前用户ID
protected string? CurrentUsername        // 当前用户名
protected string? CurrentUserRole        // 当前用户角色
protected bool IsAdmin                   // 是否管理员
protected bool IsAuthenticated           // 是否已认证
```

#### 安全获取用户信息
```csharp
// 获取必需的用户ID（为空则自动抛出 UnauthorizedAccessException）
var userId = GetRequiredUserId();
```

#### 统一响应方法
```csharp
// 成功响应
return Success(data);
return Success(data, "操作成功");
return Success("操作成功");
return SuccessResponse(data);

// 错误响应（不推荐，建议直接抛异常）
return Error("错误消息");
return NotFoundError("资源不存在");
return UnauthorizedError("未授权访问");
```

### 最佳实践

#### ✅ 正确的异常处理
```csharp
// ✅ 推荐：直接抛出异常，由 GlobalExceptionMiddleware 处理
[HttpGet("{id}")]
public async Task<IActionResult> GetUser(string id)
{
    var user = await _userService.GetUserByIdAsync(id);
    if (user == null)
        throw new KeyNotFoundException($"用户 {id} 不存在");
    
    return Success(user);
}

// ❌ 不推荐：手动 try-catch
[HttpGet("{id}")]
public async Task<IActionResult> GetUser(string id)
{
    try
    {
        var user = await _userService.GetUserByIdAsync(id);
        return Ok(new { success = true, data = user });
    }
    catch (Exception ex)
    {
        return StatusCode(500, new { success = false, error = ex.Message });
    }
}
```

#### ✅ 使用基类方法
```csharp
// ✅ 推荐：使用基类方法
var userId = GetRequiredUserId();
return Success(data);

// ❌ 不推荐：手动提取和构建响应
var userId = User.FindFirst("userId")?.Value;
if (string.IsNullOrEmpty(userId))
    return Unauthorized(new { success = false, error = "未找到用户信息" });
return Ok(new { success = true, data = data });
```

## 🔧 中间件架构

项目使用以下中间件处理通用功能：

### GlobalExceptionMiddleware
- 自动捕获所有未处理的异常
- 转换为统一的错误响应格式
- 自动添加 traceId 用于追踪
- 根据异常类型返回合适的 HTTP 状态码

### ActivityLogMiddleware
- 自动记录所有 API 请求
- 记录用户信息、请求路径、状态码、耗时等
- 智能生成操作类型和中文描述
- 异步记录，不阻塞响应

### ResponseFormattingMiddleware
- 自动包装所有成功响应
- 确保响应格式统一
- 自动添加 timestamp

### 中间件顺序
```csharp
app.UseMiddleware<GlobalExceptionMiddleware>();       // 1. 异常处理（最外层）
app.UseAuthentication();                              // 2. 认证
app.UseAuthorization();                               // 3. 授权
app.UseMiddleware<ActivityLogMiddleware>();           // 4. 日志记录
app.UseCors();                                        // 5. 跨域
app.UseMiddleware<ResponseFormattingMiddleware>();    // 6. 响应格式化
app.MapControllers();                                 // 7. 控制器
```

## 🚫 避免的做法

### 控制器相关
- ❌ 不要直接继承 `ControllerBase`（必须继承 `BaseApiController`）
- ❌ 不要手动提取用户信息（使用 `GetRequiredUserId()`）
- ❌ 不要手动构建响应格式（使用 `Success()` 方法）
- ❌ 不要使用 try-catch 包裹业务逻辑（由中间件处理）
- ❌ 不要手动记录日志（由 ActivityLogMiddleware 处理）
- ❌ 不要在控制器中编写业务逻辑

### 通用规范
- ❌ 不要使用 `async void`（除了事件处理程序）
- ❌ 不要忽略异常（使用适当的异常处理）
- ❌ 不要使用 `string` 代替强类型
- ❌ 不要忘记配置依赖注入
- ❌ 不要在生产环境中暴露敏感信息
- ❌ 不要忘记验证输入参数
- ❌ 不要硬编码配置值
- ❌ 不要忘记添加 XML 文档注释

## 🔧 配置管理

### 应用配置

```csharp
// ✅ 推荐：使用 IConfiguration 和 Options 模式
public class JwtSettings
{
    public string SecretKey { get; set; } = string.Empty;
    public string RefreshTokenSecret { get; set; } = string.Empty;
    public string Issuer { get; set; } = string.Empty;
    public string Audience { get; set; } = string.Empty;
    public int ExpirationMinutes { get; set; } = 60;
    public int RefreshTokenExpirationDays { get; set; } = 7;
}

// 在 Program.cs 中配置
builder.Services.Configure<JwtSettings>(
    builder.Configuration.GetSection("Jwt"));

// 在服务中使用
public class AuthService
{
    private readonly JwtSettings _jwtSettings;

    public AuthService(IOptions<JwtSettings> jwtSettings)
    {
        _jwtSettings = jwtSettings.Value;
    }
}
```

### 环境配置

```csharp
// ✅ 推荐：环境特定配置
if (builder.Environment.IsDevelopment())
{
    app.MapOpenApi();
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/error");
    app.UseHsts();
}

// 配置 CORS
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        if (builder.Environment.IsDevelopment())
        {
            policy.AllowAnyOrigin()
                  .AllowAnyMethod()
                  .AllowAnyHeader();
        }
        else
        {
            policy.WithOrigins(builder.Configuration["AllowedOrigins"]!)
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        }
    });
});
```

## 🔧 依赖注入

### 服务注册

```csharp
// ✅ 推荐：Program.cs 中的服务注册
// MongoDB
builder.AddMongoDBClient(connectionName: "mongodb");

// 业务服务
builder.Services.AddSingleton<IJwtService, JwtService>();
builder.Services.AddSingleton<UserService>();
builder.Services.AddSingleton<AuthService>();
builder.Services.AddSingleton<RoleService>();
builder.Services.AddSingleton<MenuService>();

// HTTP 上下文访问器
builder.Services.AddHttpContextAccessor();

// 健康检查
builder.Services.AddHealthChecks()
    .AddMongoDb(
        builder.Configuration.GetConnectionString("mongodb")!,
        name: "mongodb",
        timeout: TimeSpan.FromSeconds(3));
```

## 🎯 最佳实践

### 控制器开发
1. **继承 BaseApiController** - 所有控制器必须继承 BaseApiController
2. **抛出异常** - 不要使用 try-catch，直接抛出异常由中间件处理
3. **使用基类方法** - 使用 `GetRequiredUserId()` 和 `Success()` 等方法
4. **参数验证** - 使用 `ArgumentException` 进行参数验证
5. **统一响应** - 使用基类提供的响应方法

### 通用开发
6. **使用异步编程** - 所有 I/O 操作都应该是异步的
7. **依赖注入** - 使用依赖注入管理服务生命周期
8. **配置管理** - 使用 Options 模式管理配置
9. **日志记录** - 使用 ILogger 记录日志（不要手动记录活动日志）
10. **错误处理** - 依赖 GlobalExceptionMiddleware 统一处理
11. **API 文档** - 使用 XML 注释和 Swagger/OpenAPI
12. **验证** - 使用数据注解或 FluentValidation 验证输入
13. **分离关注点** - 控制器只负责 HTTP 相关逻辑
14. **使用强类型** - 避免使用 `string` 或 `object`
15. **安全性** - 使用 JWT 认证和授权

### 完整示例
```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class ProductController : BaseApiController  // ✅ 继承基类
{
    private readonly IProductService _productService;

    public ProductController(IProductService productService)
    {
        _productService = productService;
    }

    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var products = await _productService.GetAllAsync();
        return Success(products);  // ✅ 使用基类方法
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(string id)
    {
        var product = await _productService.GetByIdAsync(id);
        if (product == null)
            throw new KeyNotFoundException($"产品 {id} 不存在");  // ✅ 抛出异常
        
        return Success(product);
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] CreateProductRequest request)
    {
        if (string.IsNullOrEmpty(request.Name))
            throw new ArgumentException("产品名称不能为空");  // ✅ 参数验证
        
        var userId = GetRequiredUserId();  // ✅ 使用基类方法
        var product = await _productService.CreateAsync(request, userId);
        
        return Success(product, "创建成功");
    }
}
```