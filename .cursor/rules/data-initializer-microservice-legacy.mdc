---
description: 数据初始化微服务架构和单实例运行规范
---
# 数据初始化微服务规范

## 🎯 架构原则

数据初始化工作已迁移到专门的 `Platform.DataInitializer` 微服务：

1. **单实例运行**：数据初始化微服务只运行一个实例
2. **职责分离**：专门的微服务负责数据初始化
3. **幂等性保证**：所有初始化操作都是幂等的
4. **简化架构**：移除分布式锁复杂性

## ✅ 正确的数据初始化方式

### 使用专门的数据初始化微服务

```csharp
// ✅ 在 Platform.DataInitializer 中执行初始化
public class DataInitializerService : IDataInitializerService
{
    public async Task InitializeAsync()
    {
        // 1. 创建数据库索引
        await CreateIndexesAsync();
        
        // 2. 创建全局菜单
        await CreateSystemMenusAsync();
    }
}
```

### 单实例运行保证

```csharp
// ✅ 直接执行初始化，无需分布式锁
await ExecuteInitializationAsync();
// 单实例部署确保不会有并发问题
```

### 幂等性保证

```csharp
// ✅ 所有初始化操作都是幂等的
private async Task CreateSystemMenusAsync()
{
    // 检查是否已经初始化过
    var existingCount = await menus.CountDocumentsAsync(Builders<Menu>.Filter.Empty);
    if (existingCount > 0)
    {
        _logger.LogInformation("全局菜单已存在，跳过创建");
        return;
    }
    
    // 创建菜单...
}
```

## ⚠️ 关键实现细节

### 微服务架构设计

```csharp
// ✅ 数据初始化微服务架构
┌─────────────────────────┐    ┌─────────────────────────┐
│   Platform.ApiService   │    │ Platform.DataInitializer│
│                         │    │                         │
│  • 用户认证            │    │  • 数据库索引创建       │
│  • 业务逻辑            │    │  • 菜单初始化           │
│  • API 接口            │    │  • 单实例运行保证       │
│  • 数据操作            │    │  • 初始化状态管理       │
└─────────────────────────┘    └─────────────────────────┘
```

### 服务依赖关系

```csharp
// ✅ 正确的服务依赖顺序
MongoDB → DataInitializer → ApiService → Admin/App

// ✅ AppHost 配置
var datainitializer = builder.AddProject<Projects.Platform_DataInitializer>("datainitializer")
    .WithReference(mongodb);

var apiservice = builder.AddProject<Projects.Platform_ApiService>("apiservice")
    .WithReference(mongodb)
    .WithReference(datainitializer);  // 依赖数据初始化服务
```

### 索引创建策略

```csharp
// ✅ 幂等的索引创建
private async Task CreateIndexesAsync()
{
    // 索引创建是幂等的，重复执行不会出错
    await CreateIndexAsync(collection,
        Builders<Menu>.IndexKeys.Ascending(m => m.Name),
        new CreateIndexOptions { Unique = true },
        "menus.name (全局唯一)");
}
```

## ❌ 常见错误

### 错误 1: 在 ApiService 中进行数据初始化

```csharp
// ❌ 错误：在 Platform.ApiService 中执行数据初始化
var initializer = scope.ServiceProvider.GetRequiredService<IDatabaseInitializerService>();
await initializer.InitializeAsync();

// ✅ 正确：使用专门的 Platform.DataInitializer 微服务
// 数据初始化由独立的微服务负责
```

### 错误 2: 多实例部署数据初始化服务

```csharp
// ❌ 错误：多个 DataInitializer 实例同时运行
.WithReplicas(3)  // ❌ 可能导致重复初始化

// ✅ 正确：单实例部署
.WithHttpEndpoint()  // 单实例部署
```

### 错误 3: 不使用幂等性检查

```csharp
// ❌ 错误：不检查是否已初始化
await menus.InsertManyAsync(newMenus);  // 可能重复插入

// ✅ 正确：幂等性检查
var existingCount = await menus.CountDocumentsAsync(Builders<Menu>.Filter.Empty);
if (existingCount > 0) return;  // 已存在，跳过
await menus.InsertManyAsync(newMenus);
```

### 错误 4: 忽略初始化错误

```csharp
// ❌ 错误：初始化失败时阻塞应用启动
await initializer.InitializeAsync();  // 可能抛出异常

// ✅ 正确：初始化失败不应阻止应用启动
try
{
    await initializer.InitializeAsync();
}
catch (Exception ex)
{
    _logger.LogError(ex, "数据初始化失败");
    // 不抛出异常，允许应用继续启动
}
```

## 📊 性能考虑

### 单实例运行优势

```csharp
// ✅ 单实例运行的优势
- 无锁竞争开销
- 无分布式锁通信延迟
- 简化的部署和调试
- 更快的初始化执行
```

### 初始化性能

```csharp
// ✅ 优化初始化性能
- 批量操作减少数据库访问
- 幂等性检查避免重复工作
- 详细的日志记录便于监控
- 异常处理不影响应用启动
```

## 🔍 故障排查

### 检查初始化状态

```javascript
// MongoDB 查询菜单数量
db.menus.countDocuments()

// 检查菜单数据
db.menus.find({}, {name: 1, title: 1}).pretty()

// 检查索引状态
db.menus.getIndexes()
```

### 手动触发初始化

```bash
# 手动触发数据初始化
curl -X POST http://localhost:15000/datainitializer/initialize

# 检查健康状态
curl http://localhost:15000/datainitializer/health
```

## 📚 相关文档

- [数据初始化微服务架构](mdc:docs/features/DATA-INITIALIZER-MICROSERVICE.md)
- [分布式锁移除总结报告](mdc:docs/reports/DISTRIBUTED-LOCK-REMOVAL-SUMMARY.md)
- [DataInitializerService 实现](mdc:Platform.DataInitializer/Services/DataInitializerService.cs)
- [CreateAllIndexes 脚本](mdc:Platform.DataInitializer/Scripts/CreateAllIndexes.cs)

## 🎯 记住

1. **单实例运行**：数据初始化微服务只运行一个实例
2. **职责分离**：专门的微服务负责数据初始化
3. **幂等性保证**：所有初始化操作都是幂等的
4. **简化架构**：移除分布式锁复杂性
5. **错误容忍**：初始化失败不应阻止应用启动
