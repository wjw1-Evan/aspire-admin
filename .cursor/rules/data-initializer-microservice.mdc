---
description: 数据初始化微服务开发规范和最佳实践
---
# 数据初始化微服务规范

## 🎯 核心原则

**数据初始化工作由专门的 `Platform.DataInitializer` 微服务负责，实现职责分离和架构优化**

**微服务在完成初始化任务后自动停止，避免资源浪费，状态显示为"完成"**

## ✅ 正确的架构设计

### 微服务职责分离

```csharp
// ✅ 数据初始化微服务职责
Platform.DataInitializer:
- 数据库索引创建
- 全局菜单初始化
- 系统数据初始化
- 幂等性保证

// ✅ API 服务职责
Platform.ApiService:
- 用户认证
- 业务逻辑
- API 接口
- 数据操作
```

### 服务依赖关系

```csharp
// ✅ 正确的服务启动顺序
MongoDB → DataInitializer → ApiService → Admin/App

// ✅ AppHost 配置
var datainitializer = builder.AddProject<Projects.Platform_DataInitializer>("datainitializer")
    .WithReference(mongodb)
    .WithHttpEndpoint()
    .WithHttpHealthCheck("/health");

var apiservice = builder.AddProject<Projects.Platform_ApiService>("apiservice")
    .WithReference(mongodb)
    .WithReference(datainitializer);  // 依赖数据初始化服务
```

## 🔧 实现规范

### 数据初始化服务实现

```csharp
// ✅ 正确的服务实现
public class DataInitializerService : IDataInitializerService
{
    private readonly IMongoDatabase _database;
    private readonly ILogger<DataInitializerService> _logger;

    public async Task InitializeAsync()
    {
        _logger.LogInformation("========== 开始数据初始化 ==========");
        
        try
        {
            await ExecuteInitializationAsync();
            _logger.LogInformation("========== 数据初始化完成 ==========");
            _logger.LogInformation("🎉 所有数据库索引和系统菜单已成功创建");
            _logger.LogInformation("📊 初始化统计：");
            _logger.LogInformation("   - 数据库索引：已创建/更新");
            _logger.LogInformation("   - 系统菜单：已创建/验证");
            _logger.LogInformation("✅ DataInitializer 任务完成，服务可以安全停止");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "❌ 数据初始化失败");
            _logger.LogError("🛑 DataInitializer 将停止运行，请检查错误日志");
            throw; // 重新抛出异常，让 Program.cs 处理
        }
    }

    private async Task ExecuteInitializationAsync()
    {
        // 1. 创建数据库索引
        await CreateIndexesAsync();
        
        // 2. 创建全局菜单
        await CreateSystemMenusAsync();
    }
}
```

### 自动停止机制实现

```csharp
// ✅ Program.cs 中的自动停止实现
// 自动执行数据初始化
using (var scope = app.Services.CreateScope())
{
    var initializer = scope.ServiceProvider.GetRequiredService<IDataInitializerService>();
    var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
    
    try
    {
        logger.LogInformation("🚀 DataInitializer 微服务启动，开始执行数据初始化...");
        await initializer.InitializeAsync();
        logger.LogInformation("✅ 数据初始化完成，DataInitializer 微服务将停止运行");
        
        // 初始化完成后，优雅地停止服务
        logger.LogInformation("🛑 DataInitializer 微服务已完成任务，正在停止...");
        return; // 直接返回，不执行 app.RunAsync()
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "❌ 数据初始化失败，DataInitializer 微服务将停止运行");
        return; // 即使失败也停止服务
    }
}

// 这行代码不会被执行，因为上面已经 return 了
await app.RunAsync();
```

### 幂等性保证

```csharp
// ✅ 所有初始化操作必须是幂等的
private async Task CreateSystemMenusAsync()
{
    var menus = _database.GetCollection<Menu>("menus");
    
    // 检查是否已经初始化过
    var existingCount = await menus.CountDocumentsAsync(Builders<Menu>.Filter.Empty);
    if (existingCount > 0)
    {
        _logger.LogInformation("全局菜单已存在（{Count} 个），跳过创建", existingCount);
        return;
    }
    
    // 创建菜单...
    await menus.InsertManyAsync(newMenus);
}

// ✅ 索引创建是幂等的
private async Task CreateIndexesAsync()
{
    await CreateIndexAsync(collection,
        Builders<Menu>.IndexKeys.Ascending(m => m.Name),
        new CreateIndexOptions { Unique = true },
        "menus.name (全局唯一)");
}
```

### 错误处理策略

```csharp
// ✅ 自动停止模式：失败时也停止服务
public async Task InitializeAsync()
{
    try
    {
        await ExecuteInitializationAsync();
        _logger.LogInformation("✅ DataInitializer 任务完成，服务可以安全停止");
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "❌ 数据初始化失败");
        _logger.LogError("🛑 DataInitializer 将停止运行，请检查错误日志");
        throw; // 重新抛出异常，让 Program.cs 处理停止逻辑
    }
}

// ✅ 详细的日志记录
private async Task CreateIndexAsync<T>(IMongoCollection<T> collection, 
    IndexKeysDefinition<T> keys, CreateIndexOptions options, string description)
{
    try
    {
        await collection.Indexes.CreateOneAsync(new CreateIndexModel<T>(keys, options));
        _logger.LogInformation("✅ 创建索引: {Description}", description);
    }
    catch (MongoCommandException ex) when (ex.CodeName == "IndexOptionsConflict")
    {
        _logger.LogDebug("⚠️  索引已存在: {Description}", description);
    }
    catch (Exception ex)
    {
        _logger.LogWarning("创建索引失败: {Description}, 错误: {Error}", description, ex.Message);
    }
}
```

## 🚀 部署配置

### 单实例运行保证

```csharp
// ✅ 单实例部署配置
var datainitializer = builder.AddProject<Projects.Platform_DataInitializer>("datainitializer")
    .WithReference(mongodb)
    .WithHttpEndpoint()  // 单实例部署，不使用 WithReplicas
    .WithHttpHealthCheck("/health");

// ❌ 禁止多实例部署
.WithReplicas(3)  // 可能导致重复初始化
```

### 环境配置

```json
// ✅ appsettings.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Platform.DataInitializer": "Information"
    }
  }
}

// ✅ appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Platform.DataInitializer": "Debug"
    }
  }
}
```

## 📊 API 端点设计

### 健康检查端点

```csharp
// ✅ 提供健康检查端点
app.MapGet("/health", () => Results.Ok(new { 
    status = "healthy", 
    service = "DataInitializer" 
}));
```

### 手动初始化端点

```csharp
// ✅ 提供手动初始化端点
app.MapPost("/initialize", async (IDataInitializerService initializer) =>
{
    try
    {
        await initializer.InitializeAsync();
        return Results.Ok(new { message = "数据初始化完成" });
    }
    catch (Exception ex)
    {
        return Results.Problem($"数据初始化失败: {ex.Message}");
    }
});
```

## 🔍 监控和调试

### 服务状态监控

```bash
# 在 Aspire Dashboard 中查看 DataInitializer 服务状态
# 状态说明：
- "运行中" - 服务正在执行初始化
- "完成" - 初始化成功，服务已停止
- "失败" - 初始化失败，服务已停止
```

### 日志监控

```bash
# 在 Aspire Dashboard 中查看 DataInitializer 服务日志
# 关注以下日志：
- "🚀 DataInitializer 微服务启动，开始执行数据初始化..."
- "========== 开始数据初始化 =========="
- "✅ 创建索引: xxx"
- "全局菜单创建完成，共创建 x 个菜单"
- "========== 数据初始化完成 =========="
- "🎉 所有数据库索引和系统菜单已成功创建"
- "📊 初始化统计："
- "✅ DataInitializer 任务完成，服务可以安全停止"
- "✅ 数据初始化完成，DataInitializer 微服务将停止运行"
- "🛑 DataInitializer 微服务已完成任务，正在停止..."
```

### 手动测试

```bash
# 手动触发初始化
curl -X POST http://localhost:15000/datainitializer/initialize

# 检查健康状态
curl http://localhost:15000/datainitializer/health

# 检查数据库状态
mongo aspire-admin --eval "db.menus.countDocuments()"
```

### 数据库验证

```javascript
// 验证菜单初始化
db.menus.countDocuments()        // 检查菜单数量
db.menus.find({}, {name: 1, title: 1}).pretty()  // 检查菜单内容

// 验证索引创建
db.menus.getIndexes()           // 检查索引
```

## ❌ 禁止的做法

### 不要在 ApiService 中进行数据初始化

```csharp
// ❌ 禁止：在 Platform.ApiService 中执行数据初始化
var initializer = scope.ServiceProvider.GetRequiredService<IDatabaseInitializerService>();
await initializer.InitializeAsync();

// ❌ 禁止：直接调用初始化脚本
var fixAllEntities = new FixAllEntitiesIsDeletedField(database);
await fixAllEntities.FixAsync();
```

### 不要创建全局业务数据

```csharp
// ❌ 禁止：创建没有 CompanyId 的业务数据
var notice = new Notice 
{ 
    Title = "系统通知",
    // ❌ 缺少 CompanyId
};

// ✅ 正确：菜单是全局系统资源（合理例外）
var menu = new Menu
{
    Name = "user-management",
    Title = "用户管理",
    // ✅ 菜单无 CompanyId，这是合理的例外
};
```

### 不要多实例部署

```csharp
// ❌ 禁止：多个 DataInitializer 实例
.WithReplicas(3)  // 可能导致重复初始化

// ✅ 正确：单实例部署
.WithHttpEndpoint()  // 单实例部署
```

## 📋 开发检查清单

在开发数据初始化功能时，确保：

- [ ] 在 `Platform.DataInitializer` 微服务中实现
- [ ] 单实例运行保证安全
- [ ] 所有操作都是幂等的
- [ ] 不创建全局业务数据（菜单除外）
- [ ] 使用 MongoDB 原子操作
- [ ] 有详细的日志输出
- [ ] 实现自动停止机制（完成或失败后停止）
- [ ] 提供健康检查端点
- [ ] 提供手动初始化端点
- [ ] 在 Aspire Dashboard 中显示正确的状态

## 📚 相关文档

- [数据初始化微服务架构](mdc:docs/features/DATA-INITIALIZER-MICROSERVICE.md)
- [DataInitializer 微服务自动停止优化](mdc:docs/optimization/DATA-INITIALIZER-AUTO-STOP.md)
- [DataInitializer 微服务自动停止功能实现报告](mdc:docs/reports/DATA-INITIALIZER-AUTO-STOP-IMPLEMENTATION.md)
- [分布式锁移除总结报告](mdc:docs/reports/DISTRIBUTED-LOCK-REMOVAL-SUMMARY.md)
- [DataInitializerService 实现](mdc:Platform.DataInitializer/Services/DataInitializerService.cs)
- [CreateAllIndexes 脚本](mdc:Platform.DataInitializer/Scripts/CreateAllIndexes.cs)
- [MenuModels 定义](mdc:Platform.DataInitializer/Models/MenuModels.cs)

## 🎯 记住

1. **职责分离** - 数据初始化由专门的微服务负责
2. **单实例运行** - 确保只有一个实例执行初始化
3. **幂等性保证** - 所有操作都可以安全重复执行
4. **自动停止** - 完成任务后自动停止，避免资源浪费
5. **状态清晰** - 在 Aspire Dashboard 中显示明确的状态
6. **简化架构** - 移除分布式锁等复杂机制