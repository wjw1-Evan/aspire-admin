---
description: 部署和运维规范
---

# 部署和运维规范

## 🎯 部署架构

### 技术栈

- **.NET Aspire** - 应用编排和部署
- **Docker** - 容器化部署
- **MongoDB** - 数据库服务
- **YARP** - API 网关
- **Nginx** - 静态资源服务

## 🏗️ 开发环境部署

### 启动顺序

```bash
# 1. 确保 Docker 已启动
docker --version

# 2. 通过 AppHost 启动所有服务（推荐）
dotnet run --project Platform.AppHost

# 3. 访问 Aspire Dashboard 查看服务状态
open http://localhost:15003
```

### 服务端口分配

| 服务 | 端口 | 用途 |
|------|------|------|
| Aspire Dashboard | 15003 | 服务监控面板 |
| API 网关 (YARP) | 15000 | 统一 API 入口 |
| 管理后台 | 15001 | Web 管理界面 |
| 移动应用 | 15002 | 移动端开发服务器 |
| MongoDB | 27017 | 数据库服务 |
| MongoDB Express | 8081 | 数据库管理界面 |

### 环境变量配置

```bash
# .env.development
NODE_ENV=development
API_BASE_URL=http://localhost:15000

# .NET 环境
ASPNETCORE_ENVIRONMENT=Development
ASPNETCORE_URLS=http://localhost:5000
```

## 🐳 Docker 容器化

### Dockerfile - API 服务

```dockerfile
# ✅ 推荐：Platform.ApiService/Dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
WORKDIR /app
EXPOSE 8080

FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /src
COPY ["Platform.ApiService/Platform.ApiService.csproj", "Platform.ApiService/"]
COPY ["Platform.ServiceDefaults/Platform.ServiceDefaults.csproj", "Platform.ServiceDefaults/"]
RUN dotnet restore "Platform.ApiService/Platform.ApiService.csproj"
COPY . .
WORKDIR "/src/Platform.ApiService"
RUN dotnet build "Platform.ApiService.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Platform.ApiService.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Platform.ApiService.dll"]
```

### Dockerfile - 管理后台

```dockerfile
# ✅ 推荐：Platform.Admin/Dockerfile
FROM node:20-alpine AS base
WORKDIR /app

# 安装依赖
FROM base AS deps
COPY package.json package-lock.json ./
RUN npm ci

# 构建应用
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npm run build

# 生产镜像
FROM nginx:alpine AS runner
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

### Docker Compose

```yaml
# ✅ 推荐：docker-compose.yml
version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: platform-mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123

  mongo-express:
    image: mongo-express:latest
    container_name: platform-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
    depends_on:
      - mongodb

  api-service:
    build:
      context: .
      dockerfile: Platform.ApiService/Dockerfile
    container_name: platform-api
    restart: always
    ports:
      - "5000:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__mongodb: mongodb://admin:admin123@mongodb:27017/platform?authSource=admin
      JwtSettings__SecretKey: ${JWT_SECRET_KEY}
      JwtSettings__RefreshTokenSecret: ${JWT_REFRESH_SECRET_KEY}
    depends_on:
      - mongodb

  admin:
    build:
      context: ./Platform.Admin
      dockerfile: Dockerfile
    container_name: platform-admin
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api-service

volumes:
  mongodb_data:
```

## 🚀 生产环境部署

### 准备工作

```bash
# 1. 设置环境变量
export JWT_SECRET_KEY="your-production-secret-key-min-32-chars"
export JWT_REFRESH_SECRET_KEY="your-refresh-secret-key-min-32-chars"
export MONGO_ROOT_PASSWORD="your-mongo-password"

# 2. 构建 Docker 镜像
docker-compose build

# 3. 启动服务
docker-compose up -d

# 4. 查看服务状态
docker-compose ps

# 5. 查看日志
docker-compose logs -f
```

### Nginx 配置

```nginx
# ✅ 推荐：nginx.conf
server {
    listen 80;
    server_name your-domain.com;

    # 重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-domain.com;

    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # 前端静态资源
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # 缓存配置
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # API 代理
    location /api/ {
        proxy_pass http://api-service:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # 健康检查端点
    location /health {
        proxy_pass http://api-service:8080/health;
        access_log off;
    }
}
```

### 环境配置文件

```json
// ✅ 推荐：appsettings.Production.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "mongodb": "mongodb://username:password@mongodb:27017/platform?authSource=admin"
  },
  "JwtSettings": {
    "SecretKey": "${JWT_SECRET_KEY}",
    "RefreshTokenSecret": "${JWT_REFRESH_SECRET_KEY}",
    "Issuer": "Platform.ApiService",
    "Audience": "Platform.Users",
    "ExpirationMinutes": 60,
    "RefreshTokenExpirationDays": 7
  },
  "AllowedHosts": "*",
  "Cors": {
    "AllowedOrigins": ["https://your-domain.com"]
  }
}
```

## 📊 监控和日志

### 日志配置

```csharp
// ✅ 推荐：Program.cs 日志配置
builder.Services.AddLogging(logging =>
{
    logging.ClearProviders();
    logging.AddConsole();
    logging.AddDebug();
    
    if (builder.Environment.IsProduction())
    {
        // 生产环境可以添加其他日志提供程序
        // logging.AddApplicationInsights();
    }
});
```

### 健康检查

```csharp
// ✅ 推荐：健康检查配置
builder.Services.AddHealthChecks()
    .AddMongoDb(
        builder.Configuration.GetConnectionString("mongodb")!,
        name: "mongodb",
        timeout: TimeSpan.FromSeconds(3))
    .AddCheck("self", () => HealthCheckResult.Healthy());

app.MapHealthChecks("/health", new HealthCheckOptions
{
    ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
});
```

### Aspire 监控

```bash
# 访问 Aspire Dashboard
# Development: http://localhost:15003
# Production: 配置外部访问

# 监控指标：
# - 服务状态
# - 请求追踪
# - 日志聚合
# - 性能指标
```

## 🔒 安全配置

### HTTPS 配置

```csharp
// ✅ 推荐：HTTPS 重定向
if (!app.Environment.IsDevelopment())
{
    app.UseHttpsRedirection();
    app.UseHsts();
}
```

### CORS 配置

```csharp
// ✅ 推荐：生产环境 CORS
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        if (builder.Environment.IsDevelopment())
        {
            policy.AllowAnyOrigin()
                  .AllowAnyMethod()
                  .AllowAnyHeader();
        }
        else
        {
            policy.WithOrigins(builder.Configuration.GetSection("Cors:AllowedOrigins").Get<string[]>()!)
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        }
    });
});
```

### 密钥管理

```bash
# ✅ 推荐：使用环境变量管理密钥
# 不要将密钥提交到代码仓库

# .env.production (不提交到 Git)
JWT_SECRET_KEY=your-secret-key-min-32-chars
JWT_REFRESH_SECRET_KEY=your-refresh-secret-key-min-32-chars
MONGO_ROOT_PASSWORD=your-mongo-password

# 使用 Docker Secrets (推荐)
docker secret create jwt_secret_key jwt_secret.txt
docker secret create jwt_refresh_secret refresh_secret.txt
```

## 🔄 CI/CD 流程

### GitHub Actions 示例

```yaml
# ✅ 推荐：.github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build API
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet publish Platform.ApiService/Platform.ApiService.csproj -c Release -o ./publish

      - name: Build Admin
        run: |
          cd Platform.Admin
          npm ci
          npm run build

      - name: Build Docker images
        run: |
          docker-compose build

      - name: Push to Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker-compose push

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /app
            docker-compose pull
            docker-compose up -d
            docker-compose ps
```

## 📦 备份和恢复

### 数据库备份

```bash
# ✅ 推荐：MongoDB 备份脚本
#!/bin/bash

# 设置变量
BACKUP_DIR="/backup/mongodb"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="platform_backup_$TIMESTAMP"

# 创建备份目录
mkdir -p $BACKUP_DIR

# 执行备份
docker exec platform-mongodb mongodump \
  --uri="mongodb://admin:admin123@localhost:27017/platform?authSource=admin" \
  --out="/backup/$BACKUP_NAME"

# 压缩备份
docker exec platform-mongodb tar -czf "/backup/$BACKUP_NAME.tar.gz" "/backup/$BACKUP_NAME"

# 删除旧备份（保留最近7天）
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

echo "Backup completed: $BACKUP_NAME.tar.gz"
```

### 数据库恢复

```bash
# ✅ 推荐：MongoDB 恢复脚本
#!/bin/bash

# 解压备份
tar -xzf platform_backup_20240101_120000.tar.gz

# 恢复数据
docker exec -i platform-mongodb mongorestore \
  --uri="mongodb://admin:admin123@localhost:27017/platform?authSource=admin" \
  --drop \
  /backup/platform_backup_20240101_120000

echo "Restore completed"
```

## 🚫 避免的做法

- 不要在代码中硬编码密钥和密码
- 不要忽略安全更新和补丁
- 不要在生产环境中使用开发配置
- 不要忘记定期备份数据
- 不要忽略监控和日志
- 不要在生产环境暴露调试端点

## 🔧 最佳实践

1. **容器化部署** - 使用 Docker 确保环境一致性
2. **密钥管理** - 使用环境变量或密钥管理服务
3. **健康检查** - 配置服务健康检查端点
4. **日志监控** - 集中管理和监控日志
5. **自动化部署** - 使用 CI/CD 自动化部署流程
6. **定期备份** - 定期备份数据库和配置
7. **负载均衡** - 使用负载均衡提高可用性
8. **灰度发布** - 使用灰度发布降低风险

## 📚 相关资源

- [.NET Aspire 部署文档](https://learn.microsoft.com/aspnet/core/aspire/deployment/)
- [Docker 官方文档](https://docs.docker.com/)
- [MongoDB 备份恢复](https://www.mongodb.com/docs/manual/core/backups/)

