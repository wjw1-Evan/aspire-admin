---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 设计模式和架构原则规范
---
# 设计模式和架构原则规范

## 🎯 核心原则

### 遵循 SOLID 原则和常用设计模式，构建可维护、可扩展的软件架构

## ✅ SOLID 原则应用

### 单一职责原则 (SRP)

```csharp
// ✅ 正确 - 单一职责
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ILogger<UserService> _logger;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        ILogger<UserService> logger)
    {
        _userFactory = userFactory;
        _logger = logger;
    }

    // 只负责用户相关的业务逻辑
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        await ValidateCreateUserRequestAsync(request);
        
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        };
        
        return await _userFactory.CreateAsync(user);
    }

    public async Task<User?> GetUserByIdAsync(string id)
    {
        if (string.IsNullOrEmpty(id))
            throw new ArgumentException("用户ID不能为空", nameof(id));

        return await _userFactory.GetByIdAsync(id);
    }

    private async Task ValidateCreateUserRequestAsync(CreateUserRequest request)
    {
        if (string.IsNullOrEmpty(request.Username))
            throw new ArgumentException("用户名不能为空", nameof(request.Username));
    }
}

// ❌ 错误 - 违反单一职责
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly IDatabaseOperationFactory<Role> _roleFactory;
    private readonly IDatabaseOperationFactory<Company> _companyFactory;
    private readonly IEmailService _emailService;
    private readonly IFileService _fileService;

    // 负责太多职责：用户管理、角色管理、企业管理、邮件发送、文件处理
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 用户创建逻辑
        var user = await _userFactory.CreateAsync(new User());
        
        // 角色分配逻辑
        await _roleFactory.CreateAsync(new Role());
        
        // 企业关联逻辑
        await _companyFactory.CreateAsync(new Company());
        
        // 邮件发送逻辑
        await _emailService.SendWelcomeEmailAsync(user.Email);
        
        // 文件处理逻辑
        await _fileService.CreateUserFolderAsync(user.Id);
        
        return user;
    }
}
```

### 开闭原则 (OCP)

```csharp
// ✅ 正确 - 对扩展开放，对修改封闭
public interface IUserValidator
{
    Task<bool> ValidateAsync(User user);
}

public class BasicUserValidator : IUserValidator
{
    public async Task<bool> ValidateAsync(User user)
    {
        return !string.IsNullOrEmpty(user.Username) && 
               !string.IsNullOrEmpty(user.Email);
    }
}

public class AdvancedUserValidator : IUserValidator
{
    private readonly IUserValidator _basicValidator;
    private readonly IEmailService _emailService;

    public AdvancedUserValidator(IUserValidator basicValidator, IEmailService emailService)
    {
        _basicValidator = basicValidator;
        _emailService = emailService;
    }

    public async Task<bool> ValidateAsync(User user)
    {
        // 基础验证
        if (!await _basicValidator.ValidateAsync(user))
            return false;

        // 高级验证
        return await _emailService.ValidateEmailAsync(user.Email);
    }
}

public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly IUserValidator _userValidator;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        IUserValidator userValidator)
    {
        _userFactory = userFactory;
        _userValidator = userValidator;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        // 使用可扩展的验证器
        if (!await _userValidator.ValidateAsync(user))
            throw new ArgumentException("用户验证失败");

        return await _userFactory.CreateAsync(user);
    }
}

// ❌ 错误 - 违反开闭原则
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        // 硬编码验证逻辑，难以扩展
        if (string.IsNullOrEmpty(user.Username))
            throw new ArgumentException("用户名不能为空");

        if (string.IsNullOrEmpty(user.Email))
            throw new ArgumentException("邮箱不能为空");

        // 如果需要添加新的验证规则，必须修改这个方法
        return await _userFactory.CreateAsync(user);
    }
}
```

### 里氏替换原则 (LSP)

```csharp
// ✅ 正确 - 子类可以替换父类
public abstract class BaseService
{
    protected readonly ILogger Logger;

    protected BaseService(ILogger logger)
    {
        Logger = logger;
    }

    public abstract Task<bool> ValidateAsync();
}

public class UserService : BaseService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        ILogger<UserService> logger)
        : base(logger)
    {
        _userFactory = userFactory;
    }

    public override async Task<bool> ValidateAsync()
    {
        // 用户服务特定的验证逻辑
        var userCount = await _userFactory.CountAsync();
        return userCount >= 0;
    }
}

public class RoleService : BaseService
{
    private readonly IDatabaseOperationFactory<Role> _roleFactory;

    public RoleService(
        IDatabaseOperationFactory<Role> roleFactory,
        ILogger<RoleService> logger)
        : base(logger)
    {
        _roleFactory = roleFactory;
    }

    public override async Task<bool> ValidateAsync()
    {
        // 角色服务特定的验证逻辑
        var roleCount = await _roleFactory.CountAsync();
        return roleCount >= 0;
    }
}

// 使用基类引用，子类可以正确替换
public class ServiceValidator
{
    private readonly BaseService _service;

    public ServiceValidator(BaseService service)
    {
        _service = service;
    }

    public async Task<bool> ValidateService()
    {
        return await _service.ValidateAsync();
    }
}

// ❌ 错误 - 违反里氏替换原则
public abstract class BaseService
{
    public abstract Task<bool> ValidateAsync();
}

public class UserService : BaseService
{
    public override async Task<bool> ValidateAsync()
    {
        // 抛出异常，违反了LSP
        throw new NotImplementedException("用户服务验证未实现");
    }
}
```

### 接口隔离原则 (ISP)

```csharp
// ✅ 正确 - 接口隔离
public interface IUserReader
{
    Task<User?> GetUserByIdAsync(string id);
    Task<List<User>> GetUsersAsync(UserListRequest request);
}

public interface IUserWriter
{
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
}

public interface IUserValidator
{
    Task<bool> ValidateUserAsync(User user);
}

public class UserService : IUserReader, IUserWriter, IUserValidator
{
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public UserService(IDatabaseOperationFactory<User> userFactory)
    {
        _userFactory = userFactory;
    }

    // IUserReader 实现
    public async Task<User?> GetUserByIdAsync(string id)
    {
        return await _userFactory.GetByIdAsync(id);
    }

    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        return await _userFactory.FindAsync(filter);
    }

    // IUserWriter 实现
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        };

        return await _userFactory.CreateAsync(user);
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var user = await _userFactory.GetByIdAsync(request.Id);
        if (user == null)
            return false;

        var update = _userFactory.CreateUpdateBuilder()
            .Set(u => u.Username, request.Username)
            .SetCurrentTimestamp()
            .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
            .Build();

        return await _userFactory.UpdateAsync(user, new OperationContext
        {
            UserId = _userFactory.GetCurrentUserId(),
            Username = _userFactory.GetCurrentUsername(),
            CompanyId = _userFactory.GetCurrentCompanyId(),
            OperationType = OperationType.Update,
            Description = "更新用户信息"
        });
    }

    public async Task<bool> DeleteUserAsync(string id)
    {
        return await _userFactory.SoftDeleteAsync(id, new OperationContext
        {
            UserId = _userFactory.GetCurrentUserId(),
            Username = _userFactory.GetCurrentUsername(),
            CompanyId = _userFactory.GetCurrentCompanyId(),
            OperationType = OperationType.Delete,
            Description = "删除用户"
        });
    }

    // IUserValidator 实现
    public async Task<bool> ValidateUserAsync(User user)
    {
        return !string.IsNullOrEmpty(user.Username) && 
               !string.IsNullOrEmpty(user.Email);
    }
}

// ❌ 错误 - 违反接口隔离原则
public interface IUserService
{
    // 接口过于庞大，包含了太多不相关的方法
    Task<User?> GetUserByIdAsync(string id);
    Task<List<User>> GetUsersAsync(UserListRequest request);
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
    Task<bool> ValidateUserAsync(User user);
    Task<bool> SendEmailAsync(string email);
    Task<bool> UploadFileAsync(string fileName, byte[] content);
    Task<bool> ProcessPaymentAsync(decimal amount);
}
```

### 依赖倒置原则 (DIP)

```csharp
// ✅ 正确 - 依赖倒置
public interface IUserRepository
{
    Task<User?> GetByIdAsync(string id);
    Task<List<User>> FindAsync(FilterDefinition<User> filter);
    Task<User> CreateAsync(User user);
    Task<bool> UpdateAsync(User user);
    Task<bool> DeleteAsync(string id);
}

public interface IUserValidator
{
    Task<bool> ValidateAsync(User user);
}

public interface IUserLogger
{
    Task LogUserOperationAsync(string operation, string userId, object data);
}

public class UserService : IUserService
{
    private readonly IUserRepository _userRepository;
    private readonly IUserValidator _userValidator;
    private readonly IUserLogger _userLogger;

    // 依赖抽象而不是具体实现
    public UserService(
        IUserRepository userRepository,
        IUserValidator userValidator,
        IUserLogger userLogger)
    {
        _userRepository = userRepository;
        _userValidator = userValidator;
        _userLogger = userLogger;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        // 使用抽象接口
        if (!await _userValidator.ValidateAsync(user))
            throw new ArgumentException("用户验证失败");

        var createdUser = await _userRepository.CreateAsync(user);
        
        await _userLogger.LogUserOperationAsync("创建用户", createdUser.Id, new { Username = request.Username });
        
        return createdUser;
    }
}

// ❌ 错误 - 违反依赖倒置原则
public class UserService : IUserService
{
    private readonly MongoDbUserRepository _userRepository;
    private readonly EmailUserValidator _userValidator;
    private readonly FileUserLogger _userLogger;

    // 依赖具体实现
    public UserService(
        MongoDbUserRepository userRepository,
        EmailUserValidator userValidator,
        FileUserLogger userLogger)
    {
        _userRepository = userRepository;
        _userValidator = userValidator;
        _userLogger = userLogger;
    }
}
```

## 🎯 常用设计模式

### 工厂模式

```csharp
// ✅ 正确 - 工厂模式
public interface IDatabaseOperationFactory<T> where T : class, IEntity, ISoftDeletable, ITimestamped
{
    FilterBuilder<T> CreateFilterBuilder();
    SortBuilder<T> CreateSortBuilder();
    UpdateBuilder<T> CreateUpdateBuilder();
    OperationContextBuilder CreateOperationContext();
    
    Task<T> CreateAsync(T entity, OperationContext? context = null);
    Task<List<T>> CreateManyAsync(IEnumerable<T> entities, OperationContext? context = null);
    Task<bool> UpdateAsync(T entity, OperationContext? context = null);
    Task<List<T>> FindAsync(FilterDefinition<T>? filter = null, SortDefinition<T>? sort = null, int? limit = null);
}

public class DatabaseOperationFactory<T> : IDatabaseOperationFactory<T> where T : class, IEntity, ISoftDeletable, ITimestamped
{
    private readonly IMongoCollection<T> _collection;
    private readonly IAuditService _auditService;
    private readonly ITenantContext _tenantContext;

    public DatabaseOperationFactory(
        IMongoCollection<T> collection,
        IAuditService auditService,
        ITenantContext tenantContext)
    {
        _collection = collection;
        _auditService = auditService;
        _tenantContext = tenantContext;
    }

    public FilterBuilder<T> CreateFilterBuilder()
    {
        return new FilterBuilder<T>();
    }

    public SortBuilder<T> CreateSortBuilder()
    {
        return new SortBuilder<T>();
    }

    public UpdateBuilder<T> CreateUpdateBuilder()
    {
        return new UpdateBuilder<T>();
    }

    public OperationContextBuilder CreateOperationContext()
    {
        return new OperationContextBuilder()
            .WithUser(_tenantContext.GetCurrentUserId(), _tenantContext.GetCurrentUsername())
            .WithCompany(_tenantContext.GetCurrentCompanyId());
    }

    public async Task<T> CreateAsync(T entity, OperationContext? context = null)
    {
        // 设置操作跟踪信息
        if (entity is IOperationTrackable trackable)
        {
            trackable.CreatedBy = context?.UserId ?? _tenantContext.GetCurrentUserId();
            trackable.CreatedByUsername = context?.Username ?? _tenantContext.GetCurrentUsername();
            trackable.LastOperationType = OperationType.Create.ToString();
            trackable.LastOperationAt = DateTime.UtcNow;
        }

        // 设置时间戳
        if (entity is ITimestamped timestamped)
        {
            timestamped.CreatedAt = DateTime.UtcNow;
            timestamped.UpdatedAt = DateTime.UtcNow;
        }

        // 设置多租户信息
        if (entity is IMultiTenant multiTenant)
        {
            multiTenant.CompanyId = context?.CompanyId ?? _tenantContext.GetCurrentCompanyId();
        }

        await _collection.InsertOneAsync(entity);

        // 记录审计日志
        if (context != null)
        {
            await _auditService.RecordOperationAsync<T>(entity, OperationType.Create, context);
        }

        return entity;
    }

    // 其他方法实现...
}
```

### 策略模式

```csharp
// ✅ 正确 - 策略模式
public interface IUserValidationStrategy
{
    Task<bool> ValidateAsync(User user);
    string GetValidationType();
}

public class BasicUserValidationStrategy : IUserValidationStrategy
{
    public async Task<bool> ValidateAsync(User user)
    {
        return !string.IsNullOrEmpty(user.Username) && 
               !string.IsNullOrEmpty(user.Email);
    }

    public string GetValidationType()
    {
        return "Basic";
    }
}

public class AdvancedUserValidationStrategy : IUserValidationStrategy
{
    private readonly IEmailService _emailService;

    public AdvancedUserValidationStrategy(IEmailService emailService)
    {
        _emailService = emailService;
    }

    public async Task<bool> ValidateAsync(User user)
    {
        if (string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Email))
            return false;

        return await _emailService.ValidateEmailAsync(user.Email);
    }

    public string GetValidationType()
    {
        return "Advanced";
    }
}

public class UserValidationContext
{
    private readonly IUserValidationStrategy _strategy;

    public UserValidationContext(IUserValidationStrategy strategy)
    {
        _strategy = strategy;
    }

    public async Task<bool> ValidateUserAsync(User user)
    {
        return await _strategy.ValidateAsync(user);
    }

    public string GetValidationType()
    {
        return _strategy.GetValidationType();
    }
}

public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly UserValidationContext _validationContext;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        UserValidationContext validationContext)
    {
        _userFactory = userFactory;
        _validationContext = validationContext;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        if (!await _validationContext.ValidateUserAsync(user))
            throw new ArgumentException("用户验证失败");

        return await _userFactory.CreateAsync(user);
    }
}
```

### 观察者模式

```csharp
// ✅ 正确 - 观察者模式
public interface IUserEvent
{
    string EventType { get; }
    string UserId { get; }
    DateTime Timestamp { get; }
}

public class UserCreatedEvent : IUserEvent
{
    public string EventType => "UserCreated";
    public string UserId { get; }
    public DateTime Timestamp { get; }
    public string Username { get; }
    public string Email { get; }

    public UserCreatedEvent(string userId, string username, string email)
    {
        UserId = userId;
        Username = username;
        Email = email;
        Timestamp = DateTime.UtcNow;
    }
}

public interface IUserEventHandler
{
    Task HandleAsync(IUserEvent userEvent);
}

public class EmailNotificationHandler : IUserEventHandler
{
    private readonly IEmailService _emailService;

    public EmailNotificationHandler(IEmailService emailService)
    {
        _emailService = emailService;
    }

    public async Task HandleAsync(IUserEvent userEvent)
    {
        if (userEvent is UserCreatedEvent createdEvent)
        {
            await _emailService.SendWelcomeEmailAsync(createdEvent.Email);
        }
    }
}

public class AuditLogHandler : IUserEventHandler
{
    private readonly IAuditService _auditService;

    public AuditLogHandler(IAuditService auditService)
    {
        _auditService = auditService;
    }

    public async Task HandleAsync(IUserEvent userEvent)
    {
        await _auditService.RecordEventAsync(userEvent);
    }
}

public class UserEventPublisher
{
    private readonly List<IUserEventHandler> _handlers;

    public UserEventPublisher()
    {
        _handlers = new List<IUserEventHandler>();
    }

    public void Subscribe(IUserEventHandler handler)
    {
        _handlers.Add(handler);
    }

    public async Task PublishAsync(IUserEvent userEvent)
    {
        foreach (var handler in _handlers)
        {
            try
            {
                await handler.HandleAsync(userEvent);
            }
            catch (Exception ex)
            {
                // 记录错误但不影响其他处理器
                Console.WriteLine($"Error handling event {userEvent.EventType}: {ex.Message}");
            }
        }
    }
}

public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly UserEventPublisher _eventPublisher;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        UserEventPublisher eventPublisher)
    {
        _userFactory = userFactory;
        _eventPublisher = eventPublisher;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        };

        var createdUser = await _userFactory.CreateAsync(user);

        // 发布事件
        var userEvent = new UserCreatedEvent(createdUser.Id, createdUser.Username, createdUser.Email);
        await _eventPublisher.PublishAsync(userEvent);

        return createdUser;
    }
}
```

## 🚫 禁止的做法

### 不要违反单一职责原则

```csharp
// ❌ 错误 - 违反单一职责
public class UserService : IUserService
{
    // 负责太多职责
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 用户创建
        var user = await _userFactory.CreateAsync(new User());
        
        // 角色分配
        await _roleFactory.CreateAsync(new Role());
        
        // 邮件发送
        await _emailService.SendEmailAsync(user.Email);
        
        // 文件处理
        await _fileService.CreateFolderAsync(user.Id);
        
        return user;
    }
}

// ✅ 正确 - 单一职责
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 只负责用户创建
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };
        
        return await _userFactory.CreateAsync(user);
    }
}
```

### 不要硬编码依赖

```csharp
// ❌ 错误 - 硬编码依赖
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 硬编码依赖具体实现
        var mongoDb = new MongoDbUserRepository();
        var emailValidator = new EmailUserValidator();
        var fileLogger = new FileUserLogger();
        
        var user = new User { Username = request.Username };
        return await mongoDb.CreateAsync(user);
    }
}

// ✅ 正确 - 依赖注入
public class UserService : IUserService
{
    private readonly IUserRepository _userRepository;
    private readonly IUserValidator _userValidator;
    private readonly IUserLogger _userLogger;

    public UserService(
        IUserRepository userRepository,
        IUserValidator userValidator,
        IUserLogger userLogger)
    {
        _userRepository = userRepository;
        _userValidator = userValidator;
        _userLogger = userLogger;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User { Username = request.Username };
        return await _userRepository.CreateAsync(user);
    }
}
```

### 不要忽略接口隔离

```csharp
// ❌ 错误 - 接口过于庞大
public interface IUserService
{
    // 包含了太多不相关的方法
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
    Task<bool> SendEmailAsync(string email);
    Task<bool> UploadFileAsync(string fileName, byte[] content);
    Task<bool> ProcessPaymentAsync(decimal amount);
}

// ✅ 正确 - 接口隔离
public interface IUserService
{
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
}

public interface IEmailService
{
    Task<bool> SendEmailAsync(string email);
}

public interface IFileService
{
    Task<bool> UploadFileAsync(string fileName, byte[] content);
}

public interface IPaymentService
{
    Task<bool> ProcessPaymentAsync(decimal amount);
}
```

## 📋 设计模式开发检查清单

创建或修改代码时检查：

- [ ] 遵循 SOLID 原则
- [ ] 使用适当的设计模式
- [ ] 保持单一职责
- [ ] 依赖抽象而不是具体实现
- [ ] 接口设计合理
- [ ] 代码可扩展性
- [ ] 代码可维护性
- [ ] 代码可测试性
- [ ] 避免过度设计
- [ ] 文档化设计决策

## 📚 相关文档

- [用户服务实现](mdc:Platform.ApiService/Services/UserService.cs)
- [角色服务实现](mdc:Platform.ApiService/Services/RoleService.cs)
- [企业服务实现](mdc:Platform.ApiService/Services/CompanyService.cs)
- [设计模式参考](https://refactoring.guru/design-patterns)
