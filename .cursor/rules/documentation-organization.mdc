---
alwaysApply: true
description: 文档组织和存放规范
---

# 文档组织规范

## 📁 文档存放规则

**所有说明文档、指南、报告等 Markdown 文件必须放在 `docs` 目录内的相应子目录中。**

## ✅ 正确的文档存放位置

### docs 目录分类

| 类别 | 目录 | 用途 |
|------|------|------|
| **新功能** | `docs/features/` | 新增功能的说明文档 |
| **问题修复** | `docs/bugfixes/` | Bug 修复和问题排查指南 |
| **报告总结** | `docs/reports/` | 项目报告和阶段总结 |
| **优化文档** | `docs/optimization/` | 性能和业务逻辑优化文档 |
| **权限系统** | `docs/permissions/` | 权限相关的所有文档 |
| **重构文档** | `docs/refactoring/` | 代码重构相关文档 |
| **中间件** | `docs/middleware/` | 中间件设计和实现文档 |
| **软删除** | `docs/soft-delete/` | 软删除机制相关文档 |

### 示例

```bash
# ✅ 正确 - 新功能文档
docs/features/USER-NOTIFICATION-FEATURE.md

# ✅ 正确 - 问题修复文档
docs/bugfixes/AUTH-TOKEN-FIX.md

# ✅ 正确 - 优化报告
docs/optimization/PERFORMANCE-OPTIMIZATION.md

# ✅ 正确 - 项目报告
docs/reports/SPRINT-SUMMARY.md
```

## ❌ 禁止的文档存放位置

### 不允许的做法

```bash
# ❌ 禁止 - 在项目根目录创建文档
/FEATURE-GUIDE.md
/BUG-FIX-REPORT.md
/OPTIMIZATION-PLAN.md

# ❌ 禁止 - 在代码目录创建通用文档
/Platform.ApiService/API-GUIDE.md
/Platform.Admin/COMPONENT-GUIDE.md
```

## ⚠️ 例外情况

以下文件可以保留在特定位置：

### 1. 项目主 README
```bash
# ✅ 允许 - 项目根目录的主 README
/README.md
```

### 2. 页面级文档
```bash
# ✅ 允许 - 特定页面或功能模块的说明
/Platform.Admin/src/pages/user-management/README.md
/Platform.ApiService/Controllers/README.md
```

### 3. 配置说明
```bash
# ✅ 允许 - 与配置文件同目录的说明
/Platform.Admin/biome.json
/Platform.Admin/BIOME-CONFIG.md
```

## 📝 文档命名规范

### 命名约定

- **功能文档**: `FEATURE-NAME.md` 或 `NAME-FEATURE.md`
- **修复文档**: `BUGFIX-ISSUE.md` 或 `ISSUE-FIX.md`
- **指南文档**: `NAME-GUIDE.md` 或 `GUIDE-NAME.md`
- **报告文档**: `NAME-REPORT.md` 或 `NAME-COMPLETE.md`
- **索引文档**: `INDEX.md` 或 `README.md`

### 示例

```bash
# ✅ 好的命名
docs/features/NOTIFICATION-SYSTEM-FEATURE.md
docs/bugfixes/TOKEN-EXPIRY-FIX.md
docs/reports/OPTIMIZATION-COMPLETE.md
docs/optimization/QUICK-REFERENCE.md

# ❌ 不好的命名
docs/features/notification.md          # 太简短
docs/bugfixes/fix-some-bug.md         # 不够描述性
docs/reports/report1.md                # 无意义的名称
```

## 📖 创建新文档的流程

### 1. 确定文档类别

根据文档用途选择目录：
- 新功能说明 → `docs/features/`
- Bug 修复 → `docs/bugfixes/`
- 优化相关 → `docs/optimization/`
- 项目报告 → `docs/reports/`
- 其他分类...

### 2. 使用规范命名

```bash
# 功能文档模板
docs/features/FEATURE-NAME.md

# 修复文档模板
docs/bugfixes/ISSUE-NAME-FIX.md
```

### 3. 使用文档模板

```markdown
# 标题

## 📋 概述
简要说明

## ✨ 实现内容
详细内容

## 🔧 技术细节
技术实现

## ✅ 测试验证
测试方法

## 📚 相关文档
- [相关文档1](../category/DOC1.md)
- [相关文档2](../category/DOC2.md)
```

### 4. 更新索引

创建或更新文档后，在 [docs/INDEX.md](mdc:docs/INDEX.md) 中添加链接。

## 🔍 查找文档

### 方法 1: 查看索引
打开 [docs/INDEX.md](mdc:docs/INDEX.md) 查看完整的文档列表和导航。

### 方法 2: 按目录浏览
```bash
ls docs/features/      # 查看功能文档
ls docs/bugfixes/      # 查看修复文档
ls docs/optimization/  # 查看优化文档
```

### 方法 3: 关键词搜索
```bash
grep -r "关键词" docs/
```

## 🎯 维护要点

### 新增文档时
1. ✅ 确定正确的分类目录
2. ✅ 使用规范的文件名
3. ✅ 遵循文档模板格式
4. ✅ 更新 docs/INDEX.md

### 修改文档时
1. ✅ 在文档中标注修改日期
2. ✅ 保持格式一致性
3. ✅ 更新相关链接

### 删除文档时
1. ✅ 检查是否有其他文档引用
2. ✅ 从 INDEX.md 中移除
3. ✅ 考虑是否需要归档而非删除

## 📋 文档审查清单

在创建或修改文档时检查：

- [ ] 文档是否在正确的 docs 子目录中
- [ ] 文件名是否符合命名规范
- [ ] 内容是否使用了文档模板
- [ ] 是否添加了表情符号和格式化
- [ ] 是否包含相关文档链接
- [ ] 是否更新了 INDEX.md
- [ ] 代码示例是否正确
- [ ] 链接是否有效

## 🚫 常见错误

### ❌ 错误 1: 在根目录创建文档
```bash
# 错误
/PROJECT-GUIDE.md

# 正确
docs/reports/PROJECT-GUIDE.md
```

### ❌ 错误 2: 在代码目录创建通用文档
```bash
# 错误
Platform.ApiService/API-DOCUMENTATION.md

# 正确
docs/features/API-DOCUMENTATION.md
```

### ❌ 错误 3: 文档分类错误
```bash
# 错误 - 功能文档放在 bugfixes 目录
docs/bugfixes/NEW-FEATURE.md

# 正确
docs/features/NEW-FEATURE.md
```

### ❌ 错误 4: 文件命名不规范
```bash
# 错误
docs/features/feature1.md
docs/bugfixes/fix.md

# 正确
docs/features/USER-PROFILE-FEATURE.md
docs/bugfixes/AUTH-ERROR-FIX.md
```

## 📚 相关资源

- [文档总索引](mdc:docs/INDEX.md)
- [项目主 README](mdc:README.md)
- [文档整理报告](mdc:docs/reports/DOCUMENTATION-ORGANIZED.md)

## 🎯 记住

**关键原则**：保持文档组织有序，方便团队成员查找和维护。所有说明性文档都应该在 docs 目录中有明确的位置。

