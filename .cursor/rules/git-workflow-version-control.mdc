---
description: Git 工作流和版本控制规范
globs: *.md,*.txt,.gitignore,.gitattributes
---

# Git 工作流和版本控制规范

## 🎯 核心原则

**使用规范的 Git 工作流，确保代码质量和团队协作效率**

## 🌿 分支策略

### Git Flow 工作流
```bash
# ✅ 正确：分支结构
main                    # 生产环境分支
├── develop            # 开发环境分支
├── feature/user-auth  # 功能分支
├── hotfix/critical-bug # 热修复分支
└── release/v1.2.0     # 发布分支
```

### 分支命名规范
```bash
# ✅ 正确：分支命名
feature/user-authentication    # 功能分支
bugfix/login-error-handling    # Bug 修复分支
hotfix/security-vulnerability # 热修复分支
release/v1.2.0                 # 发布分支
chore/update-dependencies      # 维护分支
docs/api-documentation         # 文档分支
```

### 分支创建和切换
```bash
# ✅ 正确：创建功能分支
git checkout develop
git pull origin develop
git checkout -b feature/user-profile-management

# ✅ 正确：创建热修复分支
git checkout main
git pull origin main
git checkout -b hotfix/critical-security-issue
```

## 📝 提交信息规范

### 提交信息格式
```bash
# ✅ 正确：提交信息格式
<type>(<scope>): <subject>

<body>

<footer>
```

### 提交类型
```bash
# ✅ 正确的提交类型
feat:     新功能
fix:      Bug 修复
docs:     文档更新
style:    代码格式调整（不影响功能）
refactor: 代码重构
test:     测试相关
chore:    构建过程或辅助工具的变动
perf:     性能优化
ci:       CI/CD 相关
build:    构建系统或外部依赖的变动
```

### 提交示例
```bash
# ✅ 正确：功能提交
feat(auth): 添加用户注册功能

- 实现用户注册 API 端点
- 添加邮箱验证功能
- 集成 JWT 认证
- 添加密码强度验证

Closes #123

# ✅ 正确：Bug 修复提交
fix(user): 修复用户列表分页问题

修复用户列表在第二页后无法正确显示的问题。
问题原因：分页参数传递错误。

Fixes #456

# ✅ 正确：文档提交
docs(api): 更新 API 文档

- 添加用户管理 API 文档
- 更新认证流程说明
- 添加错误码对照表

# ✅ 正确：重构提交
refactor(service): 重构用户服务层

- 提取用户验证逻辑到独立服务
- 简化用户创建流程
- 提高代码可测试性

# ✅ 正确：性能优化提交
perf(database): 优化用户查询性能

- 添加用户表复合索引
- 优化分页查询 SQL
- 减少数据库连接数

性能提升：查询时间从 200ms 降低到 50ms
```

## 🔄 工作流程

### 功能开发流程
```bash
# 1. 创建功能分支
git checkout develop
git pull origin develop
git checkout -b feature/user-profile-management

# 2. 开发功能
git add .
git commit -m "feat(user): 添加用户资料编辑功能"

# 3. 推送分支
git push origin feature/user-profile-management

# 4. 创建 Pull Request
# 在 GitHub/GitLab 上创建 PR，目标分支为 develop

# 5. 代码审查和合并
# 审查通过后，合并到 develop 分支
```

### Bug 修复流程
```bash
# 1. 创建 Bug 修复分支
git checkout develop
git pull origin develop
git checkout -b bugfix/login-validation-error

# 2. 修复 Bug
git add .
git commit -m "fix(auth): 修复登录验证错误处理"

# 3. 推送分支
git push origin bugfix/login-validation-error

# 4. 创建 Pull Request
# 目标分支为 develop
```

### 热修复流程
```bash
# 1. 创建热修复分支
git checkout main
git pull origin main
git checkout -b hotfix/critical-security-issue

# 2. 修复问题
git add .
git commit -m "fix(security): 修复关键安全漏洞"

# 3. 推送分支
git push origin hotfix/critical-security-issue

# 4. 创建 Pull Request
# 目标分支为 main

# 5. 合并到 main 后，同步到 develop
git checkout develop
git merge main
git push origin develop
```

## 📋 Pull Request 规范

### PR 标题格式
```markdown
# ✅ 正确：PR 标题格式
feat(user): 添加用户资料管理功能
fix(auth): 修复登录验证问题
docs(api): 更新 API 文档
refactor(service): 重构用户服务层
```

### PR 描述模板
```markdown
## 📋 变更概述
简要描述本次变更的内容和目的

## ✨ 变更内容
- [ ] 新增功能：用户资料编辑
- [ ] 修复问题：登录验证错误处理
- [ ] 性能优化：数据库查询优化
- [ ] 文档更新：API 接口文档

## 🔧 技术细节
详细说明技术实现方案

## 🧪 测试验证
- [ ] 单元测试通过
- [ ] 集成测试通过
- [ ] 手动测试验证
- [ ] 性能测试通过

## 📸 截图/演示
如果有 UI 变更，请提供截图或演示

## 🔗 相关链接
- 相关 Issue: #123
- 相关文档: [API 文档](link)
- 设计稿: [Figma 链接](link)

## ✅ 检查清单
- [ ] 代码符合项目规范
- [ ] 添加了必要的测试
- [ ] 更新了相关文档
- [ ] 通过了代码审查
- [ ] 没有破坏性变更
```

## 🔍 代码审查规范

### 审查要点
```markdown
## 🎯 代码质量
- [ ] 代码符合项目编码规范
- [ ] 函数和类职责单一
- [ ] 变量和函数命名清晰
- [ ] 没有重复代码
- [ ] 错误处理完善

## 🔒 安全性
- [ ] 输入验证完整
- [ ] 权限检查正确
- [ ] 敏感信息保护
- [ ] SQL 注入防护
- [ ] XSS 防护

## 🏗️ 架构设计
- [ ] 符合项目架构原则
- [ ] 依赖关系合理
- [ ] 接口设计清晰
- [ ] 扩展性良好
- [ ] 可测试性强

## 📚 文档和测试
- [ ] 代码注释完整
- [ ] API 文档更新
- [ ] 单元测试覆盖
- [ ] 集成测试通过
- [ ] 用户文档更新
```

### 审查流程
```bash
# 1. 审查者检查代码
# 2. 提出修改建议
# 3. 开发者修改代码
# 4. 重新审查
# 5. 审查通过后合并
```

## 🏷️ 版本标签规范

### 语义化版本控制
```bash
# ✅ 正确：版本号格式
MAJOR.MINOR.PATCH

# 示例
1.0.0    # 初始版本
1.1.0    # 新功能
1.1.1    # Bug 修复
2.0.0    # 破坏性变更
```

### 标签创建
```bash
# ✅ 正确：创建版本标签
git tag -a v1.2.0 -m "Release version 1.2.0"
git push origin v1.2.0

# ✅ 正确：创建预发布标签
git tag -a v1.3.0-beta.1 -m "Beta release 1.3.0-beta.1"
git push origin v1.3.0-beta.1
```

## 🔧 Git 配置

### 全局配置
```bash
# ✅ 正确：Git 全局配置
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --global core.editor "code --wait"
git config --global init.defaultBranch main
git config --global pull.rebase false
```

### 项目配置
```bash
# ✅ 正确：项目特定配置
git config user.name "Project Name"
git config user.email "project@example.com"
git config core.autocrlf input  # Windows
git config core.autocrlf false # Linux/Mac
```

### .gitignore 配置
```gitignore
# ✅ 正确：.gitignore 配置
# 依赖文件
node_modules/
packages/*/node_modules/

# 构建输出
dist/
build/
out/

# 环境配置
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# 日志文件
*.log
logs/

# 临时文件
*.tmp
*.temp
.DS_Store
Thumbs.db

# IDE 配置
.vscode/
.idea/
*.swp
*.swo

# 测试覆盖率
coverage/
.nyc_output/

# 数据库文件
*.db
*.sqlite
*.sqlite3
```

### .gitattributes 配置
```gitattributes
# ✅ 正确：.gitattributes 配置
# 文本文件
*.cs text eol=crlf
*.ts text eol=lf
*.tsx text eol=lf
*.js text eol=lf
*.jsx text eol=lf
*.json text eol=lf
*.md text eol=lf

# 二进制文件
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary
*.ico binary
*.pdf binary

# 语言检测
*.cs linguist-language=C#
*.ts linguist-language=TypeScript
*.tsx linguist-language=TypeScript
```

## 🚀 自动化工作流

### GitHub Actions 配置
```yaml
# ✅ 正确：CI/CD 工作流
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore
      
      - name: Test
        run: dotnet test --no-build --verbosity normal

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint
```

## 📋 Git 工作流检查清单

### 开发前
- [ ] 确保本地代码是最新的
- [ ] 创建合适的分支
- [ ] 遵循分支命名规范

### 开发中
- [ ] 频繁提交，保持提交原子性
- [ ] 编写清晰的提交信息
- [ ] 遵循代码规范

### 提交前
- [ ] 运行测试确保通过
- [ ] 检查代码质量
- [ ] 更新相关文档

### 合并前
- [ ] 创建 Pull Request
- [ ] 通过代码审查
- [ ] 解决所有冲突
- [ ] 确保 CI/CD 通过

## 📚 相关资源

- [Git 官方文档](https://git-scm.com/doc)
- [GitHub Flow](https://guides.github.com/introduction/flow/)
- [语义化版本控制](https://semver.org/lang/zh-CN/)
- [约定式提交](https://www.conventionalcommits.org/zh-hans/)

## 🎯 记住

**良好的 Git 工作流是团队协作的基础**

- 保持提交信息清晰和一致
- 使用合适的分支策略
- 重视代码审查过程
- 遵循版本控制规范
- 持续改进工作流程
