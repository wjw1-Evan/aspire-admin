---
alwaysApply: true
---
# 全局菜单架构规范

## 🎯 核心原则

**菜单是全局系统资源，所有企业共享相同菜单，通过权限控制显示**

## ✅ 正确的菜单管理方式

### 菜单创建

```csharp
// ✅ 在系统初始化时创建全局菜单
// DatabaseInitializerService.cs
private async Task CreateSystemMenusAsync()
{
    // 检查是否已存在
    var existingCount = await menus.CountDocumentsAsync();
    if (existingCount > 0) return;
    
    // 创建全局菜单（无 CompanyId）
    var welcomeMenu = new Menu
    {
        Name = "welcome",
        Title = "欢迎",
        Path = "/welcome",
        Component = "./Welcome",
        Icon = "smile",
        Permissions = new List<string>(),  // 无权限要求
        // ✅ 无 CompanyId 字段
    };
    
    await menus.InsertOneAsync(welcomeMenu);
}
```

### 角色关联菜单

```csharp
// ✅ 角色通过 MenuIds 控制用户可见菜单
var adminRole = new Role
{
    Name = "管理员",
    CompanyId = company.Id,  // ✅ 角色属于企业
    MenuIds = allMenuIds,    // ✅ 包含所有菜单ID
    PermissionIds = allPermissionIds
};
```

### 菜单权限配置

```csharp
// ✅ 菜单可以定义所需权限
new Menu
{
    Name = "user-management",
    Title = "用户管理",
    Path = "/system/user-management",
    Permissions = new List<string> { "user:read" },  // 需要用户查看权限
    // ...
}
```

## ❌ 禁止的做法

### 不要在用户注册时创建菜单

```csharp
// ❌ 禁止：用户注册时创建菜单
CreatePersonalCompanyAsync()
{
    // ...
    var menus = CreateDefaultMenus(company.Id);  // ❌ 不要这样做
    await _menus.InsertManyAsync(menus);
}

// ✅ 正确：菜单在系统初始化时已创建，无需重复创建
```

### 不要为菜单添加 CompanyId

```csharp
// ❌ 禁止：Menu 有 CompanyId
public class Menu : MultiTenantEntity  // ❌ 不要继承 MultiTenantEntity

// ✅ 正确：Menu 是全局资源
public class Menu : BaseEntity  // ✅ 不包含 CompanyId
```

### 不要提供菜单管理界面

```csharp
// ❌ 禁止：提供菜单的 CRUD API
[HttpPost]
public async Task<IActionResult> CreateMenu(...)  // ❌ 用户不能创建菜单

[HttpPut("{id}")]
public async Task<IActionResult> UpdateMenu(...)  // ❌ 用户不能修改菜单

[HttpDelete("{id}")]
public async Task<IActionResult> DeleteMenu(...)  // ❌ 用户不能删除菜单

// ✅ 正确：只提供查询接口
[HttpGet("user")]
public async Task<IActionResult> GetUserMenus()  // ✅ 查询用户可见菜单
```

### 不要使用 BaseRepository 查询菜单

```csharp
// ❌ 错误：BaseRepository 会尝试过滤 CompanyId
private readonly BaseRepository<Menu> _menuRepository;

public MenuService(...)
{
    _menuRepository = new BaseRepository<Menu>(database, "menus", ...);  // ❌ 会报错
}

// ✅ 正确：直接使用 IMongoCollection
private readonly IMongoCollection<Menu> _menus;

public MenuService(...)
{
    _menus = database.GetCollection<Menu>("menus");  // ✅ 全局查询
}
```

### 不要在 routes.ts 中定义业务菜单

```typescript
// ❌ 禁止：在 routes.ts 中定义业务菜单
export default [
  {
    path: '/welcome',
    name: 'welcome',
    icon: 'smile',  // ❌ 不要定义菜单属性
    component: './Welcome',
  }
];

// ✅ 正确：只定义路由映射
export default [
  {
    path: '/welcome',
    component: './Welcome',
    hideInMenu: true,  // ✅ 隐藏静态菜单，使用数据库菜单
  }
];
```

### 不要使用静态路由作为菜单后备

```typescript
// ❌ 禁止：使用 routes.ts 作为菜单后备
menuDataRender: (menuData) => {
  if (currentUser?.menus?.length > 0) {
    return 数据库菜单;
  }
  return menuData;  // ❌ 不要返回静态路由作为后备
}

// ✅ 正确：只使用数据库菜单
menuDataRender: () => {
  if (currentUser?.menus?.length > 0) {
    return 数据库菜单;
  }
  console.warn('⚠️ 数据库中没有菜单');
  return [];  // ✅ 明确返回空，暴露问题
}
```

## 📋 菜单开发清单

### 添加新菜单的步骤

- [ ] 在 [DatabaseInitializerService.cs](mdc:Platform.ApiService/Services/DatabaseInitializerService.cs) 中添加菜单定义
- [ ] 创建对应的前端页面组件
- [ ] 在 [routes.ts](mdc:Platform.Admin/config/routes.ts) 中添加路由映射（hideInMenu: true）
- [ ] 在 [PermissionService.cs](mdc:Platform.ApiService/Services/PermissionService.cs) 中添加对应权限资源（如需要）
- [ ] 清空数据库或手动插入菜单到数据库
- [ ] 测试菜单显示和权限控制

### 修改现有菜单

- [ ] 修改 [DatabaseInitializerService.cs](mdc:Platform.ApiService/Services/DatabaseInitializerService.cs) 中的菜单定义
- [ ] 清空数据库重新初始化
- [ ] 或手动更新数据库中的菜单记录
- [ ] 测试验证

## 🔍 菜单显示机制

### 两层控制

```
1. MenuIds（粗粒度）
   └─ 控制用户能看到哪些菜单项
   
2. Permissions（细粒度）
   └─ 控制菜单内的功能权限（增删改查）
```

### 示例

```csharp
// 角色配置
var role = new Role
{
    MenuIds = ["user-management-id"],  // 可以看到"用户管理"菜单
    PermissionIds = ["user:read"]      // 只能查看，不能增删改
};

// 用户看到的效果：
// ✅ 左侧显示"用户管理"菜单（MenuIds 控制）
// ✅ 能进入用户列表页面
// ✅ 能查看用户列表（user:read 权限）
// ❌ 没有"新建"按钮（无 user:create 权限）
// ❌ 没有"编辑"按钮（无 user:update 权限）
```

## 🗄️ 数据库结构

### menus 集合（全局资源）

```javascript
{
  _id: ObjectId("..."),
  name: "user-management",      // 全局唯一
  title: "用户管理",
  path: "/system/user-management",
  component: "./user-management",
  icon: "user",
  parentId: "system_menu_id",
  permissions: ["user:read"],   // 需要的权限
  sortOrder: 1,
  isEnabled: true,
  isDeleted: false,
  createdAt: ISODate("..."),
  updateAt: ISODate("...")
  // ❌ 无 companyId 字段
}
```

### roles 集合（企业资源）

```javascript
{
  _id: ObjectId("..."),
  name: "管理员",
  companyId: "company_123",        // ✅ 有 companyId
  menuIds: ["menu1", "menu2"],     // 可访问的全局菜单ID
  permissionIds: ["perm1", ...],
  isDeleted: false
}
```

## ⚠️ 关键注意事项

### 1. Menu 模型必须继承 BaseEntity

```csharp
// ✅ 正确
public class Menu : BaseEntity, INamedEntity
{
    // 无 CompanyId
}

// ❌ 错误
public class Menu : MultiTenantEntity  // 会自动添加 CompanyId
```

### 2. MenuService 不使用 BaseRepository

```csharp
// ✅ 正确：直接查询，无 CompanyId 过滤
private readonly IMongoCollection<Menu> _menus;
_menus = database.GetCollection<Menu>("menus");

// ❌ 错误：BaseRepository 会尝试过滤 CompanyId
private readonly BaseRepository<Menu> _menuRepository;
```

### 3. 菜单索引不包含 CompanyId

```csharp
// ✅ 正确：菜单索引
db.menus.createIndex({ name: 1 }, { unique: true })          // name 全局唯一
db.menus.createIndex({ parentId: 1, sortOrder: 1 })
db.menus.createIndex({ isDeleted: 1, isEnabled: 1 })

// ❌ 错误：不要包含 companyId
db.menus.createIndex({ companyId: 1, name: 1 })  // 菜单无 companyId
```

### 4. routes.ts 必须保留路由映射

```typescript
// ✅ 必须保留：UmiJS 需要知道 path → component 映射
{ path: '/welcome', component: './Welcome', hideInMenu: true }

// ❌ 不能删除 routes.ts
// 否则 UmiJS 无法渲染页面组件
```

### 5. 数据库菜单是强依赖

- 系统初始化必须成功创建菜单
- 菜单缺失会导致用户看不到任何菜单
- 必须监控初始化日志

## 🧪 验证菜单架构

### 检查菜单是否正确

```bash
# 1. 检查菜单数量
mongo aspire-admin --eval "db.menus.countDocuments()"
# 应该返回 6

# 2. 检查菜单是否有 companyId
mongo aspire-admin --eval "db.menus.findOne({}, {companyId: 1})"
# companyId 字段应该不存在

# 3. 检查菜单权限配置
mongo aspire-admin --eval "db.menus.find({}, {name: 1, permissions: 1}).pretty()"
```

### 检查用户菜单显示

```bash
# 1. 登录系统
# 2. 打开浏览器控制台
# 3. 应该看到："✅ 使用数据库菜单"
# 4. 不应该看到："Using default menus"
```

## 📚 相关文档

- [全局菜单架构设计](mdc:docs/features/GLOBAL-MENU-ARCHITECTURE.md)
- [菜单渲染机制](mdc:docs/features/MENU-RENDERING-MECHANISM.md)
- [完全动态菜单架构](mdc:docs/features/DYNAMIC-MENU-ONLY.md)
- [DatabaseInitializerService](mdc:Platform.ApiService/Services/DatabaseInitializerService.cs)
- [Menu 模型](mdc:Platform.ApiService/Models/MenuModels.cs)

## 🎯 记住

1. **全局资源** - Menu 无 CompanyId，所有企业共享
2. **系统初始化** - 在 DatabaseInitializerService 中创建
3. **不可管理** - 用户不能创建/修改/删除菜单
4. **权限控制** - 通过 Role.MenuIds 和 Menu.Permissions 控制显示
5. **单一数据源** - 100% 从数据库加载，routes.ts 只是路由映射
6. **明确失败** - 菜单缺失时返回空，不使用静态路由后备

