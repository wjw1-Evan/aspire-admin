---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 日志记录和监控规范
---
# 日志记录和监控规范

## 🎯 核心原则

### 使用统一的日志记录和监控机制，确保系统可观测性和问题排查能力

## ✅ 日志记录架构

### 日志服务接口

```csharp
// Platform.ServiceDefaults/Services/ILoggingService.cs
public interface ILoggingService
{
    void LogInformation(string message, params object[] args);
    void LogWarning(string message, params object[] args);
    void LogError(string message, Exception? exception = null, params object[] args);
    void LogDebug(string message, params object[] args);
    void LogTrace(string message, params object[] args);
    
    void LogOperation(string operation, string? entityId = null, object? data = null);
    void LogSecurityEvent(string eventType, string? userId = null, object? data = null);
    void LogPerformance(string operation, long elapsedMs, object? data = null);
}

public class LoggingService : ILoggingService
{
    private readonly ILogger<LoggingService> _logger;
    private readonly ITenantContext _tenantContext;

    public LoggingService(ILogger<LoggingService> logger, ITenantContext tenantContext)
    {
        _logger = logger;
        _tenantContext = tenantContext;
    }

    public void LogInformation(string message, params object[] args)
    {
        _logger.LogInformation(message, args);
    }

    public void LogWarning(string message, params object[] args)
    {
        _logger.LogWarning(message, args);
    }

    public void LogError(string message, Exception? exception = null, params object[] args)
    {
        if (exception != null)
        {
            _logger.LogError(exception, message, args);
        }
        else
        {
            _logger.LogError(message, args);
        }
    }

    public void LogDebug(string message, params object[] args)
    {
        _logger.LogDebug(message, args);
    }

    public void LogTrace(string message, params object[] args)
    {
        _logger.LogTrace(message, args);
    }

    public void LogOperation(string operation, string? entityId = null, object? data = null)
    {
        var userId = _tenantContext.GetCurrentUserId();
        var username = _tenantContext.GetCurrentUsername();
        var companyId = _tenantContext.GetCurrentCompanyId();

        _logger.LogInformation("操作: {Operation}, 用户: {UserId}, 用户名: {Username}, 企业: {CompanyId}, 实体ID: {EntityId}, 数据: {@Data}",
            operation, userId, username, companyId, entityId, data);
    }

    public void LogSecurityEvent(string eventType, string? userId = null, object? data = null)
    {
        var currentUserId = _tenantContext.GetCurrentUserId();
        var currentUsername = _tenantContext.GetCurrentUsername();
        var companyId = _tenantContext.GetCurrentCompanyId();

        _logger.LogWarning("安全事件: {EventType}, 用户: {UserId}, 用户名: {Username}, 企业: {CompanyId}, 目标用户: {TargetUserId}, 数据: {@Data}",
            eventType, currentUserId, currentUsername, companyId, userId, data);
    }

    public void LogPerformance(string operation, long elapsedMs, object? data = null)
    {
        var userId = _tenantContext.GetCurrentUserId();
        var companyId = _tenantContext.GetCurrentCompanyId();

        _logger.LogInformation("性能监控: {Operation}, 耗时: {ElapsedMs}ms, 用户: {UserId}, 企业: {CompanyId}, 数据: {@Data}",
            operation, elapsedMs, userId, companyId, data);
    }
}
```

### 结构化日志记录

```csharp
// Platform.ServiceDefaults/Extensions/StructuredLoggingExtensions.cs
public static class StructuredLoggingExtensions
{
    /// <summary>
    /// 记录用户操作日志
    /// </summary>
    public static void LogUserOperation(this ILogger logger, string operation, string userId, string? entityId = null, object? data = null)
    {
        logger.LogInformation("用户操作: {Operation}, 用户ID: {UserId}, 实体ID: {EntityId}, 数据: {@Data}",
            operation, userId, entityId, data);
    }

    /// <summary>
    /// 记录数据库操作日志
    /// </summary>
    public static void LogDatabaseOperation(this ILogger logger, string operation, string collection, string? entityId = null, long elapsedMs = 0)
    {
        logger.LogInformation("数据库操作: {Operation}, 集合: {Collection}, 实体ID: {EntityId}, 耗时: {ElapsedMs}ms",
            operation, collection, entityId, elapsedMs);
    }

    /// <summary>
    /// 记录API请求日志
    /// </summary>
    public static void LogApiRequest(this ILogger logger, string method, string path, int statusCode, long elapsedMs, string? userId = null)
    {
        logger.LogInformation("API请求: {Method} {Path}, 状态码: {StatusCode}, 耗时: {ElapsedMs}ms, 用户: {UserId}",
            method, path, statusCode, elapsedMs, userId);
    }

    /// <summary>
    /// 记录安全事件日志
    /// </summary>
    public static void LogSecurityEvent(this ILogger logger, string eventType, string? userId = null, string? ipAddress = null, object? data = null)
    {
        logger.LogWarning("安全事件: {EventType}, 用户: {UserId}, IP: {IpAddress}, 数据: {@Data}",
            eventType, userId, ipAddress, data);
    }

    /// <summary>
    /// 记录性能指标日志
    /// </summary>
    public static void LogPerformanceMetric(this ILogger logger, string metricName, double value, string? unit = null, object? tags = null)
    {
        logger.LogInformation("性能指标: {MetricName}, 值: {Value}, 单位: {Unit}, 标签: {@Tags}",
            metricName, value, unit, tags);
    }
}
```

## 🎯 服务层日志记录

### 用户服务日志记录

```csharp
// ✅ 正确 - 完整的日志记录
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ILoggingService _loggingService;
    private readonly ILogger<UserService> _logger;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        ILoggingService loggingService,
        ILogger<UserService> logger)
    {
        _userFactory = userFactory;
        _loggingService = loggingService;
        _logger = logger;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            _logger.LogInformation("开始创建用户: {Username}, 邮箱: {Email}", request.Username, request.Email);
            
            // 1. 参数验证
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            // 2. 业务验证
            await ValidateCreateUserRequestAsync(request);
            
            // 3. 检查唯一性
            await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Username, request.Username);
            await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Email, request.Email);
            
            // 4. 创建用户实体
            var user = new User
            {
                Username = request.Username.Trim(),
                Email = request.Email.Trim().ToLowerInvariant(),
                CompanyId = _userFactory.GetRequiredCompanyId(),
                CreatedBy = _userFactory.GetCurrentUserId(),
                CreatedAt = DateTime.UtcNow
            };
            
            var createdUser = await _userFactory.CreateAsync(user);
            
            // 5. 记录操作日志
            _loggingService.LogOperation("创建用户", createdUser.Id, new { 
                Username = request.Username, 
                Email = request.Email 
            });
            
            var elapsed = stopwatch.ElapsedMilliseconds;
            _loggingService.LogPerformance("创建用户", elapsed, new { 
                Username = request.Username, 
                UserId = createdUser.Id 
            });
            
            _logger.LogInformation("用户创建成功: {UserId}, 用户名: {Username}, 耗时: {ElapsedMs}ms", 
                createdUser.Id, createdUser.Username, elapsed);
            
            return createdUser;
        }
        catch (ArgumentException ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogWarning(ex, "用户创建参数错误: {Username}, 耗时: {ElapsedMs}ms", 
                request?.Username, elapsed);
            throw;
        }
        catch (InvalidOperationException ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogWarning(ex, "用户创建业务错误: {Username}, 耗时: {ElapsedMs}ms", 
                request?.Username, elapsed);
            throw;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogError(ex, "用户创建失败: {Username}, 耗时: {ElapsedMs}ms", 
                request?.Username, elapsed);
            throw new InvalidOperationException("用户创建失败", ex);
        }
    }

    public async Task<User?> GetUserByIdAsync(string id)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            _logger.LogDebug("开始获取用户: {UserId}", id);
            
            if (string.IsNullOrEmpty(id))
                throw new ArgumentException("用户ID不能为空", nameof(id));

            var user = await _userFactory.GetByIdAsync(id);
            if (user == null)
            {
                var elapsed = stopwatch.ElapsedMilliseconds;
                _logger.LogWarning("用户不存在: {UserId}, 耗时: {ElapsedMs}ms", id, elapsed);
                throw new KeyNotFoundException($"用户 {id} 不存在");
            }

            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogDebug("用户获取成功: {UserId}, 用户名: {Username}, 耗时: {ElapsedMs}ms", 
                user.Id, user.Username, elapsed);
            
            return user;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogError(ex, "获取用户失败: {UserId}, 耗时: {ElapsedMs}ms", id, elapsed);
            throw new InvalidOperationException("获取用户失败", ex);
        }
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            _logger.LogInformation("开始更新用户: {UserId}", request.Id);
            
            // 1. 参数验证
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            if (string.IsNullOrEmpty(request.Id))
                throw new ArgumentException("用户ID不能为空", nameof(request.Id));

            // 2. 获取现有用户
            var existingUser = await _userFactory.GetByIdAsync(request.Id);
            if (existingUser == null)
            {
                var elapsed = stopwatch.ElapsedMilliseconds;
                _logger.LogWarning("用户不存在: {UserId}, 耗时: {ElapsedMs}ms", request.Id, elapsed);
                throw new KeyNotFoundException($"用户 {request.Id} 不存在");
            }

            // 3. 业务验证
            await ValidateUpdateUserRequestAsync(request, existingUser);
            
            // 4. 检查唯一性（如果需要）
            if (!string.IsNullOrEmpty(request.Username) && request.Username != existingUser.Username)
            {
                await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Username, request.Username);
            }
            
            if (!string.IsNullOrEmpty(request.Email) && request.Email != existingUser.Email)
            {
                await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Email, request.Email);
            }

            // 5. 构建更新操作
            var update = _userFactory.CreateUpdateBuilder()
                .SetCurrentTimestamp()
                .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
                .Build();

            if (!string.IsNullOrEmpty(request.Username))
            {
                update = _userFactory.CreateUpdateBuilder()
                    .Set(u => u.Username, request.Username)
                    .SetCurrentTimestamp()
                    .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
                    .Build();
            }

            if (!string.IsNullOrEmpty(request.Email))
            {
                update = _userFactory.CreateUpdateBuilder()
                    .Set(u => u.Email, request.Email)
                    .SetCurrentTimestamp()
                    .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
                    .Build();
            }

            // 6. 执行更新
            var result = await _userFactory.UpdateAsync(existingUser, new OperationContext
            {
                UserId = _userFactory.GetCurrentUserId(),
                Username = _userFactory.GetCurrentUsername(),
                CompanyId = _userFactory.GetCurrentCompanyId(),
                OperationType = OperationType.Update,
                Description = "更新用户信息"
            });

            if (result)
            {
                // 7. 记录操作日志
                _loggingService.LogOperation("更新用户", request.Id, new { 
                    Username = request.Username, 
                    Email = request.Email 
                });
                
                var elapsed = stopwatch.ElapsedMilliseconds;
                _loggingService.LogPerformance("更新用户", elapsed, new { 
                    UserId = request.Id, 
                    Username = request.Username 
                });
                
                _logger.LogInformation("用户更新成功: {UserId}, 耗时: {ElapsedMs}ms", request.Id, elapsed);
            }
            else
            {
                var elapsed = stopwatch.ElapsedMilliseconds;
                _logger.LogWarning("用户更新失败: {UserId}, 耗时: {ElapsedMs}ms", request.Id, elapsed);
            }

            return result;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (InvalidOperationException)
        {
            throw;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogError(ex, "用户更新失败: {UserId}, 耗时: {ElapsedMs}ms", request?.Id, elapsed);
            throw new InvalidOperationException("用户更新失败", ex);
        }
    }

    public async Task<bool> DeleteUserAsync(string id)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            _logger.LogInformation("开始删除用户: {UserId}", id);
            
            if (string.IsNullOrEmpty(id))
                throw new ArgumentException("用户ID不能为空", nameof(id));

            // 1. 检查用户是否存在
            var user = await _userFactory.GetByIdAsync(id);
            if (user == null)
            {
                var elapsed = stopwatch.ElapsedMilliseconds;
                _logger.LogWarning("用户不存在: {UserId}, 耗时: {ElapsedMs}ms", id, elapsed);
                throw new KeyNotFoundException($"用户 {id} 不存在");
            }

            // 2. 业务规则检查
            await ValidateUserDeletionAsync(user);

            // 3. 执行软删除
            var result = await _userFactory.SoftDeleteAsync(id, new OperationContext
            {
                UserId = _userFactory.GetCurrentUserId(),
                Username = _userFactory.GetCurrentUsername(),
                CompanyId = _userFactory.GetCurrentCompanyId(),
                OperationType = OperationType.Delete,
                Description = "删除用户"
            });

            if (result)
            {
                // 4. 记录操作日志
                _loggingService.LogOperation("删除用户", id, new { 
                    Username = user.Username, 
                    Email = user.Email 
                });
                
                var elapsed = stopwatch.ElapsedMilliseconds;
                _loggingService.LogPerformance("删除用户", elapsed, new { 
                    UserId = id, 
                    Username = user.Username 
                });
                
                _logger.LogInformation("用户删除成功: {UserId}, 用户名: {Username}, 耗时: {ElapsedMs}ms", 
                    id, user.Username, elapsed);
            }
            else
            {
                var elapsed = stopwatch.ElapsedMilliseconds;
                _logger.LogWarning("用户删除失败: {UserId}, 耗时: {ElapsedMs}ms", id, elapsed);
            }

            return result;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (InvalidOperationException)
        {
            throw;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogError(ex, "用户删除失败: {UserId}, 耗时: {ElapsedMs}ms", id, elapsed);
            throw new InvalidOperationException("用户删除失败", ex);
        }
    }

    private async Task ValidateCreateUserRequestAsync(CreateUserRequest request)
    {
        if (string.IsNullOrEmpty(request.Username))
            throw new ArgumentException("用户名不能为空", nameof(request.Username));

        if (request.Username.Length < 3 || request.Username.Length > 50)
            throw new ArgumentException("用户名长度必须在3-50个字符之间", nameof(request.Username));

        if (!IsValidUsername(request.Username))
            throw new ArgumentException("用户名只能包含字母、数字和下划线", nameof(request.Username));

        if (string.IsNullOrEmpty(request.Email))
            throw new ArgumentException("邮箱不能为空", nameof(request.Email));

        if (!IsValidEmail(request.Email))
            throw new ArgumentException("邮箱格式不正确", nameof(request.Email));

        if (string.IsNullOrEmpty(request.Password))
            throw new ArgumentException("密码不能为空", nameof(request.Password));

        if (!IsStrongPassword(request.Password))
            throw new ArgumentException("密码必须包含字母、数字和特殊字符，长度至少8位", nameof(request.Password));
    }

    private async Task ValidateUpdateUserRequestAsync(UpdateUserRequest request, User existingUser)
    {
        if (string.IsNullOrEmpty(request.Username) && string.IsNullOrEmpty(request.Email))
            throw new ArgumentException("至少需要更新一个字段");

        if (!string.IsNullOrEmpty(request.Username))
        {
            if (request.Username.Length < 3 || request.Username.Length > 50)
                throw new ArgumentException("用户名长度必须在3-50个字符之间");

            if (!IsValidUsername(request.Username))
                throw new ArgumentException("用户名只能包含字母、数字和下划线");
        }

        if (!string.IsNullOrEmpty(request.Email))
        {
            if (!IsValidEmail(request.Email))
                throw new ArgumentException("邮箱格式不正确");
        }
    }

    private async Task ValidateUserDeletionAsync(User user)
    {
        // 检查用户是否有关联数据
        var hasActivityLogs = await _activityLogs.CountDocumentsAsync(
            Builders<UserActivityLog>.Filter.Eq(al => al.UserId, user.Id)
        ) > 0;

        if (hasActivityLogs)
        {
            throw new InvalidOperationException("用户有活动记录，无法删除");
        }

        // 检查用户是否是企业管理员
        var isAdmin = await _userCompanies.CountDocumentsAsync(
            Builders<UserCompany>.Filter.And(
                Builders<UserCompany>.Filter.Eq(uc => uc.UserId, user.Id),
                Builders<UserCompany>.Filter.Eq(uc => uc.IsAdmin, true)
            )
        ) > 0;

        if (isAdmin)
        {
            throw new InvalidOperationException("企业管理员无法删除");
        }
    }

    private bool IsValidUsername(string username)
    {
        return username.All(c => char.IsLetterOrDigit(c) || c == '_');
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsStrongPassword(string password)
    {
        if (string.IsNullOrEmpty(password) || password.Length < 8)
            return false;

        var hasLetter = password.Any(char.IsLetter);
        var hasDigit = password.Any(char.IsDigit);
        var hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));

        return hasLetter && hasDigit && hasSpecialChar;
    }
}

// ❌ 错误 - 没有日志记录
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 没有日志记录
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };
        
        return await _userFactory.CreateAsync(user);
    }
}
```

## 🎯 监控和指标

### 性能监控

```csharp
// Platform.ServiceDefaults/Services/PerformanceMonitoringService.cs
public interface IPerformanceMonitoringService
{
    void RecordOperationDuration(string operation, long elapsedMs);
    void RecordDatabaseOperation(string operation, string collection, long elapsedMs);
    void RecordApiRequest(string method, string path, int statusCode, long elapsedMs);
    void RecordCustomMetric(string metricName, double value, string? unit = null);
}

public class PerformanceMonitoringService : IPerformanceMonitoringService
{
    private readonly ILogger<PerformanceMonitoringService> _logger;
    private readonly IMetrics _metrics;

    public PerformanceMonitoringService(ILogger<PerformanceMonitoringService> logger, IMetrics metrics)
    {
        _logger = logger;
        _metrics = metrics;
    }

    public void RecordOperationDuration(string operation, long elapsedMs)
    {
        _metrics.Timer($"operation.{operation}.duration").Record(elapsedMs);
        _logger.LogPerformanceMetric($"operation.{operation}.duration", elapsedMs, "ms");
    }

    public void RecordDatabaseOperation(string operation, string collection, long elapsedMs)
    {
        _metrics.Timer($"database.{operation}.duration").Record(elapsedMs);
        _metrics.Counter($"database.{operation}.count").Increment();
        _logger.LogPerformanceMetric($"database.{operation}.duration", elapsedMs, "ms", new { Collection = collection });
    }

    public void RecordApiRequest(string method, string path, int statusCode, long elapsedMs)
    {
        _metrics.Timer($"api.request.duration").Record(elapsedMs);
        _metrics.Counter($"api.request.count").Increment();
        _metrics.Counter($"api.request.status.{statusCode}").Increment();
        _logger.LogPerformanceMetric("api.request.duration", elapsedMs, "ms", new { Method = method, Path = path, StatusCode = statusCode });
    }

    public void RecordCustomMetric(string metricName, double value, string? unit = null)
    {
        _metrics.Gauge(metricName).SetValue(value);
        _logger.LogPerformanceMetric(metricName, value, unit);
    }
}
```

### 健康检查

```csharp
// Platform.ApiService/HealthChecks/UserServiceHealthCheck.cs
public class UserServiceHealthCheck : IHealthCheck
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ILogger<UserServiceHealthCheck> _logger;

    public UserServiceHealthCheck(
        IDatabaseOperationFactory<User> userFactory,
        ILogger<UserServiceHealthCheck> logger)
    {
        _userFactory = userFactory;
        _logger = logger;
    }

    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        try
        {
            var stopwatch = Stopwatch.StartNew();
            
            // 1. 检查数据库连接
            var userCount = await _userFactory.CountAsync();
            
            // 2. 检查性能指标
            var testUser = await _userFactory.FindAsync(null, null, 1);
            var elapsed = stopwatch.ElapsedMilliseconds;
            
            // 3. 评估健康状态
            if (elapsed > 1000) // 超过1秒认为不健康
            {
                _logger.LogWarning("用户服务响应缓慢: {ElapsedMs}ms", elapsed);
                return HealthCheckResult.Unhealthy($"用户服务响应缓慢: {elapsed}ms");
            }
            
            if (userCount < 0)
            {
                _logger.LogError("用户数量异常: {UserCount}", userCount);
                return HealthCheckResult.Unhealthy("用户数量异常");
            }
            
            _logger.LogInformation("用户服务健康检查通过: {UserCount}个用户, 响应时间: {ElapsedMs}ms", userCount, elapsed);
            return HealthCheckResult.Healthy($"用户服务正常: {userCount}个用户, 响应时间: {elapsed}ms");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "用户服务健康检查失败");
            return HealthCheckResult.Unhealthy("用户服务健康检查失败", ex);
        }
    }
}
```

## 🚫 禁止的做法

### 不要忽略日志记录

```csharp
// ❌ 错误 - 忽略日志记录
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 没有日志记录
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };
        
        return await _userFactory.CreateAsync(user);
    }
}

// ✅ 正确 - 完整的日志记录
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            _logger.LogInformation("开始创建用户: {Username}", request.Username);
            
            var user = new User
            {
                Username = request.Username,
                Email = request.Email
            };
            
            var result = await _userFactory.CreateAsync(user);
            
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogInformation("用户创建成功: {UserId}, 耗时: {ElapsedMs}ms", result.Id, elapsed);
            
            return result;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _logger.LogError(ex, "用户创建失败: {Username}, 耗时: {ElapsedMs}ms", request?.Username, elapsed);
            throw;
        }
    }
}
```

### 不要硬编码日志消息

```csharp
// ❌ 错误 - 硬编码日志消息
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        _logger.LogInformation("开始创建用户: " + request.Username); // 硬编码
        // ...
    }
}

// ✅ 正确 - 使用结构化日志
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        _logger.LogInformation("开始创建用户: {Username}", request.Username); // 结构化
        // ...
    }
}
```

### 不要忽略性能监控

```csharp
// ❌ 错误 - 忽略性能监控
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 没有性能监控
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };
        
        return await _userFactory.CreateAsync(user);
    }
}

// ✅ 正确 - 完整的性能监控
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            var user = new User
            {
                Username = request.Username,
                Email = request.Email
            };
            
            var result = await _userFactory.CreateAsync(user);
            
            var elapsed = stopwatch.ElapsedMilliseconds;
            _performanceMonitoring.RecordOperationDuration("CreateUser", elapsed);
            
            return result;
        }
        catch (Exception ex)
        {
            var elapsed = stopwatch.ElapsedMilliseconds;
            _performanceMonitoring.RecordOperationDuration("CreateUser", elapsed);
            throw;
        }
    }
}
```

## 📋 日志记录检查清单

创建或修改服务时检查：

- [ ] 使用统一的日志服务
- [ ] 记录操作开始和结束
- [ ] 记录性能指标
- [ ] 记录错误和异常
- [ ] 使用结构化日志
- [ ] 避免硬编码日志消息
- [ ] 记录安全事件
- [ ] 配置日志级别
- [ ] 添加性能监控
- [ ] 实现健康检查

## 📚 相关文档

- [用户服务实现](mdc:Platform.ApiService/Services/UserService.cs)
- [角色服务实现](mdc:Platform.ApiService/Services/RoleService.cs)
- [企业服务实现](mdc:Platform.ApiService/Services/CompanyService.cs)
- [日志记录服务](mdc:Platform.ServiceDefaults/Services/ILoggingService.cs)
