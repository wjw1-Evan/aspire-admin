---
globs: Platform.App/**/*.tsx,Platform.App/**/*.ts
description: 移动端开发规范和最佳实践
---
# 移动端开发规范

## 🎯 核心原则

### 使用 React Native + Expo 构建跨平台移动应用，遵循移动端最佳实践

## ✅ 组件开发规范

### 基础组件
```tsx
// ✅ 推荐：移动端组件结构
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

interface UserCardProps {
  user: User;
  onPress?: (user: User) => void;
  onEdit?: (user: User) => void;
}

const UserCard: React.FC<UserCardProps> = ({ user, onPress, onEdit }) => {
  const handlePress = () => {
    onPress?.(user);
  };

  const handleEdit = () => {
    onEdit?.(user);
  };

  return (
    <TouchableOpacity style={styles.container} onPress={handlePress}>
      <View style={styles.content}>
        <Text style={styles.name}>{user.username}</Text>
        <Text style={styles.email}>{user.email}</Text>
        <Text style={styles.role}>{user.role}</Text>
      </View>
      <TouchableOpacity onPress={handleEdit} style={styles.editButton}>
        <Ionicons name="pencil" size={20} color="#007AFF" />
      </TouchableOpacity>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    padding: 16,
    marginVertical: 4,
    marginHorizontal: 16,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  content: {
    flex: 1,
  },
  name: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
  },
  email: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  role: {
    fontSize: 12,
    color: '#999',
    marginTop: 2,
  },
  editButton: {
    padding: 8,
  },
});

export default UserCard;
```

### 自定义 Hooks
```tsx
// ✅ 推荐：移动端自定义 Hook
import { useState, useEffect, useCallback } from 'react';
import { Alert } from 'react-native';

const useUserList = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);

  const fetchUsers = useCallback(async (showLoading = true) => {
    if (showLoading) setLoading(true);
    
    try {
      const response = await getUserList();
      setUsers(response.data);
    } catch (error) {
      Alert.alert('错误', '获取用户列表失败');
    } finally {
      setLoading(false);
    }
  }, []);

  const refreshUsers = useCallback(async () => {
    setRefreshing(true);
    await fetchUsers(false);
    setRefreshing(false);
  }, [fetchUsers]);

  const deleteUser = useCallback(async (userId: string) => {
    try {
      await deleteUserById(userId);
      setUsers(prev => prev.filter(user => user.id !== userId));
      Alert.alert('成功', '用户删除成功');
    } catch (error) {
      Alert.alert('错误', '删除用户失败');
    }
  }, []);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  return {
    users,
    loading,
    refreshing,
    fetchUsers,
    refreshUsers,
    deleteUser,
  };
};
```

## 🎨 页面组件规范

### 列表页面
```tsx
// ✅ 推荐：移动端列表页面
import React from 'react';
import {
  View,
  FlatList,
  RefreshControl,
  ActivityIndicator,
  StyleSheet,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import UserCard from '../components/UserCard';

const UserListScreen: React.FC = () => {
  const {
    users,
    loading,
    refreshing,
    refreshUsers,
    deleteUser,
  } = useUserList();

  const handleUserPress = (user: User) => {
    // 导航到用户详情页
    navigation.navigate('UserDetail', { userId: user.id });
  };

  const handleEditUser = (user: User) => {
    // 导航到编辑页面
    navigation.navigate('UserEdit', { userId: user.id });
  };

  const renderUser = ({ item }: { item: User }) => (
    <UserCard
      user={item}
      onPress={handleUserPress}
      onEdit={handleEditUser}
    />
  );

  const renderEmpty = () => (
    <View style={styles.emptyContainer}>
      <Text style={styles.emptyText}>暂无用户数据</Text>
    </View>
  );

  const renderFooter = () => {
    if (!loading) return null;
    return (
      <View style={styles.footer}>
        <ActivityIndicator size="small" color="#007AFF" />
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <FlatList
        data={users}
        renderItem={renderUser}
        keyExtractor={(item) => item.id}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={refreshUsers}
            colors={['#007AFF']}
            tintColor="#007AFF"
          />
        }
        ListEmptyComponent={renderEmpty}
        ListFooterComponent={renderFooter}
        contentContainerStyle={styles.listContent}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  listContent: {
    paddingVertical: 8,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 50,
  },
  emptyText: {
    fontSize: 16,
    color: '#999',
  },
  footer: {
    paddingVertical: 20,
    alignItems: 'center',
  },
});

export default UserListScreen;
```

### 表单页面
```tsx
// ✅ 推荐：移动端表单页面
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const UserFormScreen: React.FC = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (!formData.username || !formData.email || !formData.password) {
      Alert.alert('错误', '请填写所有必填字段');
      return;
    }

    setLoading(true);
    try {
      await createUser(formData);
      Alert.alert('成功', '用户创建成功', [
        { text: '确定', onPress: () => navigation.goBack() },
      ]);
    } catch (error) {
      Alert.alert('错误', '创建用户失败');
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <View style={styles.form}>
          <View style={styles.inputGroup}>
            <Text style={styles.label}>用户名</Text>
            <TextInput
              style={styles.input}
              value={formData.username}
              onChangeText={(text) => setFormData(prev => ({ ...prev, username: text }))}
              placeholder="请输入用户名"
              autoCapitalize="none"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>邮箱</Text>
            <TextInput
              style={styles.input}
              value={formData.email}
              onChangeText={(text) => setFormData(prev => ({ ...prev, email: text }))}
              placeholder="请输入邮箱"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>密码</Text>
            <TextInput
              style={styles.input}
              value={formData.password}
              onChangeText={(text) => setFormData(prev => ({ ...prev, password: text }))}
              placeholder="请输入密码"
              secureTextEntry
            />
          </View>

          <TouchableOpacity
            style={[styles.submitButton, loading && styles.submitButtonDisabled]}
            onPress={handleSubmit}
            disabled={loading}
          >
            <Text style={styles.submitButtonText}>
              {loading ? '创建中...' : '创建用户'}
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  form: {
    padding: 16,
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
  },
  submitButton: {
    backgroundColor: '#007AFF',
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 20,
  },
  submitButtonDisabled: {
    backgroundColor: '#ccc',
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default UserFormScreen;
```

## 🔧 API 服务规范

### 移动端 API 客户端
```tsx
// ✅ 推荐：移动端 API 客户端
import AsyncStorage from '@react-native-async-storage/async-storage';

class MobileApiClient {
  private baseURL: string;
  private token: string | null = null;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
    this.loadToken();
  }

  private async loadToken() {
    try {
      this.token = await AsyncStorage.getItem('auth_token');
    } catch (error) {
      console.error('Failed to load token:', error);
    }
  }

  async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      ...options.headers,
    };

    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (response.status === 401) {
      // Token 过期，清除本地存储
      await AsyncStorage.removeItem('auth_token');
      this.token = null;
      throw new Error('TOKEN_EXPIRED');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }

    return response.json();
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async put<T>(endpoint: string, data: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  async setToken(token: string) {
    this.token = token;
    await AsyncStorage.setItem('auth_token', token);
  }

  async clearToken() {
    this.token = null;
    await AsyncStorage.removeItem('auth_token');
  }
}

// 使用示例
const apiClient = new MobileApiClient('https://api.example.com');

export const getUserList = () => 
  apiClient.get<UserListResponse>('/users');

export const createUser = (data: CreateUserRequest) =>
  apiClient.post<User>('/users', data);
```

## 🎯 导航规范

### Expo Router 配置
```tsx
// ✅ 推荐：使用 Expo Router 进行导航
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen
        name="index"
        options={{
          title: '首页',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="users"
        options={{
          title: '用户管理',
        }}
      />
      <Stack.Screen
        name="user-detail/[id]"
        options={{
          title: '用户详情',
        }}
      />
    </Stack>
  );
}
```

### 页面导航
```tsx
// ✅ 推荐：页面间导航
import { useRouter, useLocalSearchParams } from 'expo-router';

const UserListScreen: React.FC = () => {
  const router = useRouter();

  const handleUserPress = (userId: string) => {
    router.push(`/user-detail/${userId}`);
  };

  const handleCreateUser = () => {
    router.push('/user-form');
  };

  return (
    // 组件内容
  );
};

const UserDetailScreen: React.FC = () => {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();

  const handleEdit = () => {
    router.push(`/user-edit/${id}`);
  };

  return (
    // 组件内容
  );
};
```

## ❌ 避免的做法

### 不要忽略性能优化
```tsx
// ❌ 错误：没有优化的大列表
const UserList = ({ users }: { users: User[] }) => {
  return (
    <ScrollView>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </ScrollView>
  );
};

// ✅ 正确：使用 FlatList 优化性能
const UserList = ({ users }: { users: User[] }) => {
  const renderUser = ({ item }: { item: User }) => (
    <UserCard user={item} />
  );

  return (
    <FlatList
      data={users}
      renderItem={renderUser}
      keyExtractor={(item) => item.id}
      removeClippedSubviews
      maxToRenderPerBatch={10}
      windowSize={10}
    />
  );
};
```

### 不要忽略错误处理
```tsx
// ❌ 错误：没有错误处理
const fetchData = async () => {
  const response = await fetch('/api/data');
  const data = await response.json();
  setData(data);
};

// ✅ 正确：完整的错误处理
const fetchData = async () => {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    setData(data);
  } catch (error) {
    Alert.alert('错误', '获取数据失败');
    console.error('Fetch error:', error);
  }
};
```

## 📚 相关文档

- [React Native 官方文档](https://reactnative.dev/)
- [Expo 文档](https://docs.expo.dev/)
- [Expo Router 文档](https://expo.github.io/router/)
- [React Native 性能优化](https://reactnative.dev/docs/performance)
