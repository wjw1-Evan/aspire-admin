---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 多租户系统开发规范和最佳实践
---
# 多租户系统开发规范和最佳实践

## 🎯 核心原则

### 确保数据隔离、权限控制和租户上下文管理，构建安全可靠的多租户系统

## ✅ 多租户数据隔离

### 数据模型设计

```csharp
// ✅ 正确 - 单一企业关联的多租户实体（Role, Notice, Tag 等）
public class Role : BaseEntity, IEntity, ISoftDeletable, ITimestamped, IMultiTenant
{
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set; } = string.Empty;

    [BsonElement("companyId")]
    public string CompanyId { get; set; } = string.Empty; // ✅ 多租户字段（必须非空）

    [BsonElement("name")]
    public string Name { get; set; } = string.Empty;

    [BsonElement("description")]
    public string Description { get; set; } = string.Empty;

    [BsonElement("isDeleted")]
    public bool IsDeleted { get; set; } = false;

    [BsonElement("createdAt")]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    [BsonElement("updatedAt")]
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
}

// ✅ 正确 - 多企业关联的实体（AppUser 使用 CurrentCompanyId）
public class AppUser : BaseEntity, IEntity, ISoftDeletable, ITimestamped
{
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set; } = string.Empty;

    [BsonElement("username")]
    public string Username { get; set; } = string.Empty;

    [BsonElement("email")]
    public string Email { get; set; } = string.Empty;

    /// <summary>
    /// 当前选中的企业ID（用于数据隔离和菜单权限）
    /// </summary>
    [BsonElement("currentCompanyId")]
    public string? CurrentCompanyId { get; set; }

    /// <summary>
    /// 个人企业ID（注册时自动创建）
    /// </summary>
    [BsonElement("personalCompanyId")]
    public string? PersonalCompanyId { get; set; }

    // ❌ 没有 CompanyId 字段
    // 通过 UserCompany 中间表管理多对多关系

    [BsonElement("isDeleted")]
    public bool IsDeleted { get; set; } = false;

    [BsonElement("createdAt")]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    [BsonElement("updatedAt")]
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
}

// ✅ 正确 - 多租户接口
public interface IMultiTenant
{
    string CompanyId { get; set; }  // 必须非空
}

// ❌ 错误 - AppUser 不应该实现 IMultiTenant
public class AppUser : BaseEntity, IMultiTenant
{
    // ❌ AppUser 不应该实现 IMultiTenant，应该使用 CurrentCompanyId
}
```

### 数据库操作工厂多租户支持

```csharp
// ✅ 正确 - 自动多租户过滤
public class DatabaseOperationFactory<T> : IDatabaseOperationFactory<T> where T : class, IEntity, ISoftDeletable, ITimestamped
{
    private readonly IMongoCollection<T> _collection;
    private readonly ITenantContext _tenantContext;

    public DatabaseOperationFactory(
        IMongoCollection<T> collection,
        ITenantContext tenantContext)
    {
        _collection = collection;
        _tenantContext = tenantContext;
    }

    public async Task<List<T>> FindAsync(FilterDefinition<T>? filter = null, SortDefinition<T>? sort = null, int? limit = null)
    {
        // 自动添加多租户过滤
        var multiTenantFilter = CreateMultiTenantFilter();
        
        if (filter != null)
        {
            multiTenantFilter = Builders<T>.Filter.And(multiTenantFilter, filter);
        }

        var query = _collection.Find(multiTenantFilter);
        
        if (sort != null)
        {
            query = query.Sort(sort);
        }
        
        if (limit.HasValue)
        {
            query = query.Limit(limit.Value);
        }

        return await query.ToListAsync();
    }

    public async Task<T?> GetByIdAsync(string id)
    {
        var filter = Builders<T>.Filter.And(
            Builders<T>.Filter.Eq(x => x.Id, id),
            CreateMultiTenantFilter()
        );

        return await _collection.Find(filter).FirstOrDefaultAsync();
    }

    public async Task<long> CountAsync(FilterDefinition<T>? filter = null)
    {
        var multiTenantFilter = CreateMultiTenantFilter();
        
        if (filter != null)
        {
            multiTenantFilter = Builders<T>.Filter.And(multiTenantFilter, filter);
        }

        return await _collection.CountDocumentsAsync(multiTenantFilter);
    }

    /// <summary>
    /// 创建多租户过滤器（已修复：从数据库读取企业ID，使用正确的MongoDB字段名）
    /// </summary>
    private FilterDefinition<T> CreateMultiTenantFilter()
    {
        // ✅ 从数据库读取当前用户的 CurrentCompanyId（不使用 JWT token）
        var userId = _tenantContext.GetCurrentUserId();
        if (string.IsNullOrEmpty(userId))
        {
            throw new UnauthorizedAccessException("未找到用户信息");
        }
        
        // 从 users 集合读取 currentCompanyId
        var users = _database.GetCollection<BsonDocument>("users");
        var doc = users.Find(...).Project(...).FirstOrDefault();
        var companyId = doc?.GetValue("currentCompanyId", BsonNull.Value);
        
        if (string.IsNullOrEmpty(companyId?.AsString))
        {
            throw new UnauthorizedAccessException("未找到企业信息");
        }

        // ✅ 使用正确的 MongoDB 字段名（从 BsonElement 特性获取）
        var companyIdProperty = typeof(T).GetProperty("CompanyId");
        var bsonElementAttr = companyIdProperty?.GetCustomAttribute<Bson.Serialization.Attributes.BsonElementAttribute>();
        var fieldName = bsonElementAttr?.ElementName ?? "companyId";  // 统一使用小写 camelCase
        
        // 只返回当前企业的数据
        return Builders<T>.Filter.Eq(fieldName, companyId.AsString);
    }

    // 跨租户查询方法（特殊场景使用）
    public async Task<List<T>> FindWithoutTenantFilterAsync(FilterDefinition<T>? filter = null, SortDefinition<T>? sort = null, int? limit = null)
    {
        var query = _collection.Find(filter ?? Builders<T>.Filter.Empty);
        
        if (sort != null)
        {
            query = query.Sort(sort);
        }
        
        if (limit.HasValue)
        {
            query = query.Limit(limit.Value);
        }

        return await query.ToListAsync();
    }

    public async Task<T?> GetByIdWithoutTenantFilterAsync(string id)
    {
        var filter = Builders<T>.Filter.Eq(x => x.Id, id);
        return await _collection.Find(filter).FirstOrDefaultAsync();
    }
}

// ❌ 错误 - 没有多租户过滤
public class DatabaseOperationFactory<T> : IDatabaseOperationFactory<T> where T : class, IEntity, ISoftDeletable, ITimestamped
{
    public async Task<List<T>> FindAsync(FilterDefinition<T>? filter = null, SortDefinition<T>? sort = null, int? limit = null)
    {
        // 没有多租户过滤，可能返回其他企业的数据
        var query = _collection.Find(filter ?? Builders<T>.Filter.Empty);
        return await query.ToListAsync();
    }
}
```

### 租户上下文管理

```csharp
// ✅ 正确 - 租户上下文服务
public interface ITenantContext
{
    string? GetCurrentUserId();
    string? GetCurrentUsername();
    string? GetCurrentCompanyId();
    string GetRequiredUserId();
    string GetRequiredCompanyId();
}

public class TenantContext : ITenantContext
{
    private readonly IHttpContextAccessor _httpContextAccessor;

    public TenantContext(IHttpContextAccessor httpContextAccessor)
    {
        _httpContextAccessor = httpContextAccessor;
    }

    public string? GetCurrentUserId()
    {
        return _httpContextAccessor.HttpContext?.User?.FindFirst("userId")?.Value;
    }

    public string? GetCurrentUsername()
    {
        return _httpContextAccessor.HttpContext?.User?.FindFirst("username")?.Value;
    }

    public string? GetCurrentCompanyId()
    {
        return _httpContextAccessor.HttpContext?.User?.FindFirst("companyId")?.Value;
    }

    public string GetRequiredUserId()
    {
        var userId = GetCurrentUserId();
        if (string.IsNullOrEmpty(userId))
        {
            throw new UnauthorizedAccessException("未找到用户信息");
        }
        return userId;
    }

    public string GetRequiredCompanyId()
    {
        var companyId = GetCurrentCompanyId();
        if (string.IsNullOrEmpty(companyId))
        {
            throw new UnauthorizedAccessException("未找到企业信息");
        }
        return companyId;
    }
}

// ✅ 正确 - 服务中使用租户上下文（单一企业实体示例：Role）
public class RoleService : IRoleService
{
    private readonly IDatabaseOperationFactory<Role> _roleFactory;
    private readonly ITenantContext _tenantContext;

    public RoleService(
        IDatabaseOperationFactory<Role> roleFactory,
        ITenantContext tenantContext)
    {
        _roleFactory = roleFactory;
        _tenantContext = tenantContext;
    }

    public async Task<Role> CreateRoleAsync(CreateRoleRequest request)
    {
        // 获取当前企业ID
        var companyId = _tenantContext.GetRequiredCompanyId();
        var userId = _tenantContext.GetRequiredUserId();

        var role = new Role
        {
            Name = request.Name,
            Description = request.Description,
            CompanyId = companyId, // ✅ 设置企业ID（单一企业实体）
            CreatedAt = DateTime.UtcNow
        };

        return await _roleFactory.CreateAsync(role);
    }

    public async Task<List<Role>> GetRolesAsync(RoleListRequest request)
    {
        var filterBuilder = _roleFactory.CreateFilterBuilder();

        // ✅ 数据工厂会自动添加企业过滤（因为 Role 实现了 IMultiTenant）
        // 只添加业务过滤条件
        if (!string.IsNullOrEmpty(request.Keyword))
        {
            filterBuilder.Regex(r => r.Name, request.Keyword);
        }

        var filter = filterBuilder.Build();
        var sort = _roleFactory.CreateSortBuilder()
            .Descending(r => r.CreatedAt)
            .Build();

        // ✅ 数据工厂会自动添加企业过滤
        return await _roleFactory.FindAsync(filter, sort, request.Limit);
    }
}

// ✅ 正确 - AppUser 服务（多企业实体，使用 CurrentCompanyId）
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<AppUser> _userFactory;
    private readonly ITenantContext _tenantContext;

    public UserService(
        IDatabaseOperationFactory<AppUser> userFactory,
        ITenantContext tenantContext)
    {
        _userFactory = userFactory;
        _tenantContext = tenantContext;
    }

    public async Task<AppUser> CreateUserAsync(CreateUserRequest request)
    {
        var companyId = _tenantContext.GetRequiredCompanyId();

        var user = new AppUser
        {
            Username = request.Username,
            Email = request.Email,
            CurrentCompanyId = companyId, // ✅ 使用 CurrentCompanyId（多企业实体）
            CreatedAt = DateTime.UtcNow
        };

        return await _userFactory.CreateAsync(user);
    }

    public async Task<List<AppUser>> GetUsersAsync(UserListRequest request)
    {
        // ✅ 手动添加 CurrentCompanyId 过滤（AppUser 不实现 IMultiTenant）
        var currentCompanyId = _tenantContext.GetRequiredCompanyId();
        var filter = _userFactory.CreateFilterBuilder()
            .Equal(u => u.CurrentCompanyId, currentCompanyId)  // ✅ 手动添加过滤
            .Build();

        if (!string.IsNullOrEmpty(request.Keyword))
        {
            var searchFilter = _userFactory.CreateFilterBuilder()
                .Regex(u => u.Username, request.Keyword)
                .Or()
                .Regex(u => u.Email, request.Keyword)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(searchFilter)
                .Build();
        }

        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        return await _userFactory.FindAsync(filter, sort, request.Limit);
    }
}

// ❌ 错误 - 没有使用租户上下文
public class RoleService : IRoleService
{
    public async Task<Role> CreateRoleAsync(CreateRoleRequest request)
    {
        var role = new Role
        {
            Name = request.Name,
            Description = request.Description,
            // ❌ 没有设置 CompanyId
        };

        return await _roleFactory.CreateAsync(role);
    }
}
```

## 🎯 权限控制

### 基于角色的权限控制

```csharp
// ✅ 正确 - 角色权限控制
public class RoleService : IRoleService
{
    private readonly IDatabaseOperationFactory<Role> _roleFactory;
    private readonly ITenantContext _tenantContext;

    public RoleService(
        IDatabaseOperationFactory<Role> roleFactory,
        ITenantContext tenantContext)
    {
        _roleFactory = roleFactory;
        _tenantContext = tenantContext;
    }

    public async Task<Role> CreateRoleAsync(CreateRoleRequest request)
    {
        // 检查权限
        var currentUserId = _tenantContext.GetRequiredUserId();
        var currentUser = await _userFactory.GetByIdAsync(currentUserId);
        if (currentUser == null || !currentUser.IsAdmin)
        {
            throw new UnauthorizedAccessException("需要管理员权限");
        }

        var companyId = _tenantContext.GetRequiredCompanyId();

        var role = new Role
        {
            Name = request.Name,
            Description = request.Description,
            CompanyId = companyId, // 角色属于当前企业
            CreatedBy = currentUserId,
            CreatedAt = DateTime.UtcNow
        };

        return await _roleFactory.CreateAsync(role);
    }

    public async Task<List<Role>> GetRolesAsync()
    {
        // 只返回当前企业的角色
        var filter = _roleFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        return await _roleFactory.FindAsync(filter);
    }

    public async Task<bool> AssignRoleToUserAsync(string userId, string roleId)
    {
        // 检查权限
        var currentUserId = _tenantContext.GetRequiredUserId();
        var currentUser = await _userFactory.GetByIdAsync(currentUserId);
        if (currentUser == null || !currentUser.IsAdmin)
        {
            throw new UnauthorizedAccessException("需要管理员权限");
        }

        var companyId = _tenantContext.GetRequiredCompanyId();

        // 验证用户和角色都属于当前企业
        var user = await _userFactory.GetByIdAsync(userId);
        if (user == null || user.CompanyId != companyId)
        {
            throw new KeyNotFoundException("用户不存在或不属于当前企业");
        }

        var role = await _roleFactory.GetByIdAsync(roleId);
        if (role == null || role.CompanyId != companyId)
        {
            throw new KeyNotFoundException("角色不存在或不属于当前企业");
        }

        // 分配角色
        var userRole = new UserRole
        {
            UserId = userId,
            RoleId = roleId,
            CompanyId = companyId,
            AssignedBy = currentUserId,
            AssignedAt = DateTime.UtcNow
        };

        await _userRoleFactory.CreateAsync(userRole);
        return true;
    }
}

// ❌ 错误 - 没有权限控制
public class RoleService : IRoleService
{
    public async Task<Role> CreateRoleAsync(CreateRoleRequest request)
    {
        // 没有权限检查
        var role = new Role
        {
            Name = request.Name,
            Description = request.Description
            // 没有设置 CompanyId
        };

        return await _roleFactory.CreateAsync(role);
    }
}
```

### 菜单权限控制

```csharp
// ✅ 正确 - 菜单权限控制
public class MenuService : IMenuService
{
    private readonly IMongoCollection<Menu> _menus;
    private readonly IMongoCollection<Role> _roles;
    private readonly ITenantContext _tenantContext;

    public MenuService(
        IMongoCollection<Menu> menus,
        IMongoCollection<Role> roles,
        ITenantContext tenantContext)
    {
        _menus = menus;
        _roles = roles;
        _tenantContext = tenantContext;
    }

    public async Task<List<Menu>> GetUserMenusAsync()
    {
        var userId = _tenantContext.GetRequiredUserId();
        var companyId = _tenantContext.GetRequiredCompanyId();

        // 获取用户角色
        var userRoles = await _roles.Find(r => 
            r.UserIds.Contains(userId) && 
            r.CompanyId == companyId && 
            !r.IsDeleted).ToListAsync();

        // 获取角色可访问的菜单ID
        var menuIds = userRoles.SelectMany(r => r.MenuIds).Distinct().ToList();

        // 获取菜单
        var menus = await _menus.Find(m => 
            menuIds.Contains(m.Id) && 
            m.IsEnabled && 
            !m.IsDeleted).ToListAsync();

        return menus;
    }

    public async Task<bool> HasMenuAccessAsync(string menuId)
    {
        var userId = _tenantContext.GetRequiredUserId();
        var companyId = _tenantContext.GetRequiredCompanyId();

        // 获取用户角色
        var userRoles = await _roles.Find(r => 
            r.UserIds.Contains(userId) && 
            r.CompanyId == companyId && 
            !r.IsDeleted).ToListAsync();

        // 检查是否有菜单访问权限
        return userRoles.Any(r => r.MenuIds.Contains(menuId));
    }

    public async Task<bool> HasPermissionAsync(string permission)
    {
        var userId = _tenantContext.GetRequiredUserId();
        var companyId = _tenantContext.GetRequiredCompanyId();

        // 获取用户角色
        var userRoles = await _roles.Find(r => 
            r.UserIds.Contains(userId) && 
            r.CompanyId == companyId && 
            !r.IsDeleted).ToListAsync();

        // 检查是否有权限
        return userRoles.Any(r => r.Permissions.Contains(permission));
    }
}

// ❌ 错误 - 没有权限控制
public class MenuService : IMenuService
{
    public async Task<List<Menu>> GetUserMenusAsync()
    {
        // 返回所有菜单，没有权限控制
        return await _menus.Find(m => m.IsEnabled && !m.IsDeleted).ToListAsync();
    }
}
```

## 🎯 数据安全

### 数据加密

```csharp
// ✅ 正确 - 敏感数据加密
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly IEncryptionService _encryptionService;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        IEncryptionService encryptionService)
    {
        _userFactory = userFactory;
        _encryptionService = encryptionService;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            // 加密敏感数据
            PasswordHash = _encryptionService.HashPassword(request.Password),
            PhoneNumber = _encryptionService.Encrypt(request.PhoneNumber),
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        };

        return await _userFactory.CreateAsync(user);
    }

    public async Task<bool> ValidatePasswordAsync(string userId, string password)
    {
        var user = await _userFactory.GetByIdAsync(userId);
        if (user == null)
            return false;

        return _encryptionService.VerifyPassword(password, user.PasswordHash);
    }
}

// ❌ 错误 - 敏感数据未加密
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            // 密码未加密
            Password = request.Password,
            // 手机号未加密
            PhoneNumber = request.PhoneNumber
        };

        return await _userFactory.CreateAsync(user);
    }
}
```

### 审计日志

```csharp
// ✅ 正确 - 审计日志记录
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly IAuditService _auditService;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        IAuditService auditService)
    {
        _userFactory = userFactory;
        _auditService = auditService;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        };

        var createdUser = await _userFactory.CreateAsync(user);

        // 记录审计日志
        await _auditService.RecordOperationAsync(new OperationAudit
        {
            EntityType = nameof(User),
            EntityId = createdUser.Id,
            OperationType = OperationType.Create,
            UserId = _userFactory.GetCurrentUserId(),
            Username = _userFactory.GetCurrentUsername(),
            CompanyId = _userFactory.GetCurrentCompanyId(),
            Description = "创建用户",
            AfterData = JsonSerializer.Serialize(createdUser)
        });

        return createdUser;
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var existingUser = await _userFactory.GetByIdAsync(request.Id);
        if (existingUser == null)
            return false;

        var beforeData = JsonSerializer.Serialize(existingUser);

        var update = _userFactory.CreateUpdateBuilder()
            .Set(u => u.Username, request.Username)
            .SetCurrentTimestamp()
            .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
            .Build();

        var result = await _userFactory.UpdateAsync(existingUser, new OperationContext
        {
            UserId = _userFactory.GetCurrentUserId(),
            Username = _userFactory.GetCurrentUsername(),
            CompanyId = _userFactory.GetCurrentCompanyId(),
            OperationType = OperationType.Update,
            Description = "更新用户信息"
        });

        if (result)
        {
            // 记录审计日志
            await _auditService.RecordOperationAsync(new OperationAudit
            {
                EntityType = nameof(User),
                EntityId = request.Id,
                OperationType = OperationType.Update,
                UserId = _userFactory.GetCurrentUserId(),
                Username = _userFactory.GetCurrentUsername(),
                CompanyId = _userFactory.GetCurrentCompanyId(),
                Description = "更新用户信息",
                BeforeData = beforeData,
                AfterData = JsonSerializer.Serialize(existingUser)
            });
        }

        return result;
    }
}

// ❌ 错误 - 没有审计日志
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        // 没有记录审计日志
        return await _userFactory.CreateAsync(user);
    }
}
```

## 🚫 禁止的做法

### 不要忽略数据隔离

```csharp
// ❌ 错误 - 没有数据隔离
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync()
    {
        // 返回所有企业的用户，没有数据隔离
        return await _userFactory.FindAsync();
    }
}

// ✅ 正确 - 数据隔离
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync()
    {
        // 只返回当前企业的用户
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        return await _userFactory.FindAsync(filter);
    }
}
```

### 不要硬编码企业ID

```csharp
// ❌ 错误 - 硬编码企业ID
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = "company123" // 硬编码企业ID
        };

        return await _userFactory.CreateAsync(user);
    }
}

// ✅ 正确 - 动态获取企业ID
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId() // 动态获取
        };

        return await _userFactory.CreateAsync(user);
    }
}
```

### 不要忽略权限检查

```csharp
// ❌ 错误 - 没有权限检查
public class UserService : IUserService
{
    public async Task<bool> DeleteUserAsync(string id)
    {
        // 没有权限检查，任何人都可以删除用户
        return await _userFactory.SoftDeleteAsync(id);
    }
}

// ✅ 正确 - 权限检查
public class UserService : IUserService
{
    public async Task<bool> DeleteUserAsync(string id)
    {
        // 检查权限
        var currentUserId = _userFactory.GetRequiredUserId();
        var currentUser = await _userFactory.GetByIdAsync(currentUserId);
        if (currentUser == null || !currentUser.IsAdmin)
        {
            throw new UnauthorizedAccessException("需要管理员权限");
        }

        return await _userFactory.SoftDeleteAsync(id);
    }
}
```

## 📋 多租户开发检查清单

创建或修改多租户功能时检查：

- [ ] 数据模型包含 CompanyId 字段（IMultiTenant 实体）
- [ ] **数据库操作自动过滤租户数据**：
  - [ ] 所有实现了 `IMultiTenant` 的实体查询会自动应用企业过滤
  - [ ] **禁止手动添加 CompanyId 过滤** - 依赖数据工厂的自动过滤
  - [ ] 创建实体时必须设置 `CompanyId`（使用 `GetRequiredCompanyId()`）
  - [ ] 数据工厂从数据库读取企业ID（不使用 JWT token）
  - [ ] 使用正确的 MongoDB 字段名（从 `BsonElement` 特性获取）
- [ ] 服务使用租户上下文
- [ ] 权限控制正确实现
- [ ] 敏感数据加密存储
- [ ] 审计日志完整记录
- [ ] 跨租户查询有明确标识
- [ ] 菜单权限正确控制
- [ ] 角色权限正确分配
- [ ] 数据隔离测试通过

## 📚 相关文档

- [用户服务实现](mdc:Platform.ApiService/Services/UserService.cs)
- [角色服务实现](mdc:Platform.ApiService/Services/RoleService.cs)
- [企业服务实现](mdc:Platform.ApiService/Services/CompanyService.cs)
- [多租户架构设计](https://docs.microsoft.com/en-us/azure/sql-database/saas-tenancy-app-design-patterns)
