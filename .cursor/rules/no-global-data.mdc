---
description: 禁止创建全局数据，确保多租户数据隔离
alwaysApply: true
---

# 禁止创建全局数据 - 多租户数据隔离规范

## 🚨 核心原则

**严格禁止创建没有 CompanyId 的全局数据。所有业务数据必须归属于特定企业。**

## ❌ 禁止的行为

### 1. 在系统启动时创建全局数据

```csharp
// ❌ 禁止：在 Program.cs 中创建全局菜单/角色/权限
var initialMenuData = new InitialMenuData(database);
await initialMenuData.InitializeAsync();  // 创建的数据没有 CompanyId

var initializePermissions = new InitializePermissions(database, logger);
await initializePermissions.InitializeAsync();  // 创建的数据没有 CompanyId
```

### 2. 创建没有 CompanyId 的业务数据

```csharp
// ❌ 禁止：Role 没有 CompanyId
var role = new Role
{
    Name = "管理员",
    Description = "管理员角色",
    // ❌ 缺少 CompanyId
};

// ❌ 禁止：Notice 没有 CompanyId
var notice = new Notice
{
    Title = "系统通知",
    Content = "欢迎使用系统",
    // ❌ 缺少 CompanyId，会成为孤儿数据
};

// ❌ 禁止：Tag 没有 CompanyId
var tag = new Tag
{
    Name = "重要",
    Color = "#ff0000",
    // ❌ 缺少 CompanyId
};
```

## ✅ 正确的做法

### 1. 业务数据必须设置 CompanyId

```csharp
// ✅ 正确：Role 设置 CompanyId
var role = new Role
{
    Name = "管理员",
    Description = "管理员角色",
    CompanyId = company.Id!  // ✅ 必须设置
};

// ✅ 正确：Notice 设置 CompanyId
var notice = new Notice
{
    Title = "企业通知",
    Content = "欢迎使用系统",
    CompanyId = company.Id!  // ✅ 必须设置
};

// ✅ 正确：Tag 设置 CompanyId
var tag = new Tag
{
    Name = "重要",
    Color = "#ff0000",
    CompanyId = company.Id!  // ✅ 必须设置
};
```

### 2. 使用多租户基类

```csharp
// ✅ Notice 继承 MultiTenantEntity
public class Notice : MultiTenantEntity
{
    // CompanyId 由 MultiTenantEntity 提供
    public string Title { get; set; }
    public string Content { get; set; }
}

// ✅ Tag 继承 MultiTenantEntity
public class Tag : MultiTenantEntity
{
    // CompanyId 由 MultiTenantEntity 提供
    public string Name { get; set; }
    public string Color { get; set; }
}
```

### 3. 在创建时验证 CompanyId

```csharp
// ✅ 创建前验证
public async Task<Notice> CreateNoticeAsync(CreateNoticeRequest request)
{
    var companyId = GetRequiredCompanyId();  // 获取当前企业ID
    
    var notice = new Notice
    {
        Title = request.Title,
        Content = request.Content,
        CompanyId = companyId,  // ✅ 设置企业ID
        // ...
    };
    
    await _notices.InsertOneAsync(notice);
    return notice;
}
```

## 🔍 检查全局数据

### 查询可能的孤儿数据

```javascript
// MongoDB 查询检查业务数据是否有企业归属
db.roles.find({ companyId: { $exists: false } })
db.roles.find({ companyId: "" })
db.roles.find({ companyId: null })

db.notices.find({ companyId: { $exists: false } })
db.notices.find({ companyId: "" })
db.notices.find({ companyId: null })

db.tags.find({ companyId: { $exists: false } })
db.tags.find({ companyId: "" })
db.tags.find({ companyId: null })
```

**预期结果**: 所有查询都应该返回空结果

## 📋 多租户实体清单

以下实体必须有 CompanyId：

| 实体 | 基类 | CompanyId 要求 |
|------|------|---------------|
| **Role** | ISoftDeletable | ✅ 必须 |
| **Notice** | MultiTenantEntity | ✅ 必须 |
| **Tag** | MultiTenantEntity | ✅ 必须 |
| **ActivityLog** | MultiTenantEntity | ✅ 必须 |

### 特殊实体（无 CompanyId 的合理例外）

| 实体 | CompanyId | 说明 |
|------|-----------|------|
| **Company** | ❌ 不需要 | 企业实体本身 |
| **Menu** | ❌ 不需要 | ⭐ v5.0: 全局系统资源，所有企业共享 |
| **AppUser** | ✅ 需要 | 通过 CurrentCompanyId 关联企业 |
| **UserCompany** | ✅ 需要 | 关联表，有 CompanyId 字段 |

### ⭐ v5.0 重要变更：Menu 是全局资源

**Menu 不再有 CompanyId**，原因：
- 所有企业使用相同的系统菜单
- 通过角色的 MenuIds 控制用户可见菜单
- 通过权限控制菜单内的功能访问
- 菜单在系统初始化时创建，用户不能管理

详见：[全局菜单架构](mdc:.cursor/rules/global-menu-architecture.mdc)

## 🚫 已废弃的初始化脚本

以下脚本**不应该在 Program.cs 中调用**：

```csharp
// ❌ 已废弃：创建全局菜单和角色
// var initialMenuData = new InitialMenuData(database);
// await initialMenuData.InitializeAsync();

// ❌ 已废弃：创建全局权限
// var initializePermissions = new InitializePermissions(database, logger);
// await initializePermissions.InitializeAsync();

// ❌ 已废弃：创建默认admin用户
// var createAdminUser = new CreateAdminUser(database);
// await createAdminUser.CreateDefaultAdminAsync();
```

**原因**：
- 这些脚本创建的数据没有 CompanyId
- 成为孤儿数据，无法被任何用户使用
- 用户注册时会自动创建企业专属数据

## ✅ 正确的数据创建时机

### 用户注册时创建
```csharp
// ✅ 在用户注册时创建企业专属数据
public async Task<Company> CreatePersonalCompanyAsync(AppUser user)
{
    var company = new Company { /* ... */ };
    
    // 创建企业专属的权限
    var permissions = CreateDefaultPermissions(company.Id!);
    
    // 创建企业专属的角色
    var role = new Role { CompanyId = company.Id!, /* ... */ };
    
    // 创建企业专属的菜单
    var menus = CreateDefaultMenus(company.Id!);
    
    // 所有数据都有 CompanyId
}
```

参考实现：[AuthService.cs](mdc:Platform.ApiService/Services/AuthService.cs) - `CreatePersonalCompanyAsync()` 方法

## 🔧 代码审查清单

在创建或修改多租户数据时，检查：

- [ ] 所有 Role 实体都设置了 CompanyId
- [ ] 所有 Notice 实体都设置了 CompanyId
- [ ] 所有 Tag 实体都设置了 CompanyId
- [ ] 所有 ActivityLog 实体都设置了 CompanyId
- [ ] 不在系统启动时创建全局业务数据
- [ ] 不调用已废弃的初始化脚本
- [ ] 数据创建使用事务保护
- [ ] Menu 实体正确地作为全局资源（无 CompanyId）

## 🎯 核心原则重申

1. **无全局数据** - 所有业务数据都有 CompanyId
2. **企业隔离** - 每个企业的数据完全独立
3. **用户注册创建** - 数据在用户注册时自动创建
4. **事务保护** - 确保数据创建的原子性
5. **严格验证** - 创建前必须验证 CompanyId

遵循这些规范，确保多租户系统的数据安全和隔离！

