---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 性能优化和监控规范
---
# 性能优化和监控规范

## 🎯 核心原则

### 通过性能优化和监控确保系统高效运行，提供良好的用户体验

## ✅ 数据库性能优化

### 查询优化

```csharp
// ✅ 正确 - 优化的数据库查询
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public UserService(IDatabaseOperationFactory<User> userFactory)
    {
        _userFactory = userFactory;
    }

    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 1. 构建高效的查询条件
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        // 2. 添加索引友好的搜索条件
        if (!string.IsNullOrEmpty(request.Keyword))
        {
            var searchFilter = _userFactory.CreateFilterBuilder()
                .Regex(u => u.Username, request.Keyword)
                .Or()
                .Regex(u => u.Email, request.Keyword)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(searchFilter)
                .Build();
        }

        // 3. 使用索引友好的排序
        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        // 4. 限制结果数量
        var limit = Math.Min(request.Limit ?? DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE);

        // 5. 执行查询
        return await _userFactory.FindAsync(filter, sort, limit);
    }

    public async Task<(List<User> items, long total)> GetUsersPagedAsync(UserListRequest request)
    {
        // 1. 构建查询条件
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        // 2. 添加搜索条件
        if (!string.IsNullOrEmpty(request.Keyword))
        {
            var searchFilter = _userFactory.CreateFilterBuilder()
                .Regex(u => u.Username, request.Keyword)
                .Or()
                .Regex(u => u.Email, request.Keyword)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(searchFilter)
                .Build();
        }

        // 3. 构建排序
        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        // 4. 执行分页查询
        var page = Math.Max(1, request.Page ?? 1);
        var pageSize = Math.Min(request.PageSize ?? DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE);

        return await _userFactory.FindPagedAsync(filter, sort, page, pageSize);
    }

    public async Task<UserStatistics> GetUserStatisticsAsync()
    {
        var companyId = _userFactory.GetRequiredCompanyId();
        
        // 使用聚合查询而不是加载所有数据
        var totalUsers = await _userFactory.CountAsync();
        var activeUsers = await _userFactory.CountAsync(
            _userFactory.CreateFilterBuilder()
                .Equal(u => u.IsActive, true)
                .Build()
        );
        var inactiveUsers = totalUsers - activeUsers;

        return new UserStatistics
        {
            TotalUsers = totalUsers,
            ActiveUsers = activeUsers,
            InactiveUsers = inactiveUsers,
            CompanyId = companyId,
            GeneratedAt = DateTime.UtcNow
        };
    }
}

// ❌ 错误 - 低效的数据库查询
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 获取所有用户然后过滤（低效）
        var allUsers = await _userFactory.FindAsync();
        
        return allUsers
            .Where(u => string.IsNullOrEmpty(request.Keyword) || 
                       u.Username.Contains(request.Keyword) ||
                       u.Email.Contains(request.Keyword))
            .Take(request.Limit ?? DEFAULT_PAGE_SIZE)
            .ToList();
    }
}
```

### 索引优化

```csharp
// ✅ 正确 - 索引优化
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 使用复合索引优化查询
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        // 添加状态过滤（使用索引）
        if (request.IsActive.HasValue)
        {
            var statusFilter = _userFactory.CreateFilterBuilder()
                .Equal(u => u.IsActive, request.IsActive.Value)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(statusFilter)
                .Build();
        }

        // 添加时间范围过滤（使用索引）
        if (request.CreatedAfter.HasValue)
        {
            var timeFilter = _userFactory.CreateFilterBuilder()
                .GreaterThanOrEqual(u => u.CreatedAt, request.CreatedAfter.Value)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(timeFilter)
                .Build();
        }

        // 使用索引友好的排序
        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        return await _userFactory.FindAsync(filter, sort, request.Limit);
    }
}

// ❌ 错误 - 没有使用索引
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 没有使用索引的查询
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        // 没有使用索引的排序
        var sort = _userFactory.CreateSortBuilder()
            .Ascending(u => u.Username) // 没有索引的字段
            .Build();

        return await _userFactory.FindAsync(filter, sort, request.Limit);
    }
}
```

### 批量操作优化

```csharp
// ✅ 正确 - 批量操作优化
public class UserService : IUserService
{
    public async Task<List<User>> CreateManyUsersAsync(List<CreateUserRequest> requests)
    {
        // 1. 批量验证
        await ValidateManyUsersAsync(requests);

        // 2. 批量创建
        var users = requests.Select(request => new User
        {
            Username = request.Username,
            Email = request.Email,
            CompanyId = _userFactory.GetRequiredCompanyId(),
            CreatedBy = _userFactory.GetCurrentUserId(),
            CreatedAt = DateTime.UtcNow
        }).ToList();

        return await _userFactory.CreateManyAsync(users);
    }

    public async Task<long> UpdateManyUsersAsync(List<UpdateUserRequest> requests)
    {
        // 1. 批量验证
        await ValidateManyUpdatesAsync(requests);

        // 2. 批量更新
        var userIds = requests.Select(r => r.Id).ToList();
        var filter = _userFactory.CreateFilterBuilder()
            .In(u => u.Id, userIds)
            .Build();

        var update = _userFactory.CreateUpdateBuilder()
            .SetCurrentTimestamp()
            .SetOperationTracking(_userFactory.GetCurrentUserId(), _userFactory.GetCurrentUsername())
            .Build();

        return await _userFactory.UpdateManyAsync(filter, update);
    }

    public async Task<long> DeleteManyUsersAsync(List<string> userIds)
    {
        // 1. 批量验证
        await ValidateManyDeletionsAsync(userIds);

        // 2. 批量删除
        return await _userFactory.SoftDeleteManyAsync(userIds);
    }

    private async Task ValidateManyUsersAsync(List<CreateUserRequest> requests)
    {
        foreach (var request in requests)
        {
            if (string.IsNullOrEmpty(request.Username))
                throw new ArgumentException("用户名不能为空");
        }
    }

    private async Task ValidateManyUpdatesAsync(List<UpdateUserRequest> requests)
    {
        foreach (var request in requests)
        {
            if (string.IsNullOrEmpty(request.Id))
                throw new ArgumentException("用户ID不能为空");
        }
    }

    private async Task ValidateManyDeletionsAsync(List<string> userIds)
    {
        foreach (var userId in userIds)
        {
            if (string.IsNullOrEmpty(userId))
                throw new ArgumentException("用户ID不能为空");
        }
    }
}

// ❌ 错误 - 逐个操作
public class UserService : IUserService
{
    public async Task<List<User>> CreateManyUsersAsync(List<CreateUserRequest> requests)
    {
        var users = new List<User>();
        
        // 逐个创建（低效）
        foreach (var request in requests)
        {
            var user = await CreateUserAsync(request);
            users.Add(user);
        }
        
        return users;
    }
}
```

## 🎯 内存使用优化

### 流式处理

```csharp
// ✅ 正确 - 流式处理
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 1. 使用流式处理
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        var limit = Math.Min(request.Limit ?? DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE);

        // 2. 限制结果数量
        return await _userFactory.FindAsync(filter, sort, limit);
    }

    public async Task<UserStatistics> GetUserStatisticsAsync()
    {
        var companyId = _userFactory.GetRequiredCompanyId();
        
        // 3. 使用聚合查询而不是加载所有数据
        var totalUsers = await _userFactory.CountAsync();
        var activeUsers = await _userFactory.CountAsync(
            _userFactory.CreateFilterBuilder()
                .Equal(u => u.IsActive, true)
                .Build()
        );
        var inactiveUsers = totalUsers - activeUsers;

        return new UserStatistics
        {
            TotalUsers = totalUsers,
            ActiveUsers = activeUsers,
            InactiveUsers = inactiveUsers,
            CompanyId = companyId,
            GeneratedAt = DateTime.UtcNow
        };
    }
}

// ❌ 错误 - 内存使用不当
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 加载所有用户到内存（内存浪费）
        var allUsers = await _userFactory.FindAsync();
        
        return allUsers
            .Where(u => string.IsNullOrEmpty(request.Keyword) || 
                       u.Username.Contains(request.Keyword))
            .Take(request.Limit ?? DEFAULT_PAGE_SIZE)
            .ToList();
    }
}
```

### 缓存优化

```csharp
// ✅ 正确 - 缓存优化
public class UserService : IUserService
{
    private readonly IMemoryCache _cache;
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        IMemoryCache cache)
    {
        _userFactory = userFactory;
        _cache = cache;
    }

    public async Task<User?> GetUserByIdAsync(string id)
    {
        // 1. 尝试从缓存获取
        var cacheKey = $"user:{id}";
        if (_cache.TryGetValue(cacheKey, out User? cachedUser))
        {
            return cachedUser;
        }

        // 2. 从数据库获取
        var user = await _userFactory.GetByIdAsync(id);
        if (user != null)
        {
            // 3. 缓存结果
            _cache.Set(cacheKey, user, TimeSpan.FromMinutes(5));
        }

        return user;
    }

    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        // 1. 构建缓存键
        var cacheKey = $"users:{request.Keyword}:{request.IsActive}:{request.Limit}";
        
        // 2. 尝试从缓存获取
        if (_cache.TryGetValue(cacheKey, out List<User>? cachedUsers))
        {
            return cachedUsers;
        }

        // 3. 从数据库获取
        var filter = _userFactory.CreateFilterBuilder()
            .ExcludeDeleted()
            .WithTenant()
            .Build();

        if (!string.IsNullOrEmpty(request.Keyword))
        {
            var searchFilter = _userFactory.CreateFilterBuilder()
                .Regex(u => u.Username, request.Keyword)
                .Or()
                .Regex(u => u.Email, request.Keyword)
                .Build();
            
            filter = _userFactory.CreateFilterBuilder()
                .And(filter)
                .And(searchFilter)
                .Build();
        }

        var sort = _userFactory.CreateSortBuilder()
            .Descending(u => u.CreatedAt)
            .Build();

        var limit = Math.Min(request.Limit ?? DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE);
        var users = await _userFactory.FindAsync(filter, sort, limit);

        // 4. 缓存结果
        _cache.Set(cacheKey, users, TimeSpan.FromMinutes(2));

        return users;
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var result = await _userFactory.UpdateAsync(existingUser, new OperationContext
        {
            UserId = _userFactory.GetCurrentUserId(),
            Username = _userFactory.GetCurrentUsername(),
            CompanyId = _userFactory.GetCurrentCompanyId(),
            OperationType = OperationType.Update,
            Description = "更新用户信息"
        });

        if (result)
        {
            // 5. 清除相关缓存
            _cache.Remove($"user:{request.Id}");
            _cache.Remove($"users:{request.Keyword}:{request.IsActive}:{request.Limit}");
        }

        return result;
    }
}

// ❌ 错误 - 没有缓存
public class UserService : IUserService
{
    public async Task<User?> GetUserByIdAsync(string id)
    {
        // 每次都从数据库获取（低效）
        return await _userFactory.GetByIdAsync(id);
    }
}
```

## 🎯 性能监控

### 性能指标监控

```csharp
// ✅ 正确 - 性能指标监控
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ILogger<UserService> _logger;
    private readonly IMetrics _metrics;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        ILogger<UserService> logger,
        IMetrics metrics)
    {
        _userFactory = userFactory;
        _logger = logger;
        _metrics = metrics;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // 1. 记录开始时间
            _logger.LogInformation("开始创建用户: {Username}", request.Username);
            
            // 2. 业务逻辑处理
            var user = new User
            {
                Username = request.Username,
                Email = request.Email,
                CompanyId = _userFactory.GetRequiredCompanyId(),
                CreatedBy = _userFactory.GetCurrentUserId(),
                CreatedAt = DateTime.UtcNow
            };

            var createdUser = await _userFactory.CreateAsync(user);
            
            // 3. 记录成功指标
            _metrics.Counter("user.created").Increment();
            _metrics.Timer("user.create.duration").Record(stopwatch.ElapsedMilliseconds);
            
            _logger.LogInformation("用户创建成功: {UserId}, 耗时: {ElapsedMs}ms", 
                createdUser.Id, stopwatch.ElapsedMilliseconds);
            
            return createdUser;
        }
        catch (Exception ex)
        {
            // 4. 记录错误指标
            _metrics.Counter("user.create.errors").Increment();
            _metrics.Timer("user.create.duration").Record(stopwatch.ElapsedMilliseconds);
            
            _logger.LogError(ex, "用户创建失败: {Username}, 耗时: {ElapsedMs}ms", 
                request.Username, stopwatch.ElapsedMilliseconds);
            
            throw;
        }
    }

    public async Task<List<User>> GetUsersAsync(UserListRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // 1. 记录开始时间
            _logger.LogInformation("开始获取用户列表: {Keyword}", request.Keyword);
            
            // 2. 构建查询条件
            var filter = _userFactory.CreateFilterBuilder()
                .ExcludeDeleted()
                .WithTenant()
                .Build();

            if (!string.IsNullOrEmpty(request.Keyword))
            {
                var searchFilter = _userFactory.CreateFilterBuilder()
                    .Regex(u => u.Username, request.Keyword)
                    .Or()
                    .Regex(u => u.Email, request.Keyword)
                    .Build();
                
                filter = _userFactory.CreateFilterBuilder()
                    .And(filter)
                    .And(searchFilter)
                    .Build();
            }

            var sort = _userFactory.CreateSortBuilder()
                .Descending(u => u.CreatedAt)
                .Build();

            var limit = Math.Min(request.Limit ?? DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE);
            var users = await _userFactory.FindAsync(filter, sort, limit);
            
            // 3. 记录成功指标
            _metrics.Counter("user.list.requests").Increment();
            _metrics.Timer("user.list.duration").Record(stopwatch.ElapsedMilliseconds);
            _metrics.Gauge("user.list.count").SetValue(users.Count);
            
            _logger.LogInformation("用户列表获取成功: {Count}条记录, 耗时: {ElapsedMs}ms", 
                users.Count, stopwatch.ElapsedMilliseconds);
            
            return users;
        }
        catch (Exception ex)
        {
            // 4. 记录错误指标
            _metrics.Counter("user.list.errors").Increment();
            _metrics.Timer("user.list.duration").Record(stopwatch.ElapsedMilliseconds);
            
            _logger.LogError(ex, "用户列表获取失败: {Keyword}, 耗时: {ElapsedMs}ms", 
                request.Keyword, stopwatch.ElapsedMilliseconds);
            
            throw;
        }
    }
}

// ❌ 错误 - 没有性能监控
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 没有性能监控
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };

        return await _userFactory.CreateAsync(user);
    }
}
```

### 健康检查

```csharp
// ✅ 正确 - 健康检查
public class UserServiceHealthCheck : IHealthCheck
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ILogger<UserServiceHealthCheck> _logger;

    public UserServiceHealthCheck(
        IDatabaseOperationFactory<User> userFactory,
        ILogger<UserServiceHealthCheck> logger)
    {
        _userFactory = userFactory;
        _logger = logger;
    }

    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        try
        {
            // 1. 检查数据库连接
            var userCount = await _userFactory.CountAsync();
            
            // 2. 检查性能指标
            var stopwatch = Stopwatch.StartNew();
            await _userFactory.FindAsync(null, null, 1);
            var elapsed = stopwatch.ElapsedMilliseconds;
            
            // 3. 评估健康状态
            if (elapsed > 1000) // 超过1秒认为不健康
            {
                return HealthCheckResult.Unhealthy($"用户服务响应缓慢: {elapsed}ms");
            }
            
            if (userCount < 0)
            {
                return HealthCheckResult.Unhealthy("用户数量异常");
            }
            
            return HealthCheckResult.Healthy($"用户服务正常: {userCount}个用户, 响应时间: {elapsed}ms");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "用户服务健康检查失败");
            return HealthCheckResult.Unhealthy("用户服务健康检查失败", ex);
        }
    }
}

// ❌ 错误 - 没有健康检查
public class UserService : IUserService
{
    // 没有健康检查实现
}
```

## 🚫 禁止的做法

### 不要忽略性能影响

```csharp
// ❌ 错误 - 忽略性能影响
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync()
    {
        // 获取所有用户（性能问题）
        return await _userFactory.FindAsync();
    }
}

// ✅ 正确 - 考虑性能影响
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(int? limit = null)
    {
        var actualLimit = limit ?? DEFAULT_PAGE_SIZE;
        if (actualLimit > MAX_PAGE_SIZE)
            actualLimit = MAX_PAGE_SIZE;

        return await _userFactory.FindAsync(null, null, actualLimit);
    }
}
```

### 不要忽略内存使用

```csharp
// ❌ 错误 - 内存使用不当
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync()
    {
        // 加载所有用户到内存（内存浪费）
        var allUsers = await _userFactory.FindAsync();
        return allUsers.ToList();
    }
}

// ✅ 正确 - 合理使用内存
public class UserService : IUserService
{
    public async Task<List<User>> GetUsersAsync(int? limit = null)
    {
        var actualLimit = limit ?? DEFAULT_PAGE_SIZE;
        return await _userFactory.FindAsync(null, null, actualLimit);
    }
}
```

### 不要忽略监控

```csharp
// ❌ 错误 - 没有监控
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 没有性能监控
        var user = new User { Username = request.Username };
        return await _userFactory.CreateAsync(user);
    }
}

// ✅ 正确 - 完整的监控
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            var user = new User { Username = request.Username };
            var result = await _userFactory.CreateAsync(user);
            
            _metrics.Counter("user.created").Increment();
            _metrics.Timer("user.create.duration").Record(stopwatch.ElapsedMilliseconds);
            
            return result;
        }
        catch (Exception ex)
        {
            _metrics.Counter("user.create.errors").Increment();
            throw;
        }
    }
}
```

## 📋 性能优化检查清单

创建或修改代码时检查：

- [ ] 数据库查询优化
- [ ] 索引使用正确
- [ ] 批量操作实现
- [ ] 内存使用合理
- [ ] 缓存策略适当
- [ ] 性能监控完整
- [ ] 健康检查实现
- [ ] 错误处理完善
- [ ] 日志记录详细
- [ ] 性能测试通过

## 📚 相关文档

- [用户服务实现](mdc:Platform.ApiService/Services/UserService.cs)
- [角色服务实现](mdc:Platform.ApiService/Services/RoleService.cs)
- [企业服务实现](mdc:Platform.ApiService/Services/CompanyService.cs)
- [性能优化指南](https://docs.microsoft.com/en-us/aspnet/core/performance/)
