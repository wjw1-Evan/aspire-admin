---
alwaysApply: true
description: 权限控制实现规范和最佳实践
---

# 权限控制实现规范

## 🎯 统一标准

**所有需要权限验证的 API 接口必须使用 `[RequirePermission]` 特性（声明式），除非需要条件权限检查。**

## ✅ 推荐：使用 [RequirePermission] 特性

### 标准实现

```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]  // 控制器级别要求登录
public class ResourceController : BaseApiController
{
    [HttpGet]
    [RequirePermission("resource", "read")]
    public async Task<IActionResult> GetAll()
    {
        var data = await _service.GetAllAsync();
        return Success(data);
    }
    
    [HttpPost]
    [RequirePermission("resource", "create")]
    public async Task<IActionResult> Create([FromBody] CreateRequest request)
    {
        var result = await _service.CreateAsync(request);
        return Success(result, "创建成功");
    }
    
    [HttpPut("{id}")]
    [RequirePermission("resource", "update")]
    public async Task<IActionResult> Update(string id, [FromBody] UpdateRequest request)
    {
        var success = await _service.UpdateAsync(id, request);
        if (!success)
            throw new KeyNotFoundException("资源不存在");
        return Success("更新成功");
    }
    
    [HttpDelete("{id}")]
    [RequirePermission("resource", "delete")]
    public async Task<IActionResult> Delete(string id)
    {
        var success = await _service.DeleteAsync(id);
        if (!success)
            throw new KeyNotFoundException("资源不存在");
        return Success("删除成功");
    }
}
```

### 优势

- ✅ **声明式** - 权限要求在方法签名上一目了然
- ✅ **简洁** - 不需要在方法内部编写权限检查代码
- ✅ **AOP** - 权限检查在方法执行前自动完成
- ✅ **可维护** - 易于代码审查和维护
- ✅ **符合最佳实践** - ASP.NET Core 推荐的方式

## ⚠️ 特殊情况：使用 RequirePermissionAsync 方法

仅在以下场景使用方法调用：

### 场景 1: 条件权限检查

```csharp
[HttpPost("bulk-action")]
[Authorize]
public async Task<IActionResult> BulkAction([FromBody] BulkActionRequest request)
{
    // 根据操作类型检查不同权限
    if (request.Action == "delete")
        await RequirePermissionAsync("resource", "delete");
    else if (request.Action == "approve")
        await RequirePermissionAsync("resource", "approve");
    else
        await RequirePermissionAsync("resource", "update");
    
    // 业务逻辑...
}
```

### 场景 2: 自己或有权限

```csharp
[HttpGet("{id}")]
[Authorize]
public async Task<IActionResult> GetUserById(string id)
{
    // 查看自己不需要权限，查看他人需要权限
    var currentUserId = CurrentUserId;
    if (currentUserId != id && !await HasPermissionAsync("user", "read"))
    {
        throw new UnauthorizedAccessException("无权查看其他用户信息");
    }
    
    var user = await _userService.GetUserByIdAsync(id);
    return Success(user);
}
```

### 场景 3: 复杂权限逻辑

```csharp
[HttpPost("advanced-operation")]
[Authorize]
public async Task<IActionResult> AdvancedOperation([FromBody] AdvancedRequest request)
{
    // 需要多个权限的组合
    if (!await HasPermissionAsync("resource", "read") || 
        !await HasPermissionAsync("resource", "update"))
    {
        throw new UnauthorizedAccessException("权限不足");
    }
    
    // 业务逻辑...
}
```

## 📋 标准 CRUD 权限映射

| HTTP 方法 | 操作 | 权限代码 | 特性 |
|-----------|------|---------|------|
| `GET` (列表/详情) | 查看 | `resource:read` | `[RequirePermission("resource", "read")]` |
| `POST` | 创建 | `resource:create` | `[RequirePermission("resource", "create")]` |
| `PUT` / `PATCH` | 更新 | `resource:update` | `[RequirePermission("resource", "update")]` |
| `DELETE` | 删除 | `resource:delete` | `[RequirePermission("resource", "delete")]` |

### 示例

```csharp
// 用户管理
[RequirePermission("user", "create")]
[RequirePermission("user", "read")]
[RequirePermission("user", "update")]
[RequirePermission("user", "delete")]

// 角色管理
[RequirePermission("role", "create")]
[RequirePermission("role", "read")]
[RequirePermission("role", "update")]
[RequirePermission("role", "delete")]

// 菜单管理
[RequirePermission("menu", "create")]
[RequirePermission("menu", "read")]
[RequirePermission("menu", "update")]
[RequirePermission("menu", "delete")]
```

## 🔧 BaseApiController 辅助方法

### 可用方法

```csharp
// 1. 检查单个权限（返回布尔值）
protected async Task<bool> HasPermissionAsync(string resource, string action)

// 2. 要求权限（无权限抛异常）
protected async Task RequirePermissionAsync(string resource, string action)

// 3. 检查是否有任意一个权限
protected async Task<bool> HasAnyPermissionAsync(params string[] permissionCodes)

// 4. 检查是否拥有所有权限
protected async Task<bool> HasAllPermissionsAsync(params string[] permissionCodes)
```

### 使用场景

```csharp
// 场景 1: 简单判断
if (await HasPermissionAsync("user", "delete"))
{
    // 显示删除按钮
}

// 场景 2: 必须有权限
await RequirePermissionAsync("user", "create");  // 无权限抛异常

// 场景 3: 任意权限即可
if (await HasAnyPermissionAsync("user:read", "user:update"))
{
    // 有读或写权限即可
}

// 场景 4: 必须全部拥有
if (await HasAllPermissionsAsync("user:read", "user:update", "user:delete"))
{
    // 必须同时拥有三个权限
}
```

## 🚫 避免的做法

### ❌ 错误示例

```csharp
// ❌ 错误 1: 只用 [Authorize]，没有权限检查
[HttpPost]
[Authorize]  // 任何登录用户都可以执行
public async Task<IActionResult> SensitiveOperation()
{
    // 缺少权限检查！
}

// ❌ 错误 2: 使用过时的 Roles 授权
[HttpGet]
[Authorize(Roles = "admin")]  // v2.0 已废弃
public async Task<IActionResult> GetData()

// ❌ 错误 3: 不必要的方法调用（应该用特性）
[HttpPost]
[Authorize]
public async Task<IActionResult> Create(...)
{
    await RequirePermissionAsync("resource", "create");  // ❌ 应该用特性
    // ...
}

// ❌ 错误 4: 忘记添加 [Authorize]
[ApiController]
public class MyController : BaseApiController  // ❌ 缺少 [Authorize]

// ❌ 错误 5: 手动检查角色
if (User.IsInRole("admin"))  // ❌ 不要手动检查角色
{
    // ...
}

// ❌ 错误 6: 使用 IsAdmin 属性
if (IsAdmin)  // ❌ 已过时，使用权限系统
{
    // ...
}
```

### ✅ 正确示例

```csharp
// ✅ 正确 1: 使用特性
[HttpPost]
[RequirePermission("resource", "create")]
public async Task<IActionResult> Create(...)

// ✅ 正确 2: 控制器级别添加 [Authorize]
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class MyController : BaseApiController

// ✅ 正确 3: 公共接口（只需登录）
[HttpGet("public-data")]
[Authorize]  // 只检查登录，不检查权限
public async Task<IActionResult> GetPublicData()

// ✅ 正确 4: 条件权限检查（方法调用）
[HttpPost("bulk")]
[Authorize]
public async Task<IActionResult> Bulk(...)
{
    if (request.Action == "delete")
        await RequirePermissionAsync("resource", "delete");
    else
        await RequirePermissionAsync("resource", "update");
}

// ✅ 正确 5: 使用权限系统
if (await HasPermissionAsync("user", "delete"))
{
    // 有权限才执行
}
```

## 📖 完整示例

### 标准的资源控制器

```csharp
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Platform.ApiService.Attributes;
using Platform.ApiService.Models;
using Platform.ApiService.Services;

namespace Platform.ApiService.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]  // ✅ 所有接口默认需要登录
public class ProductController : BaseApiController
{
    private readonly IProductService _productService;

    public ProductController(IProductService productService)
    {
        _productService = productService;
    }

    /// <summary>
    /// 获取所有产品
    /// </summary>
    [HttpGet]
    [RequirePermission("product", "read")]  // ✅ 声明式权限检查
    public async Task<IActionResult> GetAll()
    {
        var products = await _productService.GetAllAsync();
        return Success(products);
    }

    /// <summary>
    /// 根据ID获取产品
    /// </summary>
    [HttpGet("{id}")]
    [RequirePermission("product", "read")]
    public async Task<IActionResult> GetById(string id)
    {
        var product = await _productService.GetByIdAsync(id);
        if (product == null)
            throw new KeyNotFoundException($"产品 {id} 不存在");
        
        return Success(product);
    }

    /// <summary>
    /// 创建产品
    /// </summary>
    [HttpPost]
    [RequirePermission("product", "create")]
    public async Task<IActionResult> Create([FromBody] CreateProductRequest request)
    {
        if (string.IsNullOrEmpty(request.Name))
            throw new ArgumentException("产品名称不能为空");
        
        var userId = GetRequiredUserId();
        var product = await _productService.CreateAsync(request, userId);
        
        return Success(product, "创建成功");
    }

    /// <summary>
    /// 更新产品
    /// </summary>
    [HttpPut("{id}")]
    [RequirePermission("product", "update")]
    public async Task<IActionResult> Update(string id, [FromBody] UpdateProductRequest request)
    {
        var success = await _productService.UpdateAsync(id, request);
        if (!success)
            throw new KeyNotFoundException($"产品 {id} 不存在");
        
        return Success("更新成功");
    }

    /// <summary>
    /// 删除产品
    /// </summary>
    [HttpDelete("{id}")]
    [RequirePermission("product", "delete")]
    public async Task<IActionResult> Delete(string id)
    {
        var success = await _productService.DeleteAsync(id);
        if (!success)
            throw new KeyNotFoundException($"产品 {id} 不存在");
        
        return Success("删除成功");
    }

    /// <summary>
    /// 批量操作产品（条件权限检查）
    /// </summary>
    [HttpPost("bulk-action")]
    [Authorize]  // ⚠️ 特殊情况：条件权限检查
    public async Task<IActionResult> BulkAction([FromBody] BulkActionRequest request)
    {
        // 根据操作类型检查不同权限
        if (request.Action == "delete")
            await RequirePermissionAsync("product", "delete");
        else
            await RequirePermissionAsync("product", "update");
        
        var success = await _productService.BulkActionAsync(request);
        return Success("批量操作成功");
    }
}
```

## 🔧 BaseApiController 提供的方法

### 权限检查方法

```csharp
// 1. 检查单个权限（返回布尔值）
bool hasPermission = await HasPermissionAsync("resource", "action");

// 2. 要求权限（无权限抛异常）
await RequirePermissionAsync("resource", "action");

// 3. 检查是否有任意一个权限
bool hasAny = await HasAnyPermissionAsync("user:read", "user:update");

// 4. 检查是否拥有所有权限
bool hasAll = await HasAllPermissionsAsync("user:read", "user:update");
```

### 使用示例

```csharp
// 场景 1: 自己或有权限
[HttpGet("{id}")]
[Authorize]
public async Task<IActionResult> GetUser(string id)
{
    // 可以查看自己，或者需要 user:read 权限
    if (CurrentUserId != id && !await HasPermissionAsync("user", "read"))
    {
        throw new UnauthorizedAccessException("无权查看其他用户信息");
    }
    
    var user = await _userService.GetUserByIdAsync(id);
    return Success(user);
}

// 场景 2: 条件权限
[HttpPost("action")]
[Authorize]
public async Task<IActionResult> DoAction([FromBody] ActionRequest request)
{
    if (request.IsAdminAction)
        await RequirePermissionAsync("resource", "admin");
    else
        await RequirePermissionAsync("resource", "normal");
}
```

## 📋 权限命名规范

### 标准格式

```
{resource}:{action}
```

### 资源命名

使用单数、小写、连字符分隔：

```csharp
✅ "user"              // 用户
✅ "role"              // 角色
✅ "menu"              // 菜单
✅ "activity-log"      // 活动日志
✅ "user-profile"      // 用户资料

❌ "users"             // 不要用复数
❌ "User"              // 不要用大写
❌ "user_profile"      // 不要用下划线
```

### 操作命名

使用标准 CRUD 操作：

```csharp
✅ "create"            // 创建
✅ "read"              // 查看
✅ "update"            // 更新
✅ "delete"            // 删除

// 扩展操作（特殊情况）
✅ "approve"           // 审批
✅ "export"            // 导出
✅ "import"            // 导入
```

### 完整示例

```csharp
[RequirePermission("user", "create")]          // ✅ 创建用户
[RequirePermission("user", "read")]            // ✅ 查看用户
[RequirePermission("user", "update")]          // ✅ 更新用户
[RequirePermission("user", "delete")]          // ✅ 删除用户
[RequirePermission("order", "approve")]        // ✅ 审批订单
[RequirePermission("report", "export")]        // ✅ 导出报表
[RequirePermission("activity-log", "read")]    // ✅ 查看日志
```

## 🚫 禁止的做法

### 1. 使用过时的角色授权

```csharp
// ❌ 禁止：v2.0 已废弃
[Authorize(Roles = "admin")]
[Authorize(Roles = "user")]

// ✅ 正确：使用权限系统
[RequirePermission("resource", "action")]
```

### 2. 只检查登录，不检查权限

```csharp
// ❌ 禁止：敏感操作只检查登录
[HttpPost]
[Authorize]  // 任何登录用户都可以执行
public async Task<IActionResult> SensitiveOperation()

// ✅ 正确：添加权限检查
[HttpPost]
[RequirePermission("resource", "action")]
public async Task<IActionResult> SensitiveOperation()
```

### 3. 手动检查角色或使用 IsAdmin

```csharp
// ❌ 禁止：手动检查角色
if (User.IsInRole("admin"))
{
    // ...
}

// ❌ 禁止：使用 IsAdmin 属性
if (IsAdmin)  // 已过时
{
    // ...
}

// ✅ 正确：使用权限检查
if (await HasPermissionAsync("resource", "admin"))
{
    // ...
}
```

### 4. 在不需要时使用方法调用

```csharp
// ❌ 不推荐：简单权限检查使用方法
[HttpPost]
[Authorize]
public async Task<IActionResult> Create(...)
{
    await RequirePermissionAsync("resource", "create");  // 应该用特性
    // ...
}

// ✅ 推荐：使用特性
[HttpPost]
[RequirePermission("resource", "create")]
public async Task<IActionResult> Create(...)
{
    // 权限自动检查
    // ...
}
```

## 📝 代码审查清单

在编写或审查 API 控制器时检查：

- [ ] 控制器继承 `BaseApiController`
- [ ] 控制器级别有 `[Authorize]` 特性
- [ ] 敏感接口有 `[RequirePermission]` 特性
- [ ] 公共接口只有 `[Authorize]`（无 RequirePermission）
- [ ] 不使用 `[Authorize(Roles = ...)]`
- [ ] 不使用 `IsAdmin` 或手动角色检查
- [ ] 权限代码遵循命名规范（`resource:action`）
- [ ] 条件权限检查有明确注释
- [ ] 有业务规则保护（如不能删除自己）
- [ ] 有 XML 文档注释

## 🎯 权限控制模式

### 模式 1: 标准 CRUD（97% 的情况）

```csharp
[RequirePermission("resource", "action")]
```

**适用场景**：
- 标准的增删改查操作
- 权限要求固定不变
- 不需要条件判断

### 模式 2: 条件权限（3% 的情况）

```csharp
[Authorize]
public async Task<IActionResult> Operation(...)
{
    if (condition)
        await RequirePermissionAsync("resource", "action1");
    else
        await RequirePermissionAsync("resource", "action2");
}
```

**适用场景**：
- 需要根据参数判断权限
- 复杂的权限逻辑
- 多种操作类型的批量接口

### 模式 3: 公共接口（无权限要求）

```csharp
[Authorize]  // 只检查登录
public async Task<IActionResult> GetPublicData()
```

**适用场景**：
- 所有登录用户都可访问的功能
- 查看通知、获取公共配置等

### 模式 4: 匿名访问

```csharp
[AllowAnonymous]
public async Task<IActionResult> GetAnonymousData()
```

**适用场景**：
- 登录、注册、忘记密码等
- 公开的API文档
- 健康检查端点

## 📚 相关文档

- [RequirePermission 特性实现](mdc:Platform.ApiService/Attributes/RequirePermissionAttribute.cs)
- [BaseApiController 基类](mdc:Platform.ApiService/Controllers/BaseApiController.cs)
- [权限检查服务](mdc:Platform.ApiService/Services/PermissionCheckService.cs)
- [权限系统完整文档](mdc:docs/permissions/CRUD-PERMISSION-SYSTEM.md)
- [统一权限控制文档](mdc:docs/features/UNIFIED-PERMISSION-CONTROL.md)

## 🎯 核心原则

1. **声明式优先** - 使用 `[RequirePermission]` 特性而不是方法调用
2. **权限覆盖 100%** - 所有敏感操作都必须有权限检查
3. **代码一致性** - 统一的实现方式
4. **安全第一** - 默认拒绝，显式授权
5. **简洁明了** - 权限要求在方法签名上一目了然

遵循这些规范，代码将更安全、更简洁、更易维护！
