---
alwaysApply: true
description: 项目结构和架构指南
---

# Aspire Admin Platform 项目结构指南

这是一个基于 .NET Aspire 构建的现代化微服务管理平台，包含以下核心组件：

## 🏗️ 项目架构

### 核心组件

- **Platform.AppHost** - Aspire 应用主机，负责服务编排和配置
- **Platform.ApiService** - API 服务，提供用户管理、认证等 REST API
- **Platform.Admin** - React + Ant Design Pro 企业级管理后台
- **Platform.App** - React Native + Expo 跨平台移动应用
- **Platform.ServiceDefaults** - 共享服务配置

### 技术栈
- **后端**: .NET 9.0, .NET Aspire, MongoDB, YARP, Scalar API 文档
- **前端**: React 19, Ant Design Pro, UmiJS, TypeScript, Biome
- **移动端**: React Native, Expo, Expo Router, TypeScript

## 📁 目录结构

```
Platform/
├── Platform.AppHost/          # 应用编排和配置中心
├── Platform.ApiService/       # API 服务 (C#)
├── Platform.Admin/            # 管理后台 (React + Ant Design Pro)
├── Platform.App/              # 移动应用 (React Native + Expo)
└── Platform.ServiceDefaults/  # 共享服务配置
```

## 🔧 开发指南

### 启动项目
```bash
dotnet run --project Platform.AppHost
```

### 访问地址
- 管理后台: http://localhost:15001
- 移动应用: http://localhost:15002
- API 网关: http://localhost:15000


### 默认账户
- 用户名: `admin`
- 密码: `admin123`
- 角色: `admin`

## 🔐 认证系统架构

### 统一认证系统
项目采用前后端统一的认证架构：

- **JWT Token 认证** - 基于 JWT 的简单 token 机制
- **统一 API 接口** - 前后端使用相同的认证端点
- **基于 access 字段的权限系统** - 简化的权限控制
- **自动 token 验证** - 智能的网络重试机制

### 认证流程
1. **登录**: `POST /login/account` → 获取 JWT token
2. **权限检查**: 基于 `user.access` 字段进行权限验证
3. **Token 验证**: 定期调用 `/currentUser` 验证 token 有效性
4. **登出**: `POST /login/outLogin` → 清除本地 token

### 权限系统
- **Admin 权限**: `access: 'admin'`
- **User 权限**: `access: 'user'`
- **Guest 权限**: `access: 'guest'`

## 📚 重要文档

- [认证系统架构说明](mdc:Platform.App/AUTH-ARCHITECTURE.md)
- [认证系统统一总结](mdc:Platform.App/AUTH-SYNC-SUMMARY.md)
- [认证系统使用指南](mdc:Platform.App/README-AUTH.md)