---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 资源检查规范 - 使用 ResourceExtensions 扩展方法
---
# 资源检查规范 - 使用 ResourceExtensions 扩展方法

## 🎯 核心原则

### 使用统一的 ResourceExtensions 扩展方法进行资源检查，确保数据完整性和业务规则一致性

## ✅ 资源检查扩展方法

### 基础资源检查扩展

```csharp
// Platform.ServiceDefaults/Extensions/ResourceExtensions.cs
public static class ResourceExtensions
{
    /// <summary>
    /// 检查资源是否存在
    /// </summary>
    public static async Task<T> EnsureExistsAsync<T>(this Task<T?> resourceTask, string resourceName, string resourceId) where T : class
    {
        var resource = await resourceTask;
        if (resource == null)
        {
            throw new KeyNotFoundException($"{resourceName} {resourceId} 不存在");
        }
        return resource;
    }

    /// <summary>
    /// 检查资源是否存在（带自定义错误消息）
    /// </summary>
    public static async Task<T> EnsureExistsAsync<T>(this Task<T?> resourceTask, string errorMessage) where T : class
    {
        var resource = await resourceTask;
        if (resource == null)
        {
            throw new KeyNotFoundException(errorMessage);
        }
        return resource;
    }

    /// <summary>
    /// 检查资源是否不存在
    /// </summary>
    public static async Task EnsureNotExistsAsync<T>(this Task<T?> resourceTask, string resourceName, string resourceId) where T : class
    {
        var resource = await resourceTask;
        if (resource != null)
        {
            throw new InvalidOperationException($"{resourceName} {resourceId} 已存在");
        }
    }

    /// <summary>
    /// 检查资源是否不存在（带自定义错误消息）
    /// </summary>
    public static async Task EnsureNotExistsAsync<T>(this Task<T?> resourceTask, string errorMessage) where T : class
    {
        var resource = await resourceTask;
        if (resource != null)
        {
            throw new InvalidOperationException(errorMessage);
        }
    }

    /// <summary>
    /// 检查资源是否属于当前企业
    /// </summary>
    public static T EnsureBelongsToCurrentCompany<T>(this T resource, string currentCompanyId, string resourceName, string resourceId) where T : IMultiTenant
    {
        if (resource == null)
        {
            throw new KeyNotFoundException($"{resourceName} {resourceId} 不存在");
        }

        if (resource.CompanyId != currentCompanyId)
        {
            throw new UnauthorizedAccessException($"无权访问 {resourceName} {resourceId}");
        }

        return resource;
    }

    /// <summary>
    /// 检查资源是否未被删除
    /// </summary>
    public static T EnsureNotDeleted<T>(this T resource, string resourceName, string resourceId) where T : ISoftDeletable
    {
        if (resource == null)
        {
            throw new KeyNotFoundException($"{resourceName} {resourceId} 不存在");
        }

        if (resource.IsDeleted)
        {
            throw new InvalidOperationException($"{resourceName} {resourceId} 已被删除");
        }

        return resource;
    }

    /// <summary>
    /// 检查资源是否处于活跃状态
    /// </summary>
    public static T EnsureActive<T>(this T resource, string resourceName, string resourceId) where T : IActiveEntity
    {
        if (resource == null)
        {
            throw new KeyNotFoundException($"{resourceName} {resourceId} 不存在");
        }

        if (!resource.IsActive)
        {
            throw new InvalidOperationException($"{resourceName} {resourceId} 已停用");
        }

        return resource;
    }

    /// <summary>
    /// 检查用户权限
    /// </summary>
    public static T EnsureUserPermission<T>(this T resource, string currentUserId, string requiredPermission, string resourceName, string resourceId) where T : IEntity
    {
        if (resource == null)
        {
            throw new KeyNotFoundException($"{resourceName} {resourceId} 不存在");
        }

        // 这里可以根据具体的权限检查逻辑来实现
        // 例如检查用户角色、权限等
        if (!HasPermission(currentUserId, requiredPermission))
        {
            throw new UnauthorizedAccessException($"无权执行 {requiredPermission} 操作");
        }

        return resource;
    }

    /// <summary>
    /// 检查资源数量限制
    /// </summary>
    public static async Task EnsureWithinLimitAsync<T>(this Task<long> countTask, long limit, string resourceName)
    {
        var count = await countTask;
        if (count >= limit)
        {
            throw new InvalidOperationException($"{resourceName} 数量已达上限 {limit}");
        }
    }

    /// <summary>
    /// 检查资源数量限制（带自定义错误消息）
    /// </summary>
    public static async Task EnsureWithinLimitAsync<T>(this Task<long> countTask, long limit, string errorMessage)
    {
        var count = await countTask;
        if (count >= limit)
        {
            throw new InvalidOperationException(errorMessage);
        }
    }

    private static bool HasPermission(string userId, string permission)
    {
        // 这里应该实现具体的权限检查逻辑
        // 例如从数据库查询用户角色和权限
        return true; // 简化实现
    }
}
```

### 业务特定资源检查扩展

```csharp
// Platform.ApiService/Extensions/BusinessResourceExtensions.cs
public static class BusinessResourceExtensions
{
    /// <summary>
    /// 检查用户是否可以删除
    /// </summary>
    public static async Task<User> EnsureCanDeleteAsync(this Task<User?> userTask, string userId)
    {
        var user = await userTask.EnsureExistsAsync("用户", userId);
        
        // 检查用户是否是企业管理员
        if (user.IsAdmin)
        {
            throw new InvalidOperationException("企业管理员无法删除");
        }

        // 检查用户是否有活跃会话
        if (user.LastLoginAt.HasValue && user.LastLoginAt.Value > DateTime.UtcNow.AddHours(-1))
        {
            throw new InvalidOperationException("无法删除有活跃会话的用户");
        }

        return user;
    }

    /// <summary>
    /// 检查用户是否可以更新
    /// </summary>
    public static async Task<User> EnsureCanUpdateAsync(this Task<User?> userTask, string userId)
    {
        var user = await userTask.EnsureExistsAsync("用户", userId);
        
        // 检查用户是否已被删除
        user.EnsureNotDeleted("用户", userId);
        
        // 检查用户是否已停用（除非是激活操作）
        if (!user.IsActive)
        {
            throw new InvalidOperationException("无法修改已停用用户的基本信息");
        }

        return user;
    }

    /// <summary>
    /// 检查角色是否可以删除
    /// </summary>
    public static async Task<Role> EnsureCanDeleteAsync(this Task<Role?> roleTask, string roleId)
    {
        var role = await roleTask.EnsureExistsAsync("角色", roleId);
        
        // 检查角色是否被用户使用
        var userCount = await _userFactory.CountAsync(
            _userFactory.CreateFilterBuilder()
                .Equal(u => u.RoleId, roleId)
                .Build()
        );

        if (userCount > 0)
        {
            throw new InvalidOperationException("角色正在被用户使用，无法删除");
        }

        return role;
    }

    /// <summary>
    /// 检查企业是否可以删除
    /// </summary>
    public static async Task<Company> EnsureCanDeleteAsync(this Task<Company?> companyTask, string companyId)
    {
        var company = await companyTask.EnsureExistsAsync("企业", companyId);
        
        // 检查企业是否有用户
        var userCount = await _userFactory.CountAsync(
            _userFactory.CreateFilterBuilder()
                .Equal(u => u.CompanyId, companyId)
                .Build()
        );

        if (userCount > 0)
        {
            throw new InvalidOperationException("企业有用户，无法删除");
        }

        return company;
    }

    /// <summary>
    /// 检查用户是否可以分配角色
    /// </summary>
    public static async Task<User> EnsureCanAssignRoleAsync(this Task<User?> userTask, string userId, string roleId)
    {
        var user = await userTask.EnsureExistsAsync("用户", userId);
        
        // 检查用户是否属于当前企业
        user.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "用户", userId);
        
        // 检查用户是否已被删除
        user.EnsureNotDeleted("用户", userId);
        
        // 检查用户是否已停用
        user.EnsureActive("用户", userId);

        return user;
    }

    /// <summary>
    /// 检查角色是否可以分配给用户
    /// </summary>
    public static async Task<Role> EnsureCanAssignToUserAsync(this Task<Role?> roleTask, string roleId, string userId)
    {
        var role = await roleTask.EnsureExistsAsync("角色", roleId);
        
        // 检查角色是否属于当前企业
        role.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "角色", roleId);
        
        // 检查角色是否已被删除
        role.EnsureNotDeleted("角色", roleId);
        
        // 检查角色是否已停用
        role.EnsureActive("角色", roleId);

        return role;
    }
}
```

## 🎯 服务中使用资源检查扩展

### 用户服务资源检查

```csharp
// ✅ 正确 - 使用资源检查扩展
public class UserService : IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly ITenantContext _tenantContext;
    private readonly ILogger<UserService> _logger;

    public UserService(
        IDatabaseOperationFactory<User> userFactory,
        ITenantContext tenantContext,
        ILogger<UserService> logger)
    {
        _userFactory = userFactory;
        _tenantContext = tenantContext;
        _logger = logger;
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        try
        {
            // 1. 参数验证
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            // 2. 业务验证
            await ValidateCreateUserRequestAsync(request);
            
            // 3. 检查唯一性
            await _userFactory.GetByUsernameAsync(request.Username).EnsureNotExistsAsync("用户名已存在");
            await _userFactory.GetByEmailAsync(request.Email).EnsureNotExistsAsync("邮箱已存在");
            
            // 4. 检查用户数量限制
            await _userFactory.CountAsync().EnsureWithinLimitAsync(1000, "企业用户数量已达上限");
            
            // 5. 创建用户实体
            var user = new User
            {
                Username = request.Username.Trim(),
                Email = request.Email.Trim().ToLowerInvariant(),
                CompanyId = _tenantContext.GetRequiredCompanyId(),
                CreatedBy = _tenantContext.GetRequiredUserId(),
                CreatedAt = DateTime.UtcNow
            };
            
            var createdUser = await _userFactory.CreateAsync(user);
            
            _logger.LogInformation("用户创建成功: {UserId}, 用户名: {Username}", 
                createdUser.Id, createdUser.Username);
            
            return createdUser;
        }
        catch (ArgumentException ex)
        {
            _logger.LogWarning(ex, "用户创建参数错误: {Username}", request?.Username);
            throw;
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "用户创建业务错误: {Username}", request?.Username);
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "用户创建失败: {Username}", request?.Username);
            throw new InvalidOperationException("用户创建失败", ex);
        }
    }

    public async Task<User?> GetUserByIdAsync(string id)
    {
        try
        {
            if (string.IsNullOrEmpty(id))
                throw new ArgumentException("用户ID不能为空", nameof(id));

            var user = await _userFactory.GetByIdAsync(id);
            if (user == null)
            {
                _logger.LogWarning("用户不存在: {UserId}", id);
                throw new KeyNotFoundException($"用户 {id} 不存在");
            }

            // 检查用户是否属于当前企业
            user.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "用户", id);

            _logger.LogDebug("用户获取成功: {UserId}, 用户名: {Username}", user.Id, user.Username);
            return user;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (UnauthorizedAccessException)
        {
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "获取用户失败: {UserId}", id);
            throw new InvalidOperationException("获取用户失败", ex);
        }
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        try
        {
            // 1. 参数验证
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            if (string.IsNullOrEmpty(request.Id))
                throw new ArgumentException("用户ID不能为空", nameof(request.Id));

            // 2. 检查用户是否存在且可以更新
            var existingUser = await _userFactory.GetByIdAsync(request.Id).EnsureCanUpdateAsync(request.Id);
            
            // 3. 检查用户是否属于当前企业
            existingUser.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "用户", request.Id);
            
            // 4. 业务验证
            await ValidateUpdateUserRequestAsync(request, existingUser);
            
            // 5. 检查唯一性（如果需要）
            if (!string.IsNullOrEmpty(request.Username) && request.Username != existingUser.Username)
            {
                await _userFactory.GetByUsernameAsync(request.Username).EnsureNotExistsAsync("用户名已存在");
            }
            
            if (!string.IsNullOrEmpty(request.Email) && request.Email != existingUser.Email)
            {
                await _userFactory.GetByEmailAsync(request.Email).EnsureNotExistsAsync("邮箱已存在");
            }

            // 6. 构建更新操作
            var update = _userFactory.CreateUpdateBuilder()
                .SetCurrentTimestamp()
                .SetOperationTracking(_tenantContext.GetCurrentUserId(), _tenantContext.GetCurrentUsername())
                .Build();

            if (!string.IsNullOrEmpty(request.Username))
            {
                update = _userFactory.CreateUpdateBuilder()
                    .Set(u => u.Username, request.Username)
                    .SetCurrentTimestamp()
                    .SetOperationTracking(_tenantContext.GetCurrentUserId(), _tenantContext.GetCurrentUsername())
                    .Build();
            }

            if (!string.IsNullOrEmpty(request.Email))
            {
                update = _userFactory.CreateUpdateBuilder()
                    .Set(u => u.Email, request.Email)
                    .SetCurrentTimestamp()
                    .SetOperationTracking(_tenantContext.GetCurrentUserId(), _tenantContext.GetCurrentUsername())
                    .Build();
            }

            // 7. 执行更新
            var result = await _userFactory.UpdateAsync(existingUser, new OperationContext
            {
                UserId = _tenantContext.GetCurrentUserId(),
                Username = _tenantContext.GetCurrentUsername(),
                CompanyId = _tenantContext.GetCurrentCompanyId(),
                OperationType = OperationType.Update,
                Description = "更新用户信息"
            });

            if (result)
            {
                _logger.LogInformation("用户更新成功: {UserId}", request.Id);
            }
            else
            {
                _logger.LogWarning("用户更新失败: {UserId}", request.Id);
            }

            return result;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (UnauthorizedAccessException)
        {
            throw;
        }
        catch (InvalidOperationException)
        {
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "用户更新失败: {UserId}", request?.Id);
            throw new InvalidOperationException("用户更新失败", ex);
        }
    }

    public async Task<bool> DeleteUserAsync(string id)
    {
        try
        {
            if (string.IsNullOrEmpty(id))
                throw new ArgumentException("用户ID不能为空", nameof(id));

            // 1. 检查用户是否存在且可以删除
            var user = await _userFactory.GetByIdAsync(id).EnsureCanDeleteAsync(id);
            
            // 2. 检查用户是否属于当前企业
            user.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "用户", id);

            // 3. 执行软删除
            var result = await _userFactory.SoftDeleteAsync(id, new OperationContext
            {
                UserId = _tenantContext.GetCurrentUserId(),
                Username = _tenantContext.GetCurrentUsername(),
                CompanyId = _tenantContext.GetCurrentCompanyId(),
                OperationType = OperationType.Delete,
                Description = "删除用户"
            });

            if (result)
            {
                _logger.LogInformation("用户删除成功: {UserId}, 用户名: {Username}", id, user.Username);
            }
            else
            {
                _logger.LogWarning("用户删除失败: {UserId}", id);
            }

            return result;
        }
        catch (ArgumentException)
        {
            throw;
        }
        catch (KeyNotFoundException)
        {
            throw;
        }
        catch (UnauthorizedAccessException)
        {
            throw;
        }
        catch (InvalidOperationException)
        {
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "用户删除失败: {UserId}", id);
            throw new InvalidOperationException("用户删除失败", ex);
        }
    }

    private async Task ValidateCreateUserRequestAsync(CreateUserRequest request)
    {
        if (string.IsNullOrEmpty(request.Username))
            throw new ArgumentException("用户名不能为空", nameof(request.Username));

        if (request.Username.Length < 3 || request.Username.Length > 50)
            throw new ArgumentException("用户名长度必须在3-50个字符之间", nameof(request.Username));

        if (!IsValidUsername(request.Username))
            throw new ArgumentException("用户名只能包含字母、数字和下划线", nameof(request.Username));

        if (string.IsNullOrEmpty(request.Email))
            throw new ArgumentException("邮箱不能为空", nameof(request.Email));

        if (!IsValidEmail(request.Email))
            throw new ArgumentException("邮箱格式不正确", nameof(request.Email));

        if (string.IsNullOrEmpty(request.Password))
            throw new ArgumentException("密码不能为空", nameof(request.Password));

        if (!IsStrongPassword(request.Password))
            throw new ArgumentException("密码必须包含字母、数字和特殊字符，长度至少8位", nameof(request.Password));
    }

    private async Task ValidateUpdateUserRequestAsync(UpdateUserRequest request, User existingUser)
    {
        if (string.IsNullOrEmpty(request.Username) && string.IsNullOrEmpty(request.Email))
            throw new ArgumentException("至少需要更新一个字段");

        if (!string.IsNullOrEmpty(request.Username))
        {
            if (request.Username.Length < 3 || request.Username.Length > 50)
                throw new ArgumentException("用户名长度必须在3-50个字符之间");

            if (!IsValidUsername(request.Username))
                throw new ArgumentException("用户名只能包含字母、数字和下划线");
        }

        if (!string.IsNullOrEmpty(request.Email))
        {
            if (!IsValidEmail(request.Email))
                throw new ArgumentException("邮箱格式不正确");
        }
    }

    private bool IsValidUsername(string username)
    {
        return username.All(c => char.IsLetterOrDigit(c) || c == '_');
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsStrongPassword(string password)
    {
        if (string.IsNullOrEmpty(password) || password.Length < 8)
            return false;

        var hasLetter = password.Any(char.IsLetter);
        var hasDigit = password.Any(char.IsDigit);
        var hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));

        return hasLetter && hasDigit && hasSpecialChar;
    }
}

// ❌ 错误 - 没有使用资源检查扩展
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 手动检查（容易遗漏）
        var existingUser = await _userFactory.GetByUsernameAsync(request.Username);
        if (existingUser != null)
        {
            throw new InvalidOperationException("用户名已存在");
        }
        
        // 没有使用统一的资源检查扩展
        var user = new User
        {
            Username = request.Username,
            Email = request.Email
        };
        
        return await _userFactory.CreateAsync(user);
    }
}
```

## 🎯 资源检查接口定义

### 资源接口定义

```csharp
// Platform.ServiceDefaults/Models/ResourceInterfaces.cs
public interface IActiveEntity
{
    bool IsActive { get; set; }
}

public interface IMultiTenant
{
    string CompanyId { get; set; }
}

public interface ISoftDeletable
{
    bool IsDeleted { get; set; }
    DateTime? DeletedAt { get; set; }
    string? DeletedBy { get; set; }
}

public interface IEntity
{
    string? Id { get; set; }
}

public interface ITimestamped
{
    DateTime CreatedAt { get; set; }
    DateTime UpdatedAt { get; set; }
}

public interface IOperationTrackable
{
    string? CreatedBy { get; set; }
    string? CreatedByUsername { get; set; }
    string? UpdatedBy { get; set; }
    string? UpdatedByUsername { get; set; }
    string? LastOperationType { get; set; }
    DateTime? LastOperationAt { get; set; }
}
```

## 🚫 禁止的做法

### 不要手动检查资源

```csharp
// ❌ 错误 - 手动检查资源
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 手动检查（容易遗漏）
        var existingUser = await _userFactory.GetByUsernameAsync(request.Username);
        if (existingUser != null)
        {
            throw new InvalidOperationException("用户名已存在");
        }
        
        var existingEmail = await _userFactory.GetByEmailAsync(request.Email);
        if (existingEmail != null)
        {
            throw new InvalidOperationException("邮箱已存在");
        }
    }
}

// ✅ 正确 - 使用资源检查扩展
public class UserService : IUserService
{
    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 使用统一的资源检查扩展
        await _userFactory.GetByUsernameAsync(request.Username).EnsureNotExistsAsync("用户名已存在");
        await _userFactory.GetByEmailAsync(request.Email).EnsureNotExistsAsync("邮箱已存在");
    }
}
```

### 不要忽略资源检查

```csharp
// ❌ 错误 - 忽略资源检查
public class UserService : IUserService
{
    public async Task<User> GetUserByIdAsync(string id)
    {
        // 没有检查资源是否存在
        return await _userFactory.GetByIdAsync(id);
    }
}

// ✅ 正确 - 完整的资源检查
public class UserService : IUserService
{
    public async Task<User> GetUserByIdAsync(string id)
    {
        // 使用资源检查扩展
        var user = await _userFactory.GetByIdAsync(id).EnsureExistsAsync("用户", id);
        user.EnsureBelongsToCurrentCompany(_tenantContext.GetCurrentCompanyId(), "用户", id);
        return user;
    }
}
```

### 不要重复资源检查逻辑

```csharp
// ❌ 错误 - 重复资源检查逻辑
public class UserService : IUserService
{
    public async Task<User> GetUserByIdAsync(string id)
    {
        var user = await _userFactory.GetByIdAsync(id);
        if (user == null)
        {
            throw new KeyNotFoundException($"用户 {id} 不存在");
        }
        return user;
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var user = await _userFactory.GetByIdAsync(request.Id);
        if (user == null)
        {
            throw new KeyNotFoundException($"用户 {request.Id} 不存在");
        }
        // 重复的检查逻辑
    }
}

// ✅ 正确 - 使用资源检查扩展避免重复
public class UserService : IUserService
{
    public async Task<User> GetUserByIdAsync(string id)
    {
        return await _userFactory.GetByIdAsync(id).EnsureExistsAsync("用户", id);
    }

    public async Task<bool> UpdateUserAsync(UpdateUserRequest request)
    {
        var user = await _userFactory.GetByIdAsync(request.Id).EnsureExistsAsync("用户", request.Id);
        // 使用统一的资源检查扩展
    }
}
```

## 📋 资源检查检查清单

创建或修改服务时检查：

- [ ] 使用 ResourceExtensions 扩展方法
- [ ] 检查资源是否存在
- [ ] 检查资源是否属于当前企业
- [ ] 检查资源是否未被删除
- [ ] 检查资源是否处于活跃状态
- [ ] 检查用户权限
- [ ] 检查资源数量限制
- [ ] 使用业务特定资源检查扩展
- [ ] 避免重复资源检查逻辑
- [ ] 提供清晰的错误消息

## 📚 相关文档

- [用户服务实现](mdc:Platform.ApiService/Services/UserService.cs)
- [角色服务实现](mdc:Platform.ApiService/Services/RoleService.cs)
- [企业服务实现](mdc:Platform.ApiService/Services/CompanyService.cs)
- [资源检查扩展方法](mdc:Platform.ServiceDefaults/Extensions/ResourceExtensions.cs)
