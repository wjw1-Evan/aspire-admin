---
globs: Platform.ApiService/Services/*.cs,Platform.ServiceDefaults/Services/*.cs
description: 服务层开发规范和最佳实践
---
# 服务层开发规范

## 🎯 核心原则

### 服务层负责业务逻辑处理，使用数据库操作工厂进行数据访问，遵循单一职责原则

## ✅ 服务层架构

### 基础服务类

```csharp
// Platform.ServiceDefaults/Services/BaseService.cs
public abstract class BaseService
{
    protected readonly IMongoDatabase Database;
    protected readonly IHttpContextAccessor HttpContextAccessor;
    protected readonly ITenantContext TenantContext;
    protected readonly ILogger Logger;

    protected BaseService(
        IMongoDatabase database,
        IHttpContextAccessor httpContextAccessor,
        ITenantContext tenantContext,
        ILogger logger)
    {
        Database = database;
        HttpContextAccessor = httpContextAccessor;
        TenantContext = tenantContext;
        Logger = logger;
    }

    protected string GetCurrentUserId()
    {
        return HttpContextAccessor.HttpContext?.User?.FindFirst("userId")?.Value ?? string.Empty;
    }

    protected string GetCurrentCompanyId()
    {
        return TenantContext.CurrentCompanyId ?? string.Empty;
    }

    protected void LogOperation(string operation, string entityId, object? data = null)
    {
        Logger.LogInformation("操作: {Operation}, 实体ID: {EntityId}, 数据: {@Data}", 
            operation, entityId, data);
    }
}
```

### 业务服务实现

```csharp
// Platform.ApiService/Services/UserService.cs
public class UserService : BaseService, IUserService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;
    private readonly IUniquenessChecker _uniquenessChecker;
    private readonly IFieldValidationService _validationService;

    public UserService(
        IMongoDatabase database,
        IDatabaseOperationFactory<User> userFactory,
        IHttpContextAccessor httpContextAccessor,
        ITenantContext tenantContext,
        ILogger<UserService> logger,
        IUniquenessChecker uniquenessChecker,
        IFieldValidationService validationService)
        : base(database, httpContextAccessor, tenantContext, logger)
    {
        _userFactory = userFactory;
        _uniquenessChecker = uniquenessChecker;
        _validationService = validationService;
    }

    public async Task<List<User>> GetAllUsersAsync()
    {
        try
        {
            LogOperation("获取所有用户", "all");
            return await _userFactory.FindAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取所有用户失败");
            throw;
        }
    }

    public async Task<User?> GetUserByIdAsync(string id)
    {
        if (string.IsNullOrEmpty(id))
            throw new ArgumentException("用户ID不能为空", nameof(id));

        try
        {
            LogOperation("根据ID获取用户", id);
            return await _userFactory.GetByIdAsync(id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取用户失败, ID: {UserId}", id);
            throw;
        }
    }

    public async Task<User> CreateUserAsync(CreateUserRequest request)
    {
        // 参数验证
        if (request == null)
            throw new ArgumentNullException(nameof(request));

        if (string.IsNullOrEmpty(request.Username))
            throw new ArgumentException("用户名不能为空");

        // 业务规则验证
        await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Username == request.Username);
        await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Email == request.Email);

        // 字段验证
        await _validationService.ValidateAsync(request);

        try
        {
            var user = new User
            {
                Username = request.Username,
                Email = request.Email,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                CompanyId = GetCurrentCompanyId(),
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            LogOperation("创建用户", user.Id, user);
            return await _userFactory.CreateAsync(user);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "创建用户失败, 用户名: {Username}", request.Username);
            throw;
        }
    }
}
```

## 🎯 服务接口定义

### 服务接口

```csharp
// Platform.ApiService/Services/IUserService.cs
public interface IUserService
{
    Task<List<User>> GetAllUsersAsync();
    Task<User?> GetUserByIdAsync(string id);
    Task<User> CreateUserAsync(CreateUserRequest request);
    Task<bool> UpdateUserAsync(UpdateUserRequest request);
    Task<bool> DeleteUserAsync(string id);
    Task<List<User>> SearchUsersByNameAsync(string keyword);
    Task<bool> DeactivateUserAsync(string id);
    Task<bool> ActivateUserAsync(string id);
}
```

## 🎯 服务注册

### 依赖注入配置

```csharp
// Platform.ApiService/Program.cs
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IRoleService, RoleService>();
builder.Services.AddScoped<INoticeService, NoticeService>();
builder.Services.AddScoped<ITagService, TagService>();

// 注册数据库操作工厂
builder.Services.AddDatabaseFactory();
```

## 🎯 业务逻辑处理

### 复杂业务逻辑

```csharp
// Platform.ApiService/Services/RoleService.cs
public class RoleService : BaseService, IRoleService
{
    private readonly IDatabaseOperationFactory<Role> _roleFactory;
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public RoleService(
        IMongoDatabase database,
        IDatabaseOperationFactory<Role> roleFactory,
        IDatabaseOperationFactory<User> userFactory,
        IHttpContextAccessor httpContextAccessor,
        ITenantContext tenantContext,
        ILogger<RoleService> logger)
        : base(database, httpContextAccessor, tenantContext, logger)
    {
        _roleFactory = roleFactory;
        _userFactory = userFactory;
    }

    public async Task<List<RoleWithStats>> GetAllRolesWithStatsAsync()
    {
        try
        {
            var roles = await _roleFactory.FindAsync();
            var rolesWithStats = new List<RoleWithStats>();

            foreach (var role in roles)
            {
                var userCount = await GetUserCountByRoleAsync(role.Id);
                rolesWithStats.Add(new RoleWithStats
                {
                    Role = role,
                    UserCount = userCount
                });
            }

            LogOperation("获取角色统计", "all");
            return rolesWithStats;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取角色统计失败");
            throw;
        }
    }

    private async Task<int> GetUserCountByRoleAsync(string roleId)
    {
        var filter = _userFactory.CreateFilterBuilder()
            .Equal(u => u.RoleId, roleId)
            .Build();

        return await _userFactory.CountAsync(filter);
    }

    public async Task<bool> DeleteRoleAsync(string id)
    {
        if (string.IsNullOrEmpty(id))
            throw new ArgumentException("角色ID不能为空");

        // 检查是否有用户使用此角色
        var userCount = await GetUserCountByRoleAsync(id);
        if (userCount > 0)
            throw new InvalidOperationException($"无法删除角色，还有 {userCount} 个用户在使用此角色");

        try
        {
            LogOperation("删除角色", id);
            return await _roleFactory.SoftDeleteAsync(id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "删除角色失败, ID: {RoleId}", id);
            throw;
        }
    }
}
```

## 🎯 事务处理

### 复杂事务操作

```csharp
// Platform.ApiService/Services/UserService.cs
public async Task<User> CreateUserWithRoleAsync(CreateUserWithRoleRequest request)
{
    if (request == null)
        throw new ArgumentNullException(nameof(request));

    using var session = await Database.Client.StartSessionAsync();
    
    try
    {
        session.StartTransaction();

        // 1. 创建用户
        var user = new User
        {
            Username = request.Username,
            Email = request.Email,
            PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
            CompanyId = GetCurrentCompanyId(),
            IsActive = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        var createdUser = await _userFactory.CreateAsync(user);

        // 2. 分配角色
        if (!string.IsNullOrEmpty(request.RoleId))
        {
            var role = await _roleFactory.GetByIdAsync(request.RoleId);
            if (role == null)
                throw new KeyNotFoundException($"角色 {request.RoleId} 不存在");

            var userUpdate = _userFactory.CreateUpdateBuilder()
                .Set(u => u.RoleId, request.RoleId)
                .Set(u => u.UpdatedAt, DateTime.UtcNow)
                .Build();

            await _userFactory.UpdateAsync(createdUser.Id, userUpdate);
            createdUser.RoleId = request.RoleId;
        }

        await session.CommitTransactionAsync();
        
        LogOperation("创建用户并分配角色", createdUser.Id, request);
        return createdUser;
    }
    catch (Exception ex)
    {
        await session.AbortTransactionAsync();
        Logger.LogError(ex, "创建用户并分配角色失败, 用户名: {Username}", request.Username);
        throw;
    }
}
```

## 🚫 禁止的做法

### 不要直接使用 MongoDB 驱动

```csharp
// ❌ 错误 - 直接使用 MongoDB 驱动
public class UserService : BaseService
{
    private readonly IMongoCollection<User> _users;

    public UserService(IMongoDatabase database)
    {
        _users = database.GetCollection<User>("users");
    }

    public async Task<User> CreateUserAsync(User user)
    {
        await _users.InsertOneAsync(user); // ❌ 没有多租户过滤、审计等
        return user;
    }
}

// ✅ 正确 - 使用数据库操作工厂
public class UserService : BaseService
{
    private readonly IDatabaseOperationFactory<User> _userFactory;

    public UserService(IDatabaseOperationFactory<User> userFactory)
    {
        _userFactory = userFactory;
    }

    public async Task<User> CreateUserAsync(User user)
    {
        return await _userFactory.CreateAsync(user); // ✅ 自动处理多租户、审计等
    }
}
```

### 不要忽略异常处理

```csharp
// ❌ 错误 - 忽略异常
public async Task<User> GetUserAsync(string id)
{
    return await _userFactory.GetByIdAsync(id); // 可能抛出异常
}

// ✅ 正确 - 适当的异常处理
public async Task<User?> GetUserAsync(string id)
{
    try
    {
        return await _userFactory.GetByIdAsync(id);
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "获取用户失败, ID: {UserId}", id);
        throw;
    }
}
```

### 不要忽略业务规则验证

```csharp
// ❌ 错误 - 没有业务规则验证
public async Task<User> CreateUserAsync(CreateUserRequest request)
{
    var user = new User
    {
        Username = request.Username,
        Email = request.Email,
        PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password)
    };
    
    return await _userFactory.CreateAsync(user);
}

// ✅ 正确 - 完整的业务规则验证
public async Task<User> CreateUserAsync(CreateUserRequest request)
{
    // 参数验证
    if (request == null)
        throw new ArgumentNullException(nameof(request));

    if (string.IsNullOrEmpty(request.Username))
        throw new ArgumentException("用户名不能为空");

    // 业务规则验证
    await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Username == request.Username);
    await _uniquenessChecker.EnsureUniqueAsync<User>(u => u.Email == request.Email);

    // 字段验证
    await _validationService.ValidateAsync(request);

    var user = new User
    {
        Username = request.Username,
        Email = request.Email,
        PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
        CompanyId = GetCurrentCompanyId(),
        IsActive = true,
        CreatedAt = DateTime.UtcNow,
        UpdatedAt = DateTime.UtcNow
    };

    return await _userFactory.CreateAsync(user);
}
```

## 📋 服务层开发检查清单

创建或修改服务时检查：

- [ ] 继承 BaseService 基类
- [ ] 使用 IDatabaseOperationFactory&lt;T&gt; 进行数据访问
- [ ] 实现对应的服务接口
- [ ] 添加适当的参数验证
- [ ] 添加业务规则验证
- [ ] 添加异常处理和日志记录
- [ ] 使用事务处理复杂操作
- [ ] 添加操作审计日志
- [ ] 遵循单一职责原则
- [ ] 添加单元测试

## 📚 相关文档

- [数据库操作工厂使用指南](mdc:docs/features/DATABASE-OPERATION-FACTORY-GUIDE.md)
- [后端数据访问层规范](mdc:.cursor/rules/backend-data-access.mdc)
- [API控制器标准规范](mdc:.cursor/rules/api-controller-standards.mdc)
