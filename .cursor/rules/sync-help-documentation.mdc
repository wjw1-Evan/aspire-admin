---
alwaysApply: true
description: 代码修改后同步更新系统帮助文档的规范
---

# 代码修改后同步更新系统帮助

## 🎯 核心原则

**任何代码修改都必须同步更新相关的帮助文档，确保用户获取的信息与实际功能保持一致。**

## 📋 必须同步更新的场景

### 1. API 接口变更

当修改 API 接口时，必须同步更新：

```csharp
// ❌ 错误：只修改代码，不更新文档
[HttpPost("new-endpoint")]
public async Task<IActionResult> NewEndpoint(...)
{
    // 新增接口但没有更新 API 文档
}

// ✅ 正确：修改代码后，同步更新以下内容：
// 1. Scalar API 文档注释
// 2. docs/features/ 中的功能文档
// 3. 前端帮助模块中的相关说明
[HttpPost("new-endpoint")]
/// <summary>
/// 新增端点的详细说明
/// </summary>
/// <remarks>
/// 详细的使用说明和示例
/// </remarks>
public async Task<IActionResult> NewEndpoint(...)
```

**需要更新的文档：**
- API 接口的 XML 注释（用于 Scalar 文档）
- `docs/features/` 中的功能说明文档
- 前端帮助模块的相关内容

### 2. 功能模块更新

修改或新增功能模块时，需要更新：

**后端修改：**
- `Platform.ApiService/Controllers/` - 更新 XML 注释
- `docs/features/` - 创建或更新功能文档

**前端修改：**
- `Platform.Admin/src/pages/` - 更新页面功能
- 前端帮助模块 - 同步更新使用说明
- `docs/features/` - 更新功能文档

### 3. 权限系统变更

当修改权限相关代码时：

```csharp
// 新增权限检查
[RequirePermission("new-resource", "action")]

// ✅ 必须同步更新：
// 1. docs/permissions/ 中的权限文档
// 2. 前端帮助模块的权限说明
// 3. 用户手册中的权限章节
```

**需要更新的文档：**
- `docs/permissions/` 权限文档
- 前端帮助模块的权限说明部分
- 管理员帮助指南

### 4. 用户界面变更

前端界面修改后需要更新：

```tsx
// ❌ 错误：修改界面不更新帮助
const UserManagement = () => {
  // 新增了批量操作功能，但没有更新帮助文档
  return <NewBulkActionButton />
}

// ✅ 正确：同时更新
// 1. 帮助模块中的操作指南
// 2. docs/features/ 中的功能说明
// 3. 可能需要添加操作提示或引导
```

**需要更新的文档：**
- 前端帮助模块的相关章节
- `docs/features/` 功能文档
- 界面内的提示信息和引导

### 5. 配置项变更

修改配置选项时：

```json
// appsettings.json 新增配置
{
  "NewFeature": {
    "Enabled": true,
    "Options": {...}
  }
}
```

**需要更新的文档：**
- `docs/features/` 配置说明
- 部署文档 `docs/deployment/`
- 系统帮助中的配置指南

## 🔄 更新流程

### 步骤 1: 修改代码
```bash
# 修改控制器、服务、页面等
git add Platform.ApiService/Controllers/UserController.cs
```

### 步骤 2: 更新 XML 注释（后端）
```csharp
/// <summary>
/// 获取用户列表（支持高级筛选）
/// </summary>
/// <param name="request">筛选参数</param>
/// <returns>用户列表和分页信息</returns>
/// <remarks>
/// 示例请求：
/// ```json
/// {
///   "page": 1,
///   "pageSize": 10,
///   "keyword": "admin"
/// }
/// ```
/// </remarks>
[HttpGet]
public async Task<IActionResult> GetUsers([FromQuery] UserListRequest request)
```

### 步骤 3: 更新功能文档
```bash
# 创建或更新功能文档
vim docs/features/USER-ADVANCED-FILTER.md
```

```markdown
# 用户高级筛选功能

## 📋 概述
新增的用户高级筛选功能允许管理员通过多个条件组合查询用户。

## ✨ 功能特性
- 关键词搜索（用户名、邮箱）
- 角色筛选
- 状态筛选（活跃/禁用）
- 时间范围筛选

## 🔧 使用方法
1. 进入用户管理页面
2. 点击"高级筛选"按钮
3. 设置筛选条件
4. 点击"查询"获取结果

## 📚 API 接口
`GET /api/user?keyword=xxx&roleIds=xxx`
```

### 步骤 4: 更新前端帮助模块
```tsx
// Platform.Admin/src/components/HelpModal/content.tsx
export const helpContent = {
  userManagement: {
    title: '用户管理',
    sections: [
      {
        title: '高级筛选',  // 新增章节
        content: `
          ### 使用高级筛选
          1. 点击页面顶部的"高级筛选"按钮
          2. 在弹出的筛选框中设置条件
          3. 支持的筛选条件：
             - 关键词搜索
             - 角色筛选
             - 状态筛选
             - 创建时间范围
        `
      }
    ]
  }
}
```

### 步骤 5: 更新索引文档
```bash
# 更新文档索引
vim docs/INDEX.md
```

```markdown
## 功能文档
- [用户高级筛选](features/USER-ADVANCED-FILTER.md) - 新增
```

### 步骤 6: 提交变更
```bash
# 一次性提交代码和文档
git add .
git commit -m "feat: 新增用户高级筛选功能

- 新增高级筛选 API 接口
- 更新前端用户管理页面
- 同步更新帮助文档和功能说明"
```

## 📝 文档更新检查清单

每次代码修改后，检查以下内容：

### 后端修改检查
- [ ] 更新了 XML 文档注释（用于 Scalar API 文档）
- [ ] 在 `docs/features/` 创建或更新了功能文档
- [ ] 如果涉及权限，更新了 `docs/permissions/`
- [ ] 如果修改了中间件，更新了 `docs/middleware/`
- [ ] 更新了 `docs/INDEX.md` 文档索引

### 前端修改检查
- [ ] 更新了组件内的提示信息和引导
- [ ] 同步更新了帮助模块内容
- [ ] 在 `docs/features/` 更新了用户操作指南
- [ ] 如果是新功能，添加了使用示例

### 配置修改检查
- [ ] 更新了配置说明文档
- [ ] 更新了部署文档
- [ ] 在帮助模块中说明了配置方法

### 数据模型修改检查
- [ ] 更新了 API 文档注释
- [ ] 更新了字段说明
- [ ] 如果影响前端，更新了 TypeScript 类型定义

## 🎯 特殊场景处理

### 场景 1: 破坏性变更
```markdown
# 在文档中明确标注

## ⚠️ 破坏性变更
从 v2.0 开始，`/api/user` 接口的返回格式已变更：

**旧格式（v1.x）：**
```json
{ "users": [...], "total": 100 }
```

**新格式（v2.0+）：**
```json
{ "data": [...], "total": 100, "page": 1 }
```
```

### 场景 2: 实验性功能
```markdown
# 标注实验性功能

## 🧪 实验性功能
此功能当前处于实验阶段，API 可能会在未来版本中变更。
请勿在生产环境中使用。
```

### 场景 3: 废弃功能
```markdown
# 标注废弃信息

## ⛔ 已废弃
此接口已在 v2.0 中废弃，请使用新接口 `/api/v2/user`。
计划在 v3.0 中移除。

**迁移指南：** [查看迁移文档](../migration/V1-TO-V2.md)
```

## 🔍 代码审查要点

在进行 Code Review 时，检查以下内容：

1. **代码变更是否有对应的文档更新？**
   - API 修改 → XML 注释 + 功能文档
   - 前端变更 → 帮助模块 + 功能文档
   - 配置修改 → 配置文档

2. **文档内容是否准确？**
   - 示例代码是否正确
   - 参数说明是否完整
   - 返回值说明是否准确

3. **文档是否易于理解？**
   - 有清晰的步骤说明
   - 有必要的示例
   - 有相关链接引用

4. **文档组织是否规范？**
   - 放在正确的 `docs/` 子目录
   - 更新了 `docs/INDEX.md`
   - 遵循文档命名规范

## 📚 相关文档

- [文档组织规范](mdc:docs/INDEX.md)
- [帮助模块功能](mdc:docs/features/HELP-MODULE-FEATURE.md)
- [项目结构指南](mdc:README.md)

## ⚠️ 常见错误

### ❌ 错误 1: 只修改代码，不更新文档
```bash
# 错误的提交
git commit -m "新增用户导出功能"
# 但没有更新任何文档
```

### ❌ 错误 2: 文档与代码不一致
```csharp
// 代码已修改参数类型
[HttpPost]
public async Task<IActionResult> Create([FromBody] NewUserRequest request)

// 但文档还是旧的参数说明
/// <param name="request">CreateUserRequest 对象</param>  // ❌ 过时
```

### ❌ 错误 3: 文档放错位置
```bash
# 错误：在项目根目录创建文档
/USER-EXPORT-FEATURE.md

# 正确：在 docs 目录
docs/features/USER-EXPORT-FEATURE.md
```

### ❌ 错误 4: 不更新帮助模块
```tsx
// 新增了批量删除功能
const handleBulkDelete = () => {...}

// ❌ 但帮助模块中没有说明如何使用批量删除
```

## ✅ 最佳实践

1. **边开发边写文档** - 不要等到功能完成后才写文档
2. **使用示例代码** - 在文档中提供实际可用的示例
3. **保持文档同步** - 代码和文档在同一个 commit 中提交
4. **定期审查文档** - 确保文档与当前代码一致
5. **用户视角写作** - 从用户角度编写文档，而不是开发者视角

## 🎯 记住

**好的代码 = 清晰的实现 + 完善的文档**

文档不是额外的工作，而是代码的一部分。保持文档与代码同步，让每个使用者都能轻松理解和使用你的功能。

