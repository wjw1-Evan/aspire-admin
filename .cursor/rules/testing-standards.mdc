---
globs: **/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,**/__tests__/**
description: 测试规范和最佳实践
---

# 测试规范和最佳实践

## 🧪 测试策略

### 测试金字塔
1. **单元测试** - 测试单个函数或组件
2. **集成测试** - 测试组件间的交互
3. **端到端测试** - 测试完整的用户流程

### 测试工具
- **Jest** - JavaScript 测试框架
- **React Testing Library** - React 组件测试
- **Expo Testing Library** - Expo 应用测试
- **MSW** - API 模拟

## 🎯 单元测试

### 组件测试
```typescript
// ✅ 推荐：组件测试示例
import { render, screen, fireEvent } from '@testing-library/react-native';
import { ThemeProvider } from '@/contexts/ThemeContext';
import UserCard from './UserCard';

const renderWithTheme = (component: React.ReactElement) => {
  return render(
    <ThemeProvider>
      {component}
    </ThemeProvider>
  );
};

describe('UserCard', () => {
  const mockUser = {
    id: '1',
    username: 'testuser',
    email: 'test@example.com',
    role: 'user',
  };

  it('renders user information correctly', () => {
    renderWithTheme(<UserCard user={mockUser} />);
    
    expect(screen.getByText('testuser')).toBeTruthy();
    expect(screen.getByText('test@example.com')).toBeTruthy();
  });

  it('calls onEdit when edit button is pressed', () => {
    const mockOnEdit = jest.fn();
    renderWithTheme(<UserCard user={mockUser} onEdit={mockOnEdit} />);
    
    fireEvent.press(screen.getByText('编辑'));
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser);
  });
});
```

### Hook 测试
```typescript
// ✅ 推荐：Hook 测试示例
import { renderHook, act } from '@testing-library/react-hooks';
import { useUsers } from './useUsers';
import { UserService } from '@/services/UserService';

// Mock 服务
jest.mock('@/services/UserService');
const mockUserService = UserService as jest.Mocked<typeof UserService>;

describe('useUsers', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('fetches users on mount', async () => {
    const mockUsers = [
      { id: '1', username: 'user1', email: 'user1@example.com' },
    ];
    mockUserService.getUsers.mockResolvedValue(mockUsers);

    const { result, waitForNextUpdate } = renderHook(() => useUsers());

    expect(result.current.loading).toBe(true);
    
    await waitForNextUpdate();
    
    expect(result.current.loading).toBe(false);
    expect(result.current.users).toEqual(mockUsers);
    expect(result.current.error).toBeNull();
  });

  it('handles fetch error', async () => {
    const errorMessage = 'Network error';
    mockUserService.getUsers.mockRejectedValue(new Error(errorMessage));

    const { result, waitForNextUpdate } = renderHook(() => useUsers());

    await waitForNextUpdate();
    
    expect(result.current.loading).toBe(false);
    expect(result.current.users).toEqual([]);
    expect(result.current.error).toBe(errorMessage);
  });
});
```

## 🔧 集成测试

### API 集成测试
```typescript
// ✅ 推荐：API 集成测试
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { UserService } from '@/services/UserService';

const server = setupServer(
  rest.get('http://localhost:15000/api/apiservice/api/users', (req, res, ctx) => {
    return res(
      ctx.json([
        { id: '1', username: 'user1', email: 'user1@example.com' },
      ])
    );
  }),
  rest.post('http://localhost:15000/api/apiservice/api/users', (req, res, ctx) => {
    return res(
      ctx.status(201),
      ctx.json({ id: '2', username: 'user2', email: 'user2@example.com' })
    );
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

describe('UserService Integration', () => {
  it('fetches users from API', async () => {
    const users = await UserService.getUsers();
    
    expect(users).toHaveLength(1);
    expect(users[0].username).toBe('user1');
  });

  it('creates user via API', async () => {
    const newUser = {
      username: 'user2',
      email: 'user2@example.com',
    };
    
    const createdUser = await UserService.createUser(newUser);
    
    expect(createdUser.id).toBe('2');
    expect(createdUser.username).toBe('user2');
  });
});
```

### 主题系统测试
```typescript
// ✅ 推荐：主题系统测试
import { renderHook, act } from '@testing-library/react-hooks';
import { ThemeProvider, useTheme } from '@/contexts/ThemeContext';

const wrapper = ({ children }: { children: React.ReactNode }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

describe('ThemeContext', () => {
  it('provides default theme mode', () => {
    const { result } = renderHook(() => useTheme(), { wrapper });
    
    expect(result.current.themeMode).toBe('system');
    expect(result.current.isDark).toBe(false);
  });

  it('toggles theme mode', () => {
    const { result } = renderHook(() => useTheme(), { wrapper });
    
    act(() => {
      result.current.setThemeMode('dark');
    });
    
    expect(result.current.themeMode).toBe('dark');
    expect(result.current.isDark).toBe(true);
  });
});
```

## 📱 移动端测试

### 导航测试
```typescript
// ✅ 推荐：导航测试
import { render, fireEvent } from '@testing-library/react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './HomeScreen';
import ProfileScreen from './ProfileScreen';

const Stack = createStackNavigator();

const renderWithNavigation = () => {
  return render(
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Profile" component={ProfileScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

describe('Navigation', () => {
  it('navigates to profile screen', () => {
    const { getByText } = renderWithNavigation();
    
    fireEvent.press(getByText('个人中心'));
    
    expect(getByText('个人资料')).toBeTruthy();
  });
});
```

### 异步存储测试
```typescript
// ✅ 推荐：异步存储测试
import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthService } from '@/services/AuthService';

jest.mock('@react-native-async-storage/async-storage', () => ({
  setItem: jest.fn(),
  getItem: jest.fn(),
  removeItem: jest.fn(),
}));

describe('AuthService', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('stores token after login', async () => {
    const mockResponse = {
      token: 'mock-token',
      user: { id: '1', username: 'testuser' },
    };

    // Mock API response
    jest.spyOn(global, 'fetch').mockResolvedValue({
      json: () => Promise.resolve(mockResponse),
    } as Response);

    await AuthService.login({ username: 'testuser', password: 'password' });

    expect(AsyncStorage.setItem).toHaveBeenCalledWith('auth_token', 'mock-token');
    expect(AsyncStorage.setItem).toHaveBeenCalledWith('user_info', JSON.stringify(mockResponse.user));
  });
});
```

## 🚫 避免的做法

- 不要测试实现细节，测试行为
- 不要忘记清理测试副作用
- 不要硬编码测试数据
- 不要忽略异步测试的等待
- 不要在生产代码中留下测试代码

## 🔧 测试配置

### Jest 配置
```javascript
// jest.config.js
module.exports = {
  preset: 'react-native',
  setupFilesAfterEnv: ['<rootDir>/tests/setupTests.js'],
  testMatch: [
    '**/__tests__/**/*.(ts|tsx|js)',
    '**/*.(test|spec).(ts|tsx|js)',
  ],
  collectCoverageFrom: [
    'app/**/*.{ts,tsx}',
    'components/**/*.{ts,tsx}',
    'services/**/*.{ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
};
```

### 测试工具函数
```typescript
// tests/test-utils.tsx
import React from 'react';
import { render } from '@testing-library/react-native';
import { ThemeProvider } from '@/contexts/ThemeContext';
import { NavigationContainer } from '@react-navigation/native';

export const renderWithProviders = (
  ui: React.ReactElement,
  options?: any
) => {
  return render(
    <NavigationContainer>
      <ThemeProvider>
        {ui}
      </ThemeProvider>
    </NavigationContainer>,
    options
  );
};
```

## 🎯 最佳实践

1. **测试行为而非实现** - 关注用户交互和预期结果
2. **保持测试简单** - 每个测试只验证一个功能点
3. **使用描述性名称** - 测试名称应该清楚说明测试内容
4. **模拟外部依赖** - 使用 Mock 隔离测试单元
5. **保持测试独立** - 测试之间不应该相互依赖