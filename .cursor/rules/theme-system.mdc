---
globs: **/theme*.ts,**/theme*.tsx,**/Themed*.tsx
description: 主题系统使用指南和规范
---

# 主题系统使用指南

## 🎨 主题架构

### 核心组件
- **ThemeContext** - 全局主题状态管理
- **ThemedText** - 主题化文字组件
- **ThemedView** - 主题化视图组件
- **ThemedInput** - 主题化输入框组件
- **ThemedButton** - 主题化按钮组件

### 主题模式
1. **浅色模式** - 始终使用浅色主题
2. **深色模式** - 始终使用深色主题
3. **跟随系统** - 根据系统设置自动切换（默认）

## 🎯 使用规范

### 基础用法
```typescript
// ✅ 推荐：使用主题化组件
import { ThemedText, ThemedView, ThemedButton } from '@/components';

export default function MyScreen() {
  return (
    <ThemedView style={styles.container}>
      <ThemedText type="title">标题</ThemedText>
      <ThemedText type="subtitle">副标题</ThemedText>
      <ThemedButton title="按钮" />
    </ThemedView>
  );
}
```

### 获取主题状态
```typescript
// ✅ 推荐：使用主题 Hook
import { useTheme } from '@/contexts/ThemeContext';
import { useThemeColor } from '@/hooks/use-theme-color';

export default function MyComponent() {
  const { themeMode, setThemeMode, isDark, toggleTheme } = useTheme();
  const backgroundColor = useThemeColor({}, 'background');
  const textColor = useThemeColor({}, 'text');
  
  return (
    <View style={{ backgroundColor }}>
      <Text style={{ color: textColor }}>主题化文字</Text>
    </View>
  );
}
```

### 主题切换组件
```typescript
// ✅ 推荐：使用主题切换组件
import { ThemeToggle, ThemeSelector } from '@/components';

// 快速切换按钮
<ThemeToggle size="medium" />

// 完整主题选择器（模态弹窗）
<ThemeSelector />
```

## 🎨 颜色系统

### 普鲁士蓝色系
项目使用普鲁士蓝色系作为主色调：

```typescript
// constants/theme.ts
export const Colors = {
  light: {
    text: '#1A1A1A',           // 深黑色文字
    background: '#F5F7FA',     // 浅灰蓝背景
    tint: '#003A6B',           // 普鲁士蓝
    card: '#FFFFFF',           // 纯白卡片
    border: '#D1D9E0',         // 普鲁士蓝浅边框
  },
  dark: {
    text: '#F1F5F9',           // 浅灰白文字
    background: '#0F172A',     // 深普鲁士蓝背景
    tint: '#4A90E2',           // 普鲁士蓝浅色
    card: '#1E293B',           // 普鲁士蓝深卡片
    border: '#334155',         // 普鲁士蓝深边框
  },
};
```

### 状态颜色
```typescript
// 系统状态颜色
success: '#10B981',    // 翠绿色
warning: '#F59E0B',    // 琥珀色
error: '#EF4444',      // 红色
info: '#3B82F6',       // 蓝色
```

## 🔧 组件开发

### 创建主题化组件
```typescript
// ✅ 推荐：创建新的主题化组件
import { useThemeColor } from '@/hooks/use-theme-color';

interface ThemedCardProps {
  readonly children: React.ReactNode;
  readonly style?: ViewStyle;
}

export function ThemedCard({ children, style }: ThemedCardProps) {
  const backgroundColor = useThemeColor({}, 'card');
  const borderColor = useThemeColor({}, 'border');
  
  return (
    <View style={[
      {
        backgroundColor,
        borderColor,
        borderWidth: 1,
        borderRadius: 8,
        padding: 16,
      },
      style
    ]}>
      {children}
    </View>
  );
}
```

### 状态栏适配
```typescript
// ✅ 推荐：状态栏主题适配
import { StatusBar } from 'expo-status-bar';
import { useTheme } from '@/contexts/ThemeContext';

export default function App() {
  const { isDark } = useTheme();
  
  return (
    <>
      <StatusBar style={isDark ? 'light' : 'dark'} />
      {/* 应用内容 */}
    </>
  );
}
```

## 📱 页面适配

### 完整页面主题化
```typescript
// ✅ 推荐：完整页面主题化示例
export default function ProfileScreen() {
  const backgroundColor = useThemeColor({}, 'background');
  const cardBackgroundColor = useThemeColor({}, 'card');
  const borderColor = useThemeColor({}, 'border');
  
  return (
    <ThemedView style={[styles.container, { backgroundColor }]}>
      <ThemedView style={[styles.section, { backgroundColor: cardBackgroundColor }]}>
        <ThemedText type="subtitle" style={[styles.sectionTitle, { borderBottomColor: borderColor }]}>
          用户信息
        </ThemedText>
        {/* 内容 */}
      </ThemedView>
    </ThemedView>
  );
}
```

## 🚫 避免的做法

- 不要硬编码颜色值
- 不要忘记适配深色模式
- 不要忽略状态栏样式
- 不要忘记测试所有主题模式
- 不要使用不兼容的颜色组合

## 🔄 主题切换

### 持久化存储
主题偏好会自动保存到 AsyncStorage，应用重启后会恢复用户选择。

### 系统主题检测
```typescript
// ✅ 推荐：检测系统主题变化
import { useColorScheme } from 'react-native';

const systemColorScheme = useColorScheme();
// 当用户选择"跟随系统"时，会自动响应系统主题变化
```

## 🎯 最佳实践

1. **始终使用主题化组件** - 确保所有 UI 元素都能正确适配主题
2. **测试所有主题模式** - 确保在浅色、深色和跟随系统模式下都正常显示
3. **保持颜色一致性** - 使用预定义的颜色系统，避免随意添加新颜色
4. **考虑可访问性** - 确保颜色对比度符合可访问性标准
5. **性能优化** - 使用 useMemo 缓存主题相关的计算