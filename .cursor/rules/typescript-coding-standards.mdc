---
globs: *.ts,*.tsx
description: TypeScript 编码规范和最佳实践
---

# TypeScript 编码规范

## 🎯 代码风格

### 格式化配置
- 使用 **Biome** 作为代码格式化和检查工具
- 缩进使用 **空格** (space)
- 字符串使用 **单引号** (single quotes)
- JSX 运行时使用 **reactClassic**

### 命名约定
- **组件**: 使用 PascalCase (如 `UserManagement`)
- **函数/变量**: 使用 camelCase (如 `getUserList`)
- **常量**: 使用 UPPER_SNAKE_CASE (如 `API_BASE_URL`)
- **接口**: 使用 PascalCase，前缀 I (如 `IUserModel`)
- **类型**: 使用 PascalCase (如 `UserStatus`)

### TypeScript 配置
- 启用 **严格模式** (`strict: true`)
- 启用 **空值检查** (`nullable: enable`)
- 使用 **路径映射** (`@/*` 指向 `./src/*`)

## 📝 代码规范

### 组件定义
```typescript
// ✅ 推荐：使用函数组件
interface UserCardProps {
  readonly user: User;
  readonly onEdit?: (user: User) => void;
}

export default function UserCard({ user, onEdit }: UserCardProps) {
  return (
    <div className="user-card">
      <h3>{user.name}</h3>
    </div>
  );
}
```

### 类型定义
```typescript
// ✅ 推荐：明确的类型定义
interface User {
  readonly id: string;
  readonly username: string;
  readonly email: string;
  readonly role: UserRole;
  readonly createdAt: Date;
}

type UserRole = 'admin' | 'user' | 'guest';
```

### 错误处理
```typescript
// ✅ 推荐：使用 try-catch 处理异步操作
async function fetchUser(id: string): Promise<User | null> {
  try {
    const response = await api.get(`/users/${id}`);
    return response.data;
  } catch (error) {
    console.error('Failed to fetch user:', error);
    return null;
  }
}
```

## 🚫 避免的做法

- 不要使用 `any` 类型（除非必要）
- 不要忽略 TypeScript 错误
- 不要使用 `@ts-ignore` 注释
- 不要使用 `var` 声明变量
- 不要使用 `==` 进行比较

## 🔧 工具配置

### Biome 配置
- 启用推荐规则
- 关闭 `noExplicitAny` 检查
- 关闭 `useExhaustiveDependencies` 检查
- 关闭部分 a11y 规则以适应项目需求
